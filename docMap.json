{
  "normalizeAndLocate": {
    "type": "function",
    "name": "normalizeAndLocate",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "moduleName",
        "description": "The module to run through normalize and locate."
      },
      {
        "name": "parentName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/src/system-extension-locate.js",
    "src": {
      "line": 4,
      "codeLine": 11,
      "path": "node_modules/steal/src/system-extension-locate.js"
    },
    "body": "",
    "description": "Run a module identifier through Normalize and Locate hooks. ",
    "hide": true,
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "moduleName",
      "description": "The module to run through normalize and locate."
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise to resolve when the address is found.\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise to resolve when the address is found.\n "
    }
  },
  "unhandledRejections": {
    "name": "unhandledRejections",
    "type": "property",
    "parent": "node_modules/steal/steal.js",
    "src": {
      "line": 10,
      "codeLine": 13,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\n",
    "description": "ES6 global Promise shim\n"
  },
  "Scheduler": {
    "type": "constructor",
    "name": "Scheduler",
    "params": [
      {
        "name": "async",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "asyncfunction",
        "description": "to schedule a single async function"
      }
    ],
    "parent": "node_modules/steal/steal.js",
    "src": {
      "line": 50,
      "codeLine": 55,
      "path": "node_modules/steal/steal.js"
    },
    "body": " \n",
    "description": "Async task scheduler\n",
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "asyncfunction",
      "description": "to schedule a single async function"
    }
  },
  "Scheduler.Scheduler.prototype.enqueue": {
    "type": "function",
    "name": "Scheduler.Scheduler.prototype.enqueue",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": [
              {
                "name": "run",
                "types": [
                  {
                    "type": "function",
                    "returns": {
                      "types": [
                        {
                          "type": "undefined"
                        }
                      ]
                    },
                    "params": []
                  }
                ]
              }
            ]
          }
        ],
        "name": "task",
        "description": "\n "
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 70,
      "codeLine": 74,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Enqueue a task\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": [
            {
              "name": "run",
              "types": [
                {
                  "type": "function",
                  "returns": {
                    "types": [
                      {
                        "type": "undefined"
                      }
                    ]
                  },
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "name": "task",
      "description": "\n "
    }
  },
  "Scheduler.Scheduler.prototype.afterQueue": {
    "type": "function",
    "name": "Scheduler.Scheduler.prototype.afterQueue",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": [
              {
                "name": "run",
                "types": [
                  {
                    "type": "function",
                    "returns": {
                      "types": [
                        {
                          "type": "undefined"
                        }
                      ]
                    },
                    "params": []
                  }
                ]
              }
            ]
          }
        ],
        "name": "task",
        "description": "\n "
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 79,
      "codeLine": 83,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Enqueue a task to run after the main task queue\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": [
            {
              "name": "run",
              "types": [
                {
                  "type": "function",
                  "returns": {
                    "types": [
                      {
                        "type": "undefined"
                      }
                    ]
                  },
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "name": "task",
      "description": "\n "
    }
  },
  "Scheduler.Scheduler.prototype._drain": {
    "type": "function",
    "name": "Scheduler.Scheduler.prototype._drain",
    "params": [],
    "parent": "Scheduler",
    "src": {
      "line": 95,
      "codeLine": 98,
      "path": "node_modules/steal/steal.js"
    },
    "body": " \n",
    "description": "Drain the handler queue entirely, and then the after queue\n"
  },
  "Scheduler.formatError": {
    "type": "function",
    "name": "Scheduler.formatError",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "e",
        "description": ""
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 298,
      "codeLine": 305,
      "path": "node_modules/steal/steal.js"
    },
    "body": " \n",
    "description": "Format an error into a string.  If e is an Error and has a stack property,\nit's returned.  Otherwise, e is formatted using formatObject, with a\nwarning added about e not being a proper Error.\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "e",
      "description": ""
    },
    "returns": [
      "{String} formatted string",
      "suitable for output to developers"
    ]
  },
  "Scheduler.formatObject": {
    "type": "function",
    "name": "Scheduler.formatObject",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "o",
        "description": ""
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 310,
      "codeLine": 316,
      "path": "node_modules/steal/steal.js"
    },
    "body": " \n",
    "description": "Format an object, detecting \"plain\" objects and running them through\nJSON.stringify if possible.\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "o",
      "description": ""
    },
    "returns": "{string}"
  },
  "Scheduler.tryStringify": {
    "type": "function",
    "name": "Scheduler.tryStringify",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "defaultValue",
        "description": ""
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 324,
      "codeLine": 331,
      "path": "node_modules/steal/steal.js"
    },
    "body": " \n",
    "description": "Try to return the result of JSON.stringify(x).  If that fails, return\ndefaultValue\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "defaultValue",
      "description": ""
    },
    "returns": "{String|*} JSON.stringify(x) or defaultValue"
  },
  "Promise": {
    "type": "constructor",
    "name": "Promise",
    "params": [
      {
        "name": "resolver",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "handler",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Scheduler",
    "src": {
      "line": 362,
      "codeLine": 368,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Create a promise whose fate is determined by resolver\n",
    "returns": "{Promise} promise"
  },
  "Promise.init": {
    "type": "function",
    "name": "Promise.init",
    "params": [
      {
        "name": "resolver",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 372,
      "codeLine": 377,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Run the supplied resolver\n",
    "_curParam": {
      "name": "resolver",
      "description": ""
    },
    "returns": "{Pending}"
  },
  "Promise.promiseResolve": {
    "type": "function",
    "name": "Promise.promiseResolve",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": "resolution value\n\t\t "
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 388,
      "codeLine": 393,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Transition from pre-resolution state to post-resolution state, notifying\nall listeners of the ultimate fulfillment or rejection\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": "resolution value\n\t\t "
    }
  },
  "Promise.promiseReject": {
    "type": "function",
    "name": "Promise.promiseReject",
    "params": [
      {
        "types": [
          {
            "type": "Error"
          },
          {
            "type": "*"
          }
        ],
        "name": "reason",
        "description": "rejection reason, strongly suggested\n  to be an Error type\n\t\t "
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 396,
      "codeLine": 401,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Reject this promise with reason, which will be used verbatim\n",
    "_curParam": {
      "types": [
        {
          "type": "Error"
        },
        {
          "type": "*"
        }
      ],
      "name": "reason",
      "description": "rejection reason, strongly suggested\n  to be an Error type\n\t\t "
    }
  },
  "Promise.promiseNotify": {
    "type": "function",
    "name": "Promise.promiseNotify",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": "progress event payload to pass to all listeners\n\t\t "
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 405,
      "codeLine": 410,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Issue a progress event, notifying all progress listeners\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": "progress event payload to pass to all listeners\n\t\t "
    }
  },
  "Promise.resolve": {
    "type": "function",
    "name": "Promise.resolve",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 424,
      "codeLine": 430,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Returns a trusted promise. If x is already a trusted promise, it is\nreturned, otherwise returns a new trusted Promise which follows x.\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "promise\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "promise\n\t "
    }
  },
  "Promise.reject": {
    "type": "function",
    "name": "Promise.reject",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 435,
      "codeLine": 440,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Return a reject promise with x as its reason (x is used verbatim)\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{Promise} rejected promise"
  },
  "Promise.never": {
    "type": "function",
    "name": "Promise.never",
    "params": [],
    "parent": "Promise",
    "src": {
      "line": 444,
      "codeLine": 448,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Return a promise that remains pending forever\n",
    "returns": "{Promise} forever-pending promise."
  },
  "Promise.defer": {
    "type": "function",
    "name": "Promise.defer",
    "params": [],
    "parent": "Promise",
    "src": {
      "line": 452,
      "codeLine": 457,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Creates an internal {promise, resolver} pair\n",
    "private": true,
    "returns": "{Promise}"
  },
  "Promise.Promise.prototype.then": {
    "type": "function",
    "name": "Promise.Promise.prototype.then",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "onFulfilled",
        "description": "fulfillment handler"
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "onRejected",
        "description": "rejection handler"
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "onProgress",
        "description": "@deprecated progress handler"
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 463,
      "codeLine": 473,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Transform this promise's fulfillment value, returning a new Promise\nfor the transformed result.  If the promise cannot be fulfilled, onRejected\nis called with the reason.  onProgress *may* be called with updates toward\nthis promise's fulfillment.\n",
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "optional": true,
      "name": "onProgress",
      "description": "@deprecated progress handler"
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "new promise\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "new promise\n\t "
    }
  },
  "Promise.Promise.prototype._beget": {
    "type": "function",
    "name": "Promise.Promise.prototype._beget",
    "params": [],
    "parent": "Promise",
    "src": {
      "line": 501,
      "codeLine": 506,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Creates a new, pending promise of the same type as this promise\n",
    "private": true,
    "returns": "{Promise}"
  },
  "Promise.all": {
    "type": "function",
    "name": "Promise.all",
    "params": [
      {
        "types": [
          {
            "type": "array"
          }
        ],
        "name": "promises",
        "description": "array of promises"
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 521,
      "codeLine": 528,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Return a promise that will fulfill when all promises in the\ninput array have fulfilled, or will reject when one of the\npromises rejects.\n",
    "_curParam": {
      "types": [
        {
          "type": "array"
        }
      ],
      "name": "promises",
      "description": "array of promises"
    },
    "returns": "{Promise} promise for array of fulfillment values"
  },
  "Promise.traverse": {
    "type": "function",
    "name": "Promise.traverse",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "promises",
        "description": "array of promises"
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "ffunction",
        "description": "to apply to each promise's value"
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 532,
      "codeLine": 539,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Array<Promise<X>> -> Promise<Array<f(X)>>\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "promises",
      "description": "array of promises"
    },
    "returns": "{Promise} promise for transformed values"
  },
  "Promise.race": {
    "type": "function",
    "name": "Promise.race",
    "params": [
      {
        "types": [
          {
            "type": "array"
          }
        ],
        "name": "promises",
        "description": "array of promises to race"
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 619,
      "codeLine": 633,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\nWARNING: The ES6 Promise spec requires that race()ing an empty array\nmust return a promise that is pending forever.  This implementation\nreturns a singleton forever-pending promise, the same singleton that is\nreturned by Promise.never(), thus can be checked with ===\n\nto the same outcome as the earliest input promise to settle. if empty\nis empty, returns a promise that will never settle.\n\t \n",
    "description": "Fulfill-reject competitive race. Return a promise that will settle\nto the same state as the earliest input promise to settle.\n",
    "_curParam": {
      "types": [
        {
          "type": "array"
        }
      ],
      "name": "promises",
      "description": "array of promises to race"
    },
    "returns": [
      "{Promise} if input is non-empty",
      "a promise that will settle"
    ]
  },
  "Promise.getHandler": {
    "type": "function",
    "name": "Promise.getHandler",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 669,
      "codeLine": 674,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Get an appropriate handler for x, without checking for cycles\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{object} handler"
  },
  "Promise.getHandlerMaybeThenable": {
    "type": "function",
    "name": "Promise.getHandlerMaybeThenable",
    "params": [
      {
        "types": [
          {
            "type": "object"
          },
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          },
          {
            "type": "Promise"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 681,
      "codeLine": 687,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Get a handler for thenable x.\nNOTE: You must only call this if maybeThenable(x) == true\n",
    "_curParam": {
      "types": [
        {
          "type": "object"
        },
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        },
        {
          "type": "Promise"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{object} handler"
  },
  "Promise.getHandlerUntrusted": {
    "type": "function",
    "name": "Promise.getHandlerUntrusted",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise",
    "src": {
      "line": 691,
      "codeLine": 696,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Get a handler for potentially untrusted thenable x\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{object} handler"
  },
  "Promise.Handler": {
    "type": "constructor",
    "name": "Promise.Handler",
    "params": [],
    "parent": "Promise",
    "src": {
      "line": 707,
      "codeLine": 711,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler for a promise that is pending forever\n"
  },
  "Promise.Handler.Handler.prototype.join": {
    "type": "function",
    "name": "Promise.Handler.Handler.prototype.join",
    "params": [],
    "parent": "Promise.Handler",
    "src": {
      "line": 727,
      "codeLine": 732,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Recursively collapse handler chain to find the handler\nnearest to the fully resolved value.\n",
    "returns": "{object} handler nearest the fully resolved value"
  },
  "Promise.Handler.FailIfRejected": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected",
    "params": [],
    "parent": "Promise.Handler",
    "src": {
      "line": 758,
      "codeLine": 762,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler that invokes fail() on any handler it becomes\n"
  },
  "Promise.Handler.FailIfRejected.Pending": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending",
    "params": [
      {
        "name": "receiver",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "inheritedContext",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected",
    "src": {
      "line": 772,
      "codeLine": 776,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler that manages a queue of consumers waiting on a pending promise\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Pending.prototype.notify": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Pending.prototype.notify",
    "params": [
      {
        "name": "x",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending",
    "src": {
      "line": 857,
      "codeLine": 860,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "\t \n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async",
    "params": [
      {
        "types": [
          {
            "type": "object"
          }
        ],
        "name": "handler",
        "description": ""
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending",
    "src": {
      "line": 879,
      "codeLine": 884,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Wrap another handler and force it into a future stack\n",
    "_curParam": {
      "types": [
        {
          "type": "object"
        }
      ],
      "name": "handler",
      "description": ""
    }
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "then",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Object",
            "options": [
              {
                "name": "then",
                "types": [
                  {
                    "type": "function",
                    "returns": {
                      "types": [
                        {
                          "type": "undefined"
                        }
                      ]
                    },
                    "params": []
                  }
                ]
              }
            ]
          }
        ],
        "name": "thenable",
        "description": ""
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async",
    "src": {
      "line": 902,
      "codeLine": 908,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler that wraps an untrusted thenable and assimilates it in a future stack\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": [
            {
              "name": "then",
              "types": [
                {
                  "type": "function",
                  "returns": {
                    "types": [
                      {
                        "type": "undefined"
                      }
                    ]
                  },
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "name": "thenable",
      "description": ""
    }
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": "fulfillment value"
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable",
    "src": {
      "line": 915,
      "codeLine": 920,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler for a fulfilled promise\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": "fulfillment value"
    }
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": "rejection reason"
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled",
    "src": {
      "line": 939,
      "codeLine": 944,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Handler for a rejected promise\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": "rejection reason"
    }
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask",
    "params": [
      {
        "name": "continuation",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "handler",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected",
    "src": {
      "line": 1034,
      "codeLine": 1038,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Run a single consumer\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask",
    "params": [
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "handler",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask",
    "src": {
      "line": 1047,
      "codeLine": 1051,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Run a queue of progress handlers\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "then",
        "description": ""
      },
      {
        "types": [
          {
            "type": "object"
          },
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "thenable",
        "description": ""
      },
      {
        "types": [
          {
            "type": "object"
          }
        ],
        "name": "resolver",
        "description": ""
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask",
    "src": {
      "line": 1068,
      "codeLine": 1075,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Assimilate a thenable, sending it's value to resolver\n",
    "_curParam": {
      "types": [
        {
          "type": "object"
        }
      ],
      "name": "resolver",
      "description": ""
    }
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold": {
    "type": "constructor",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "z",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "c",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "to",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask",
    "src": {
      "line": 1098,
      "codeLine": 1102,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Fold a handler value with z\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.isPromise": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.isPromise",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1122,
      "codeLine": 1126,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "\t \n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{boolean} true iff x is a trusted Promise"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.maybeThenable": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.maybeThenable",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "x",
        "description": ""
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1130,
      "codeLine": 1136,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Test just enough to rule out primitives, in order to take faster\npaths in some code\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "x",
      "description": ""
    },
    "returns": "{boolean} false iff x is guaranteed *not* to be a thenable"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.runNotify": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.runNotify",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "x",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "h",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "receiver",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "next",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1160,
      "codeLine": 1163,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "\t \n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReject": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReject",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "x",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "thisArg",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "next",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1181,
      "codeLine": 1185,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Return f.call(thisArg, x), or if it throws return a rejected promise for\nthe thrown exception\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReject3": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReject3",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "x",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "y",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "thisArg",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "next",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1193,
      "codeLine": 1196,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Same as above, but includes the extra argument parameter.\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReturn": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.tryCatchReturn",
    "params": [
      {
        "name": "f",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "x",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "thisArg",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "next",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1204,
      "codeLine": 1208,
      "path": "node_modules/steal/steal.js"
    },
    "body": "\t \n",
    "description": "Return f.call(thisArg, x), or if it throws, *return* the exception\n"
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.execute": {
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.execute",
    "type": "property",
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1805,
      "codeLine": 1806,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": ""
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.abrupt": {
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.abrupt",
    "type": "property",
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 1822,
      "codeLine": 1824,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": ""
  },
  "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.normalizeAndLocate": {
    "type": "function",
    "name": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold.normalizeAndLocate",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "moduleName",
        "description": "The module to run through normalize and locate."
      },
      {
        "name": "parentName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "Promise.Handler.FailIfRejected.Pending.Async.Thenable.Fulfilled.Rejected.ContinuationTask.ProgressTask.AssimilateTask.Fold",
    "src": {
      "line": 5240,
      "codeLine": 5247,
      "path": "node_modules/steal/steal.js"
    },
    "body": "",
    "description": "Run a module identifier through Normalize and Locate hooks. ",
    "hide": true,
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "moduleName",
      "description": "The module to run through normalize and locate."
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise to resolve when the address is found.\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise to resolve when the address is found.\n "
    }
  },
  "fetch": {
    "type": "function",
    "name": "fetch",
    "parent": "node_modules/steal/ext/bower.js",
    "src": {
      "line": 95,
      "codeLine": 102,
      "path": "node_modules/steal/ext/bower.js"
    },
    "body": "",
    "description": "Implement fetch so that we can warn the user in case of a 404. ",
    "title": "",
    "signatures": [
      {
        "code": "fetch(load)",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "name": "load",
            "description": "Load object"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "a promise to resolve with the load's source\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "load",
      "description": "Load object"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "a promise to resolve with the load's source\n"
    }
  },
  "translate": {
    "type": "function",
    "name": "translate",
    "parent": "node_modules/steal/ext/npm.js",
    "src": {
      "line": 12,
      "codeLine": 19,
      "path": "node_modules/steal/ext/npm.js"
    },
    "body": "",
    "description": "Convert the package.json file into a System.config call. ",
    "title": "",
    "signatures": [
      {
        "code": "translate(load)",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "name": "load",
            "description": "Load object"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "a promise to resolve with the load's new source.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "load",
      "description": "Load object"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "a promise to resolve with the load's new source.\n"
    }
  },
  "steal.dev": {
    "src": {
      "line": 2,
      "codeLine": 16,
      "path": "node_modules/steal/ext/dev.js"
    },
    "type": "property",
    "body": "\n## Examples\n\n    steal.dev.log(\"Something is happening\");\n    steal.dev.warn(\"Something bad is happening\");\n\n\n",
    "description": "\nProvides helper functions for development that get removed when put in production mode.\nThis means you can leave <code>steal.dev.log(\"hello world\")</code> in your code and it\nwill get removed in prodution.\n",
    "title": "",
    "name": "steal.dev",
    "parent": "stealjs"
  },
  "steal.dev.warn": {
    "type": "function",
    "name": "steal.dev.warn",
    "parent": "steal.dev",
    "src": {
      "line": 44,
      "codeLine": 57,
      "path": "node_modules/steal/ext/dev.js"
    },
    "body": "Adds a warning message to the console.\n\n    steal.dev.warn(\"something evil\");\n\n\t \n",
    "description": "\n",
    "title": "",
    "signatures": [
      {
        "code": "steal.dev.warn(out)",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "out",
            "description": "the message\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "out",
      "description": "the message\n"
    },
    "comment": " "
  },
  "steal.dev.log": {
    "type": "function",
    "name": "steal.dev.log",
    "parent": "steal.dev",
    "src": {
      "line": 71,
      "codeLine": 84,
      "path": "node_modules/steal/ext/dev.js"
    },
    "body": "Adds a message to the console.\n\n    steal.dev.log(\"hi\");\n\n\t \n",
    "description": "\n",
    "title": "",
    "signatures": [
      {
        "code": "steal.dev.log(out)",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "out",
            "description": "the message\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "out",
      "description": "the message\n"
    },
    "comment": " "
  },
  "steal.dev.assert": {
    "type": "function",
    "name": "steal.dev.assert",
    "parent": "steal.dev",
    "src": {
      "line": 97,
      "codeLine": 112,
      "path": "node_modules/steal/ext/dev.js"
    },
    "body": "Throws an error if the `expression` provided is falsy.\n\n    steal.dev.assert(\"\"); // throws!\n    steal.dev.assert(\"\", \"custom message\"); // throws!\n\n\t \n",
    "description": "\n",
    "title": "",
    "signatures": [
      {
        "code": "steal.dev.assert(expression, [message])",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "*"
              }
            ],
            "name": "expression",
            "description": "to be evaluated."
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "optional",
            "description": "message to display on error.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "optional",
      "description": "message to display on error.\n"
    },
    "comment": " "
  },
  "exports": {
    "type": "property",
    "name": "exports",
    "params": [
      {
        "name": "require",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "module",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "exports",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40604,
      "codeLine": 40610,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nExpose `debug()` as the module.\n\n",
    "description": "This is the Node.js implementation of `debug()`.\n"
  },
  "ImportManager.prototype.push": {
    "type": "function",
    "name": "ImportManager.prototype.push",
    "params": [
      {
        "name": "path",
        "description": "- the raw path"
      },
      {
        "name": "tryAppendLessExtension",
        "description": "- whether to try appending the less extension (if the path has no extension)"
      },
      {
        "name": "currentFileInfo",
        "description": "- the current file info (used for instance to work out relative paths)"
      },
      {
        "name": "importOptions",
        "description": "- import options"
      },
      {
        "name": "callback",
        "description": "- callback for when it is imported\n    "
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 2282,
      "codeLine": 2290,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "Add an import to be imported\n",
    "_curParam": {
      "name": "callback",
      "description": "- callback for when it is imported\n    "
    }
  },
  "PluginManager": {
    "type": "function",
    "name": "PluginManager",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12040,
      "codeLine": 12044,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "PluginManager.prototype.addPlugins": {
    "type": "function",
    "name": "PluginManager.prototype.addPlugins",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "plugins",
        "description": "\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4791,
      "codeLine": 4795,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "Adds all the plugins in the array\n",
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "plugins",
      "description": "\n"
    }
  },
  "PluginManager.prototype.addPlugin": {
    "type": "function",
    "name": "PluginManager.prototype.addPlugin",
    "params": [
      {
        "name": "plugin",
        "description": "\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4802,
      "codeLine": 4806,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "",
    "_curParam": {
      "name": "plugin",
      "description": "\n"
    }
  },
  "PluginManager.prototype.addVisitor": {
    "type": "function",
    "name": "PluginManager.prototype.addVisitor",
    "params": [
      {
        "name": "visitor",
        "description": "\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4810,
      "codeLine": 4815,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "Adds a visitor. The visitor object has options on itself to determine\nwhen it should run.\n",
    "_curParam": {
      "name": "visitor",
      "description": "\n"
    }
  },
  "PluginManager.prototype.addPreProcessor": {
    "type": "function",
    "name": "PluginManager.prototype.addPreProcessor",
    "params": [
      {
        "types": [
          {
            "type": "object"
          }
        ],
        "name": "preProcessor",
        "description": ""
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "name": "priority",
        "description": "- guidelines 1 = before import, 1000 = import, 2000 = after import\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4818,
      "codeLine": 4823,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "Adds a pre processor object\n",
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "name": "priority",
      "description": "- guidelines 1 = before import, 1000 = import, 2000 = after import\n"
    }
  },
  "PluginManager.prototype.addPostProcessor": {
    "type": "function",
    "name": "PluginManager.prototype.addPostProcessor",
    "params": [
      {
        "types": [
          {
            "type": "object"
          }
        ],
        "name": "postProcessor",
        "description": ""
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "name": "priority",
        "description": "- guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4832,
      "codeLine": 4837,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "Adds a post processor object\n",
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "name": "priority",
      "description": "- guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n"
    }
  },
  "PluginManager.prototype.addFileManager": {
    "type": "function",
    "name": "PluginManager.prototype.addFileManager",
    "params": [
      {
        "name": "manager",
        "description": "\n"
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4846,
      "codeLine": 4850,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "",
    "_curParam": {
      "name": "manager",
      "description": "\n"
    }
  },
  "PluginManager.prototype.getPreProcessors": {
    "type": "function",
    "name": "PluginManager.prototype.getPreProcessors",
    "params": [],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4853,
      "codeLine": 4858,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "\n",
    "returns": "{Array}",
    "private": true
  },
  "PluginManager.prototype.getPostProcessors": {
    "type": "function",
    "name": "PluginManager.prototype.getPostProcessors",
    "params": [],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4865,
      "codeLine": 4870,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "\n",
    "returns": "{Array}",
    "private": true
  },
  "PluginManager.prototype.getVisitors": {
    "type": "function",
    "name": "PluginManager.prototype.getVisitors",
    "params": [],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4877,
      "codeLine": 4882,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "\n",
    "returns": "{Array}",
    "private": true
  },
  "PluginManager.prototype.getFileManagers": {
    "type": "function",
    "name": "PluginManager.prototype.getFileManagers",
    "params": [],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 4885,
      "codeLine": 4890,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "",
    "description": "\n",
    "returns": "{Array}",
    "private": true
  },
  "doResolve": {
    "type": "function",
    "name": "doResolve",
    "params": [
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "onFulfilled",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "onRejected",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/less-engine.js",
    "src": {
      "line": 9976,
      "codeLine": 9982,
      "path": "node_modules/steal/ext/less-engine.js"
    },
    "body": "\nMakes no guarantees about asynchrony.\n\n",
    "description": "Take a potentially misbehaving resolver function and make sure\nonFulfilled and onRejected are only called once.\n"
  },
  "convertBrowser": {
    "type": "function",
    "name": "convertBrowser",
    "params": [
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "browser",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/npm-convert.js",
    "src": {
      "line": 208,
      "codeLine": 233,
      "path": "node_modules/steal/ext/npm-convert.js"
    },
    "body": "\nExample:\n\n```\n{\n\t \"foo\": \"browser-foo\"\n  \"traceur#src/node/traceur\": \"./browser/traceur\"\n  \"./foo\" : \"./foo-browser\"\n}\n```\n\nconverted to:\n\n```\n{\n\t // any foo ... regardless of where\n  \"foo\": \"browser-foo\"\n  // this module ... ideally minus version\n  \"traceur#src/node/traceur\": \"transpile#./browser/traceur\"\n  \"transpile#./foo\" : \"transpile#./foo-browser\"\n}\n```\n\n",
    "description": "Converts browser names into actual module names.\n"
  },
  "convertLater": {
    "type": "function",
    "name": "convertLater",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "waiting",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/npm-convert.js",
    "src": {
      "line": 307,
      "codeLine": 318,
      "path": "node_modules/steal/ext/npm-convert.js"
    },
    "body": "\n[\n  { packageName: 'can', requestedVersion: '^2.3.0' },\n  { packageName: 'lodash': 'requestedVersion': '~3.0.0' }\n]\n\nPushes these objects into a side table. Whenver a package.json is loaded\nit will convert and apply config.\n\n",
    "description": "waiting looks like:\n"
  },
  "convertForPackage": {
    "type": "function",
    "name": "convertForPackage",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/npm-convert.js",
    "src": {
      "line": 332,
      "codeLine": 338,
      "path": "node_modules/steal/ext/npm-convert.js"
    },
    "body": "\n",
    "description": "When progressively loading package.jsons we need to convert any config\nthat is waiting on a package.json to load. This function is called after\na package is loaded and will call all of the callbacks that cause the \nconfig to be applied.\n"
  },
  "system-npm/crawl": {
    "name": "system-npm/crawl",
    "type": "module",
    "parent": "node_modules/steal/ext/npm-crawl.js",
    "src": {
      "line": 4,
      "codeLine": 8,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "\n",
    "description": "Exports helpers used for crawling package.json\n",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": []
      }
    ]
  },
  "system-npm/crawl.processPkgSource": {
    "type": "function",
    "name": "system-npm/crawl.processPkgSource",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "pkg",
        "description": "- "
      },
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "source",
        "description": ""
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 9,
      "codeLine": 16,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "",
    "description": "Adds the properties read from a package's source to the `pkg` object.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "source",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "NpmPackage"
        }
      ],
      "description": "\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "NpmPackage"
        }
      ],
      "description": "\n "
    }
  },
  "system-npm/crawl.deps": {
    "type": "function",
    "name": "system-npm/crawl.deps",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "pkg",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Boolean"
          }
        ],
        "optional": true,
        "name": "isRoot",
        "description": "If the root module's dependencies shoudl be crawled."
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 22,
      "codeLine": 29,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "",
    "description": "Crawls the packages dependencies\n",
    "_curParam": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "optional": true,
      "name": "isRoot",
      "description": "If the root module's dependencies shoudl be crawled."
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise when all packages have been loaded\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise when all packages have been loaded\n "
    }
  },
  "system-npm/crawl.fetchDep": {
    "type": "function",
    "name": "system-npm/crawl.fetchDep",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "parentPkg",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "childPkg",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Boolean"
          }
        ],
        "optional": true,
        "name": "isRoot",
        "description": "If the root module's dependencies shoudl be crawled."
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 87,
      "codeLine": 95,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "",
    "description": "Fetch a particular package.json dependency\n",
    "_curParam": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "optional": true,
      "name": "isRoot",
      "description": "If the root module's dependencies shoudl be crawled."
    },
    "returns": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise when the package has loaded\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise when the package has loaded\n "
    }
  },
  "system-npm/crawl.getDependencies": {
    "type": "function",
    "name": "system-npm/crawl.getDependencies",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "loader",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "packageJSON",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Boolean"
          }
        ],
        "optional": true,
        "name": "isRoot",
        "description": ""
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 135,
      "codeLine": 142,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "",
    "description": "Returns an array of the dependency names that should be crawled.\n",
    "_curParam": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "optional": true,
      "name": "isRoot",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            }
          ]
        }
      ],
      "description": "\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            }
          ]
        }
      ],
      "description": "\n "
    }
  },
  "system-npm/crawl.getDependencyMap": {
    "type": "function",
    "name": "system-npm/crawl.getDependencyMap",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "loader",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "packageJSON",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Boolean"
          }
        ],
        "name": "isRoot",
        "description": ""
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 152,
      "codeLine": 159,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "",
    "description": "Returns a map of the dependencies and their ranges.\n",
    "_curParam": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "name": "isRoot",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Object",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            },
            {
              "types": [
                {
                  "type": "Range"
                }
              ]
            }
          ]
        }
      ],
      "description": "A map of dependency names and requested version ranges.\n "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Object",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            },
            {
              "types": [
                {
                  "type": "Range"
                }
              ]
            }
          ]
        }
      ],
      "description": "A map of dependency names and requested version ranges.\n "
    }
  },
  "system-npm/crawl.parentMostAddress": {
    "type": "function",
    "name": "system-npm/crawl.parentMostAddress",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "childPkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 249,
      "codeLine": 253,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Walk up the parent addresses until you run into the root or a conflicting\npackage and return that as the address.\n"
  },
  "system-npm/crawl.FetchTask": {
    "type": "function",
    "name": "system-npm/crawl.FetchTask",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 377,
      "codeLine": 386,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": "\n1) If npm3 we'll first try to crawl from the most nested position\n2) If not npm3 (or we've already done #1) we'll traverse up the\nnode_modules folder structure.\n\n",
    "description": "A FetchTask is an *attempt* to load a package.json. It might fail\nif there is a 404 or if the package we fetched is not the correct version.\nIn either of those cases we'll either:\n"
  },
  "system-npm/crawl.isCompatibleVersion": {
    "type": "function",
    "name": "system-npm/crawl.isCompatibleVersion",
    "params": [
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/crawl",
    "src": {
      "line": 439,
      "codeLine": 442,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Is the package fetched from this task a compatible version?\n"
  },
  "system-npm/crawl.getPackage": {
    "type": "function",
    "name": "system-npm/crawl.getPackage",
    "params": [],
    "parent": "system-npm/crawl",
    "src": {
      "line": 451,
      "codeLine": 454,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Get the package.json from this task.\n"
  },
  "system-npm/crawl.hadErrorLoading": {
    "type": "function",
    "name": "system-npm/crawl.hadErrorLoading",
    "params": [],
    "parent": "system-npm/crawl",
    "src": {
      "line": 464,
      "codeLine": 467,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "If this task had a loading error, like a 404\n"
  },
  "system-npm/crawl.handleCurrentlyLoading": {
    "type": "function",
    "name": "system-npm/crawl.handleCurrentlyLoading",
    "params": [],
    "parent": "system-npm/crawl",
    "src": {
      "line": 471,
      "codeLine": 474,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Handle the case where this fileUrl is already loading\n"
  },
  "system-npm/crawl.handleAlreadyLoaded": {
    "type": "function",
    "name": "system-npm/crawl.handleAlreadyLoaded",
    "params": [],
    "parent": "system-npm/crawl",
    "src": {
      "line": 494,
      "codeLine": 497,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Handle the case where this fileUrl has already loaded.\n"
  },
  "system-npm/crawl.next": {
    "type": "function",
    "name": "system-npm/crawl.next",
    "params": [],
    "parent": "system-npm/crawl",
    "src": {
      "line": 510,
      "codeLine": 514,
      "path": "node_modules/steal/ext/npm-crawl.js"
    },
    "body": " \n",
    "description": "Get the next package to look up by traversing up the node_modules.\nCreate a new pkg by extending the existing one\n"
  },
  "oldNormalize": {
    "name": "oldNormalize",
    "type": "property",
    "parent": "node_modules/steal/ext/npm-extension.js",
    "src": {
      "line": 14,
      "codeLine": 26,
      "path": "node_modules/steal/ext/npm-extension.js"
    },
    "body": "\nisRoot?\n  \"can-slider\" //-> \"path/to/main\"\n\nelse\n\n  \"can-slider\" //-> \"can-slider#path/to/main\"\n \n",
    "description": "Normalize has to deal with a \"tricky\" situation.  There are module names like\n\"css\" -> \"css\" normalize like normal\n\"./qunit\" //-> \"qunit\"  ... could go to steal-qunit#qunit, but then everything would?\n"
  },
  "saveLoad": {
    "type": "function",
    "name": "saveLoad",
    "params": [
      {
        "types": [
          {
            "type": "Context"
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Package"
          }
        ],
        "name": "pkg",
        "description": "The root package.json"
      }
    ],
    "parent": "node_modules/steal/ext/npm-load.js",
    "src": {
      "line": 54,
      "codeLine": 60,
      "path": "node_modules/steal/ext/npm-load.js"
    },
    "body": "",
    "description": "",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "Package"
        }
      ],
      "name": "pkg",
      "description": "The root package.json"
    },
    "returns": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            }
          ]
        }
      ],
      "description": "An array of configDependencies\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "String"
                }
              ]
            }
          ]
        }
      ],
      "description": "An array of configDependencies\n"
    }
  },
  "makeSource": {
    "type": "function",
    "name": "makeSource",
    "params": [
      {
        "types": [
          {
            "type": "Context"
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Package"
          }
        ],
        "name": "pkg",
        "description": "The root package.json"
      }
    ],
    "parent": "node_modules/steal/ext/npm-load.js",
    "src": {
      "line": 28,
      "codeLine": 34,
      "path": "node_modules/steal/ext/npm-load.js"
    },
    "body": "",
    "description": "",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "Package"
        }
      ],
      "name": "pkg",
      "description": "The root package.json"
    },
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "The source representation of the `package.json!npm` module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "The source representation of the `package.json!npm` module.\n"
    }
  },
  "pkgMain": {
    "type": "function",
    "name": "pkgMain",
    "params": [
      {
        "types": [
          {
            "type": "Context"
          }
        ],
        "name": "context",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Package"
          }
        ],
        "name": "pkg",
        "description": "The root package.json"
      }
    ],
    "parent": "node_modules/steal/ext/npm-load.js",
    "src": {
      "line": 71,
      "codeLine": 77,
      "path": "node_modules/steal/ext/npm-load.js"
    },
    "body": "",
    "description": "",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "Package"
        }
      ],
      "name": "pkg",
      "description": "The root package.json"
    },
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "The main module for the app\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "The main module for the app\n"
    }
  },
  "options": {
    "type": "property",
    "name": "options",
    "params": [
      {
        "types": [
          {
            "type": "Context"
          }
        ],
        "name": "context",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5562,
      "codeLine": 5566,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Add `options` and `version` to `babel` global.\n",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "Context"
        }
      ],
      "name": "context",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "description": "Options passed into the translated config.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "description": "Options passed into the translated config.\n"
    }
  },
  "addExistingPackages": {
    "type": "function",
    "name": "addExistingPackages",
    "params": [
      {
        "types": [
          {
            "type": "Context"
          }
        ],
        "name": "context",
        "description": "\n"
      },
      {
        "name": "existingPackages",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/npm-load.js",
    "src": {
      "line": 210,
      "codeLine": 214,
      "path": "node_modules/steal/ext/npm-load.js"
    },
    "body": "",
    "description": "",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "Context"
        }
      ],
      "name": "context",
      "description": "\n"
    }
  },
  "system-npm/utils": {
    "src": {
      "line": 0,
      "codeLine": 8,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "type": "module",
    "body": "\n",
    "description": "\nHelpers that are used by npm-extension and the npm plugin.\nThis should be kept small and not have helpers exclusive to npm.\nHowever, it can have all npm-extension helpers.\n",
    "title": "",
    "name": "system-npm/utils"
  },
  "moduleName.create": {
    "type": "function",
    "name": "moduleName.create",
    "params": [
      {
        "types": [
          {
            "type": "system-npm/parsed_npm"
          }
        ],
        "name": "descriptor",
        "description": "\n\t "
      },
      {
        "name": "standard",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 80,
      "codeLine": 86,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\n",
    "description": "Converts a parsed module name to a string\n",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "system-npm/parsed_npm"
        }
      ],
      "name": "descriptor",
      "description": "\n\t "
    }
  },
  "moduleName.isNpm": {
    "type": "function",
    "name": "moduleName.isNpm",
    "params": [
      {
        "name": "moduleName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 103,
      "codeLine": 108,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "",
    "description": "Determines whether a moduleName is npm-like.\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    }
  },
  "moduleName.isConditional": {
    "type": "function",
    "name": "moduleName.isConditional",
    "params": [
      {
        "name": "moduleName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 111,
      "codeLine": 116,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "",
    "description": "Determines whether a moduleName includes a condition.\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    }
  },
  "moduleName.isFullyConvertedModuleName": {
    "type": "function",
    "name": "moduleName.isFullyConvertedModuleName",
    "params": [
      {
        "name": "parsedModuleName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 119,
      "codeLine": 125,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\t \n",
    "description": "Determines whether a moduleName is a fully npm name, not npm-like\nWith a parsed module name we can make sure there is a package name,\npackage version, and module path.\n",
    "title": ""
  },
  "moduleName.isScoped": {
    "type": "function",
    "name": "moduleName.isScoped",
    "params": [
      {
        "name": "moduleName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 129,
      "codeLine": 134,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "",
    "description": "Determines whether a moduleName is from a scoped package.\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    }
  },
  "moduleName.parse": {
    "type": "function",
    "name": "moduleName.parse",
    "params": [
      {
        "name": "moduleName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "currentPackageName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "global",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 137,
      "codeLine": 145,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\n",
    "description": "Breaks a string moduleName into parts.\npackageName@version!plugin#modulePath\n\"./lib/bfs\"\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "system-npm/parsed_npm"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "system-npm/parsed_npm"
        }
      ],
      "description": "\n\t "
    }
  },
  "moduleName.parseFromPackage": {
    "type": "function",
    "name": "moduleName.parseFromPackage",
    "params": [
      {
        "types": [
          {
            "type": "Loader"
          }
        ],
        "name": "loader",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "refPkg",
        "description": "The package `name` is a dependency of."
      },
      {
        "types": [
          {
            "type": "moduleName"
          }
        ],
        "name": "name",
        "description": ""
      },
      {
        "types": [
          {
            "type": "moduleName"
          }
        ],
        "name": "parentName",
        "description": ""
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 193,
      "codeLine": 207,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\n",
    "description": "\nGiven the package that loads the dependency, the dependency name,\nand the moduleName of what loaded the package, return\na [system-npm/parsed_npm].\n",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "moduleName"
        }
      ],
      "name": "parentName",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "system-npm/parsed_npm"
        }
      ],
      "description": "\n\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "system-npm/parsed_npm"
        }
      ],
      "description": "\n\n\t "
    }
  },
  "system-npm/utils.name": {
    "type": "function",
    "name": "system-npm/utils.name",
    "params": [
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 278,
      "codeLine": 283,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "",
    "description": "Returns a package's name.  The system config allows one to set this to\nsomething else.\n",
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "\n\t "
    }
  },
  "pkg.isRoot": {
    "type": "function",
    "name": "pkg.isRoot",
    "params": [
      {
        "name": "loader",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "pkg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 319,
      "codeLine": 324,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "",
    "description": "Determines whether a module is the loader's root module.\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "\n\t "
    }
  },
  "system-npm/utils.findByModuleNameOrAddress": {
    "type": "function",
    "name": "system-npm/utils.findByModuleNameOrAddress",
    "params": [
      {
        "types": [
          {
            "type": "Loader"
          }
        ],
        "name": "loader",
        "description": ""
      },
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "optional": true,
        "name": "moduleName",
        "description": ""
      },
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "optional": true,
        "name": "moduleAddress",
        "description": ""
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 331,
      "codeLine": 342,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\nGiven a moduleName, it tries to return the package it belongs to.\nIf a moduleName isn't provided, but a moduleA\n\n",
    "description": "Returns packageData given a module's name or module's address.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "optional": true,
      "name": "moduleAddress",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "NpmPackage"
        },
        {
          "type": "undefined"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "NpmPackage"
        },
        {
          "type": "undefined"
        }
      ],
      "description": "\n\t "
    }
  },
  "system-npm/utils.findDep": {
    "type": "function",
    "name": "system-npm/utils.findDep",
    "params": [
      {
        "name": "loader",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "refPkg",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 375,
      "codeLine": 380,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\t \n",
    "description": "Finds a dependency by its saved resolutions. This will only be called\nafter we've first successful found a package the \"hard way\" by doing\nsemver matching.\n"
  },
  "system-npm/utils.findDepWalking": {
    "type": "function",
    "name": "system-npm/utils.findDepWalking",
    "params": [
      {
        "types": [
          {
            "type": "Loader"
          }
        ],
        "name": "loader",
        "description": ""
      },
      {
        "types": [
          {
            "type": "NpmPackage"
          }
        ],
        "name": "refPackage",
        "description": ""
      },
      {
        "types": [
          {
            "type": "packgeName"
          }
        ],
        "name": "name",
        "description": "the package name we are looking for.\n"
      }
    ],
    "parent": "system-npm/utils",
    "src": {
      "line": 387,
      "codeLine": 397,
      "path": "node_modules/steal/ext/npm-utils.js"
    },
    "body": "\n",
    "description": "Walks up npmPaths looking for a [name]/package.json.  Returns\nthe package data it finds.\n",
    "_curParam": {
      "types": [
        {
          "type": "packgeName"
        }
      ],
      "name": "name",
      "description": "the package name we are looking for.\n"
    },
    "returns": {
      "types": [
        {
          "type": "undefined"
        },
        {
          "type": "NpmPackage"
        }
      ],
      "description": "\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "undefined"
        },
        {
          "type": "NpmPackage"
        }
      ],
      "description": "\n\t "
    }
  },
  "Buffer.TYPED_ARRAY_SUPPORT": {
    "type": "function",
    "name": "Buffer.TYPED_ARRAY_SUPPORT",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 384,
      "codeLine": 406,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  === true    Use Uint8Array implementation (fastest)\n  === false   Use Object implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nNote:\n\n- Implementation must support adding new properties to `Uint8Array` instances.\n  Firefox 4-29 lacked support, fixed in Firefox 30+.\n  See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\n - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\n - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   incorrect length in some situations.\n\nWe detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\nget the Object implementation, which is slower but will work correctly.\n\n",
    "description": "If `Buffer.TYPED_ARRAY_SUPPORT`:\n"
  },
  "Buffer": {
    "type": "function",
    "name": "Buffer",
    "params": [
      {
        "name": "arg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 428,
      "codeLine": 440,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThe Buffer constructor returns instances of `Uint8Array` that are augmented\nwith function properties for all the node `Buffer` API functions. We use\n`Uint8Array` so that square bracket notation works as expected -- it returns\na single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array`\nprototype.\n\n",
    "description": "Class: Buffer\n=============\n"
  },
  "toArrayBuffer": {
    "type": "function",
    "name": "toArrayBuffer",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 1563,
      "codeLine": 1567,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\nAdded in Node 0.12. Only available in browsers that support ArrayBuffer.\n"
  },
  "_augment": {
    "type": "function",
    "name": "_augment",
    "params": [
      {
        "name": "arr",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 1588,
      "codeLine": 1591,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n"
  },
  "isArray": {
    "name": "isArray",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 2018,
      "codeLine": 2022,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "isArray\n"
  },
  "str": {
    "name": "str",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 2024,
      "codeLine": 2028,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "toString\n"
  },
  "module.exports": {
    "type": "function",
    "name": "module.exports",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/node/dependency_map.js",
    "src": {
      "line": 0,
      "codeLine": 7,
      "path": "node_modules/steal-tools/lib/node/dependency_map.js"
    },
    "body": "\n",
    "description": "\nCreating a mapping from pre-normalized dependency names to the normalized version.\nSave the mapping as `dependencyMap` on the node itself. Transpile will use this\ninformation.\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "graph",
      "description": "\n"
    },
    "returns": {
      "types": [
        {
          "type": "String"
        },
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        },
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "api": "public",
    "method": "stealTools.node.dependencyMap"
  },
  "inherits": {
    "name": "inherits",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30107,
      "codeLine": 30111,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if a filename ends with a compilable extension.\n",
    "params": [
      {
        "name": "child",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "superCtor",
      "description": "Constructor function to inherit prototype from.\n"
    }
  },
  "transform": {
    "name": "transform",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15914,
      "codeLine": 15918,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": []
  },
  "transform.run": {
    "type": "function",
    "name": "transform.run",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5575,
      "codeLine": 5579,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Tranform and execute script, adding in inline sourcemaps.\n"
  },
  "transform.load": {
    "type": "function",
    "name": "transform.load",
    "params": [
      {
        "name": "url",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "callback",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "hold",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5586,
      "codeLine": 5590,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Load scripts via xhr, and `transform` when complete (optional).\n"
  },
  "xhr.onreadystatechange": {
    "type": "function",
    "name": "xhr.onreadystatechange",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5599,
      "codeLine": 5603,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "When successfully loaded, transform (optional), and call `callback`.\n"
  },
  "runScripts": {
    "type": "function",
    "name": "runScripts",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5619,
      "codeLine": 5626,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n<script type=\"module\"></script>\n\n",
    "description": "Load and transform all scripts of `types`.\n",
    "example": true
  },
  "exec": {
    "type": "function",
    "name": "exec",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5631,
      "codeLine": 5635,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Transform and execute script. Ensures correct load order.\n"
  },
  "run": {
    "type": "function",
    "name": "run",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25523,
      "codeLine": 25527,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "returns": "{Array}"
  },
  "register": {
    "type": "function",
    "name": "register",
    "params": [
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5768,
      "codeLine": 5772,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Register Babel and polyfill globally.\n"
  },
  "polyfill": {
    "type": "function",
    "name": "polyfill",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5778,
      "codeLine": 5782,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Register polyfill globally.\n"
  },
  "transformFile": {
    "type": "function",
    "name": "transformFile",
    "params": [
      {
        "name": "filename",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "callback",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5786,
      "codeLine": 5790,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Asynchronously transform `filename` with optional `opts`, calls `callback` when complete.\n"
  },
  "transformFileSync": {
    "type": "function",
    "name": "transformFileSync",
    "params": [
      {
        "name": "filename",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5813,
      "codeLine": 5817,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Synchronous form of `transformFile`.\n"
  },
  "parse": {
    "type": "function",
    "name": "parse",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "str",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40839,
      "codeLine": 40847,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Parse the given `str` and return milliseconds.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "str",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "api": "private"
  },
  "_lodashLangIsNumber2": {
    "name": "_lodashLangIsNumber2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5920,
      "codeLine": 5924,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Buffer for collecting generated output.\n"
  },
  "get": {
    "type": "function",
    "name": "get",
    "params": [
      {
        "name": "_ref",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24207,
      "codeLine": 24211,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getIndent": {
    "type": "function",
    "name": "getIndent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5946,
      "codeLine": 5950,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Get the current indent.\n"
  },
  "indentSize": {
    "type": "function",
    "name": "indentSize",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5958,
      "codeLine": 5962,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Get the current indent size.\n"
  },
  "indent": {
    "type": "function",
    "name": "indent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5966,
      "codeLine": 5970,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Increment indent size.\n"
  },
  "dedent": {
    "type": "function",
    "name": "dedent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5974,
      "codeLine": 5978,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Decrement indent size.\n"
  },
  "semicolon": {
    "type": "function",
    "name": "semicolon",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5982,
      "codeLine": 5986,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Add a semicolon to the buffer.\n"
  },
  "ensureSemicolon": {
    "type": "function",
    "name": "ensureSemicolon",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5990,
      "codeLine": 5994,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Ensure last character is a semicolon.\n"
  },
  "rightBrace": {
    "type": "function",
    "name": "rightBrace",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 5998,
      "codeLine": 6002,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Add a right brace to the buffer.\n"
  },
  "keyword": {
    "type": "function",
    "name": "keyword",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6007,
      "codeLine": 6011,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Add a keyword to the buffer.\n"
  },
  "space": {
    "type": "function",
    "name": "space",
    "params": [
      {
        "name": "force",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6016,
      "codeLine": 6020,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Add a space to the buffer unless it is compact (override with force).\n"
  },
  "removeLast": {
    "type": "function",
    "name": "removeLast",
    "params": [
      {
        "name": "cha",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6028,
      "codeLine": 6032,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Remove the last character.\n"
  },
  "startTerminatorless": {
    "type": "function",
    "name": "startTerminatorless",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6040,
      "codeLine": 6056,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThis is to prevent breaking semantics for terminatorless separator nodes. eg:\n\n   return foo;\n\nreturns `foo`. But if we do:\n\n  return\n  foo;\n\n `undefined` will be returned and not `foo` due to the terminator.\n  \n",
    "description": "Set some state that will be modified if a newline has been inserted before any\nnon-space characters.\n"
  },
  "endTerminatorless": {
    "type": "function",
    "name": "endTerminatorless",
    "params": [
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6062,
      "codeLine": 6066,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print an ending parentheses if a starting one has been printed.\n"
  },
  "newline": {
    "type": "function",
    "name": "newline",
    "params": [
      {
        "name": "i",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "removeLast",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6074,
      "codeLine": 6079,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Add a newline (or many newlines), maintaining formatting.\nStrips multiple newlines if removeLast is true.\n"
  },
  "_newline": {
    "type": "function",
    "name": "_newline",
    "params": [
      {
        "name": "removeLast",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6109,
      "codeLine": 6113,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Adds a newline unless there is already two previous newlines.\n"
  },
  "_removeSpacesAfterLastNewline": {
    "type": "function",
    "name": "_removeSpacesAfterLastNewline",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6125,
      "codeLine": 6129,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "If buffer ends with a newline and some spaces after it, trim those spaces.\n"
  },
  "push": {
    "type": "function",
    "name": "push",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to cache.\n"
      }
    ],
    "parent": "static",
    "src": {
      "line": 44719,
      "codeLine": 44727,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Adds `value` to the cache.\n",
    "private": true,
    "memberof": "SetCache",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to cache.\n"
    }
  },
  "_push": {
    "type": "function",
    "name": "_push",
    "params": [
      {
        "name": "str",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6168,
      "codeLine": 6172,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Push a string to the buffer.\n"
  },
  "endsWith": {
    "type": "function",
    "name": "endsWith",
    "params": [
      {
        "name": "str",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6198,
      "codeLine": 6202,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if the buffer ends with a string.\n"
  },
  "isLast": {
    "type": "function",
    "name": "isLast",
    "params": [
      {
        "name": "cha",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6212,
      "codeLine": 6216,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if a character is last in the buffer.\n"
  },
  "Program": {
    "type": "property",
    "name": "Program",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22526,
      "codeLine": 22530,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "BlockStatement": {
    "type": "function",
    "name": "BlockStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22605,
      "codeLine": 22609,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Noop": {
    "type": "function",
    "name": "Noop",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6276,
      "codeLine": 6283,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "What is my purpose?\nWhy am I here?\nWhy are any of us here?\nDoes any of this really matter?\n"
  },
  "ClassExpression": {
    "name": "ClassExpression",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17177,
      "codeLine": 17181,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "ClassBody": {
    "type": "function",
    "name": "ClassBody",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6329,
      "codeLine": 6333,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Print ClassBody, collapses empty blocks, prints body.\n"
  },
  "ClassProperty": {
    "type": "function",
    "name": "ClassProperty",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22191,
      "codeLine": 22195,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "MethodDefinition": {
    "type": "function",
    "name": "MethodDefinition",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17334,
      "codeLine": 17338,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ComprehensionExpression": {
    "type": "function",
    "name": "ComprehensionExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20824,
      "codeLine": 20828,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "t": {
    "name": "t",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29792,
      "codeLine": 29796,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is a binding identifier.\n",
    "example": true
  },
  "UnaryExpression": {
    "type": "function",
    "name": "UnaryExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26802,
      "codeLine": 26806,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "DoExpression": {
    "type": "function",
    "name": "DoExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20980,
      "codeLine": 20984,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ParenthesizedExpression": {
    "type": "function",
    "name": "ParenthesizedExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6503,
      "codeLine": 6507,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ParenthesizedExpression, prints expression.\n"
  },
  "UpdateExpression": {
    "type": "function",
    "name": "UpdateExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26794,
      "codeLine": 26798,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ConditionalExpression": {
    "type": "function",
    "name": "ConditionalExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24859,
      "codeLine": 24863,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "NewExpression": {
    "type": "function",
    "name": "NewExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24786,
      "codeLine": 24790,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "SequenceExpression": {
    "type": "function",
    "name": "SequenceExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24867,
      "codeLine": 24871,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ThisExpression": {
    "type": "function",
    "name": "ThisExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22549,
      "codeLine": 22553,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Super": {
    "type": "function",
    "name": "Super",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17396,
      "codeLine": 17400,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Decorator": {
    "type": "function",
    "name": "Decorator",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6579,
      "codeLine": 6583,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints Decorator, prints expression.\n"
  },
  "CallExpression": {
    "type": "function",
    "name": "CallExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22711,
      "codeLine": 22715,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildYieldAwait": {
    "type": "function",
    "name": "buildYieldAwait",
    "params": [
      {
        "name": "keyword",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6617,
      "codeLine": 6622,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Builds yield or await expression printer.\nPrints delegate, all, and argument.\n"
  },
  "YieldExpression": {
    "name": "YieldExpression",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9126,
      "codeLine": 9130,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if YieldExpression needs parentheses.\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "AwaitExpression": {
    "name": "AwaitExpression",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13309,
      "codeLine": 13313,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "ExpressionStatement": {
    "type": "function",
    "name": "ExpressionStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12250,
      "codeLine": 12254,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "AssignmentPattern": {
    "type": "function",
    "name": "AssignmentPattern",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6666,
      "codeLine": 6670,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints AssignmentPattern, prints left and right.\n"
  },
  "AssignmentExpression": {
    "type": "function",
    "name": "AssignmentExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26775,
      "codeLine": 26779,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "BindExpression": {
    "type": "function",
    "name": "BindExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21182,
      "codeLine": 21186,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "BinaryExpression": {
    "name": "BinaryExpression",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24823,
      "codeLine": 24827,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "LogicalExpression": {
    "name": "LogicalExpression",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24851,
      "codeLine": 24855,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n",
    "params": []
  },
  "MetaProperty": {
    "type": "function",
    "name": "MetaProperty",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6754,
      "codeLine": 6758,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Print MetaProperty, prints meta and property.\n"
  },
  "ArrayTypeAnnotation": {
    "type": "function",
    "name": "ArrayTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6814,
      "codeLine": 6818,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ArrayTypeAnnotation, prints elementType.\n"
  },
  "BooleanTypeAnnotation": {
    "type": "function",
    "name": "BooleanTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6824,
      "codeLine": 6828,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints BooleanTypeAnnotation.\n"
  },
  "DeclareClass": {
    "type": "function",
    "name": "DeclareClass",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6832,
      "codeLine": 6836,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints DeclareClass, prints node.\n"
  },
  "DeclareFunction": {
    "type": "function",
    "name": "DeclareFunction",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6841,
      "codeLine": 6845,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints DeclareFunction, prints id and id.typeAnnotation.\n"
  },
  "DeclareModule": {
    "type": "function",
    "name": "DeclareModule",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6852,
      "codeLine": 6856,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints DeclareModule, prints id and body.\n"
  },
  "DeclareVariable": {
    "type": "function",
    "name": "DeclareVariable",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6863,
      "codeLine": 6867,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints DeclareVariable, prints id and id.typeAnnotation.\n"
  },
  "FunctionTypeAnnotation": {
    "type": "property",
    "name": "FunctionTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9017,
      "codeLine": 9021,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias NullableTypeAnnotation test as FunctionTypeAnnotation.\n"
  },
  "FunctionTypeParam": {
    "type": "function",
    "name": "FunctionTypeParam",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6906,
      "codeLine": 6910,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints FunctionTypeParam, prints name and typeAnnotation, handles optional.\n"
  },
  "InterfaceExtends": {
    "type": "function",
    "name": "InterfaceExtends",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6918,
      "codeLine": 6922,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints InterfaceExtends, prints id and typeParameters.\n"
  },
  "ClassImplements": {
    "name": "ClassImplements",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6927,
      "codeLine": 6932,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias InterfaceExtends printer as ClassImplements,\nand InterfaceExtends printer as GenericTypeAnnotation.\n"
  },
  "GenericTypeAnnotation": {
    "name": "GenericTypeAnnotation",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6934,
      "codeLine": 6938,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints interface-like node, prints id, typeParameters, extends, and body.\n"
  },
  "InterfaceDeclaration": {
    "type": "function",
    "name": "InterfaceDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6951,
      "codeLine": 6955,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints InterfaceDeclaration, prints node.\n"
  },
  "IntersectionTypeAnnotation": {
    "type": "function",
    "name": "IntersectionTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6960,
      "codeLine": 6964,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints IntersectionTypeAnnotation, prints types.\n"
  },
  "MixedTypeAnnotation": {
    "type": "function",
    "name": "MixedTypeAnnotation",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6968,
      "codeLine": 6972,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints MixedTypeAnnotation.\n"
  },
  "NullableTypeAnnotation": {
    "type": "function",
    "name": "NullableTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9009,
      "codeLine": 9013,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if NullableTypeAnnotation needs parentheses.\n"
  },
  "_types2": {
    "name": "_types2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6985,
      "codeLine": 6989,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints NumberLiteralTypeAnnotation, prints value.\n"
  },
  "NumberLiteralTypeAnnotation": {
    "name": "NumberLiteralTypeAnnotation",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 6991,
      "codeLine": 6995,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints NumberTypeAnnotation.\n"
  },
  "StringLiteralTypeAnnotation": {
    "type": "function",
    "name": "StringLiteralTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7001,
      "codeLine": 7005,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints StringLiteralTypeAnnotation, prints value.\n"
  },
  "StringTypeAnnotation": {
    "type": "function",
    "name": "StringTypeAnnotation",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7009,
      "codeLine": 7013,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints StringTypeAnnotation.\n"
  },
  "TupleTypeAnnotation": {
    "type": "function",
    "name": "TupleTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7017,
      "codeLine": 7021,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TupleTypeAnnotation, prints types.\n"
  },
  "TypeofTypeAnnotation": {
    "type": "function",
    "name": "TypeofTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7027,
      "codeLine": 7031,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TypeofTypeAnnotation, prints argument.\n"
  },
  "TypeAlias": {
    "type": "function",
    "name": "TypeAlias",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7036,
      "codeLine": 7040,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TypeAlias, prints id, typeParameters, and right.\n"
  },
  "TypeAnnotation": {
    "type": "function",
    "name": "TypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7051,
      "codeLine": 7055,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TypeAnnotation, prints typeAnnotation, handles optional.\n"
  },
  "TypeParameterInstantiation": {
    "type": "function",
    "name": "TypeParameterInstantiation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7062,
      "codeLine": 7066,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TypeParameterInstantiation, prints params.\n"
  },
  "TypeParameterDeclaration": {
    "name": "TypeParameterDeclaration",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7077,
      "codeLine": 7081,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias TypeParameterInstantiation printer as TypeParameterDeclaration\n"
  },
  "ObjectTypeAnnotation": {
    "type": "function",
    "name": "ObjectTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7083,
      "codeLine": 7087,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ObjectTypeAnnotation, prints properties, callProperties, and indexers.\n"
  },
  "ObjectTypeCallProperty": {
    "type": "function",
    "name": "ObjectTypeCallProperty",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7115,
      "codeLine": 7119,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ObjectTypeCallProperty, prints value, handles static.\n"
  },
  "ObjectTypeIndexer": {
    "type": "function",
    "name": "ObjectTypeIndexer",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7124,
      "codeLine": 7128,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ObjectTypeIndexer, prints id, key, and value, handles static.\n"
  },
  "ObjectTypeProperty": {
    "type": "function",
    "name": "ObjectTypeProperty",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7141,
      "codeLine": 7145,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ObjectTypeProperty, prints static, key, and value.\n"
  },
  "QualifiedTypeIdentifier": {
    "type": "function",
    "name": "QualifiedTypeIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7156,
      "codeLine": 7160,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints QualifiedTypeIdentifier, prints qualification and id.\n"
  },
  "UnionTypeAnnotation": {
    "type": "function",
    "name": "UnionTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7166,
      "codeLine": 7170,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints UnionTypeAnnotation, prints types.\n"
  },
  "TypeCastExpression": {
    "type": "function",
    "name": "TypeCastExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24776,
      "codeLine": 24780,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "VoidTypeAnnotation": {
    "type": "function",
    "name": "VoidTypeAnnotation",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7185,
      "codeLine": 7189,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints VoidTypeAnnotation.\n"
  },
  "JSXIdentifier": {
    "type": "function",
    "name": "JSXIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7226,
      "codeLine": 7230,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXIdentifier, prints name.\n"
  },
  "JSXNamespacedName": {
    "type": "function",
    "name": "JSXNamespacedName",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7234,
      "codeLine": 7238,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXNamespacedName, prints namespace and name.\n"
  },
  "JSXMemberExpression": {
    "type": "property",
    "name": "JSXMemberExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12397,
      "codeLine": 12401,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "JSXSpreadAttribute": {
    "type": "function",
    "name": "JSXSpreadAttribute",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7254,
      "codeLine": 7258,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXSpreadAttribute, prints argument.\n"
  },
  "JSXExpressionContainer": {
    "type": "function",
    "name": "JSXExpressionContainer",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7264,
      "codeLine": 7268,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXExpressionContainer, prints expression.\n"
  },
  "JSXElement": {
    "type": "function",
    "name": "JSXElement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21987,
      "codeLine": 21991,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "JSXOpeningElement": {
    "type": "property",
    "name": "JSXOpeningElement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12434,
      "codeLine": 12438,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "JSXClosingElement": {
    "type": "function",
    "name": "JSXClosingElement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7312,
      "codeLine": 7316,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXClosingElement, prints name.\n"
  },
  "JSXEmptyExpression": {
    "type": "function",
    "name": "JSXEmptyExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7322,
      "codeLine": 7326,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints JSXEmptyExpression.\n"
  },
  "_method": {
    "type": "function",
    "name": "_method",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7367,
      "codeLine": 7371,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints method-like nodes, prints key, value, and body, handles async, generator, computed, and get or set.\n"
  },
  "FunctionExpression": {
    "type": "property",
    "name": "FunctionExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22646,
      "codeLine": 22650,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "FunctionDeclaration": {
    "name": "FunctionDeclaration",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7422,
      "codeLine": 7426,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias FunctionExpression printer as FunctionDeclaration.\n"
  },
  "ArrowFunctionExpression": {
    "type": "function",
    "name": "ArrowFunctionExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16336,
      "codeLine": 16341,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Look for arrow functions and mark them as \"shadow functions\".\n",
    "see": "/transformation/transformers/internal/shadow-functions.js"
  },
  "ImportDefaultSpecifier": {
    "type": "function",
    "name": "ImportDefaultSpecifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7490,
      "codeLine": 7494,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ImportDefaultSpecifier, prints local.\n"
  },
  "ExportDefaultSpecifier": {
    "type": "function",
    "name": "ExportDefaultSpecifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7498,
      "codeLine": 7502,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ExportDefaultSpecifier, prints exported.\n"
  },
  "ExportSpecifier": {
    "type": "function",
    "name": "ExportSpecifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7506,
      "codeLine": 7510,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ExportSpecifier, prints local and exported.\n"
  },
  "ExportNamespaceSpecifier": {
    "type": "function",
    "name": "ExportNamespaceSpecifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7518,
      "codeLine": 7522,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ExportNamespaceSpecifier, prints exported.\n"
  },
  "ExportAllDeclaration": {
    "type": "function",
    "name": "ExportAllDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18927,
      "codeLine": 18931,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ExportNamedDeclaration": {
    "type": "function",
    "name": "ExportNamedDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21643,
      "codeLine": 21647,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ExportDefaultDeclaration": {
    "type": "function",
    "name": "ExportDefaultDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21613,
      "codeLine": 21617,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ExportDeclaration": {
    "type": "property",
    "name": "ExportDeclaration",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26743,
      "codeLine": 26747,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ImportDeclaration": {
    "type": "function",
    "name": "ImportDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22230,
      "codeLine": 22234,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ImportNamespaceSpecifier": {
    "type": "function",
    "name": "ImportNamespaceSpecifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7637,
      "codeLine": 7641,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ImportNamespaceSpecifier, prints local.\n"
  },
  "IfStatement": {
    "type": "function",
    "name": "IfStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9479,
      "codeLine": 9483,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if IfStatement needs whitespace.\n"
  },
  "ForStatement": {
    "type": "function",
    "name": "ForStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7710,
      "codeLine": 7714,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ForStatement, prints init, test, update, and body.\n"
  },
  "WhileStatement": {
    "type": "function",
    "name": "WhileStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7736,
      "codeLine": 7740,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints WhileStatement, prints test and body.\n"
  },
  "buildForXStatement": {
    "type": "function",
    "name": "buildForXStatement",
    "params": [
      {
        "name": "op",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7748,
      "codeLine": 7753,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Builds ForIn or ForOf statement printers.\nPrints left, right, and body.\n"
  },
  "ForInStatement": {
    "name": "ForInStatement",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7765,
      "codeLine": 7769,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create ForInStatement and ForOfStatement printers.\n"
  },
  "ForOfStatement": {
    "name": "ForOfStatement",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21870,
      "codeLine": 21874,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "buildLabelStatement": {
    "type": "function",
    "name": "buildLabelStatement",
    "params": [
      {
        "name": "prefix",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7789,
      "codeLine": 7794,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Builds continue, return, or break statement printers.\nPrints label (or key).\n"
  },
  "ContinueStatement": {
    "name": "ContinueStatement",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7812,
      "codeLine": 7816,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create ContinueStatement, ReturnStatement, and BreakStatement printers.\n"
  },
  "ThrowStatement": {
    "name": "ThrowStatement",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7824,
      "codeLine": 7828,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints LabeledStatement, prints label and body.\n"
  },
  "TryStatement": {
    "type": "function",
    "name": "TryStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7836,
      "codeLine": 7840,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TryStatement, prints block, handlers, and finalizer.\n"
  },
  "CatchClause": {
    "type": "function",
    "name": "CatchClause",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18136,
      "codeLine": 18140,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "SwitchStatement": {
    "type": "function",
    "name": "SwitchStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7873,
      "codeLine": 7877,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints SwitchStatement, prints discriminant and cases.\n"
  },
  "SwitchCase": {
    "type": "function",
    "name": "SwitchCase",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22617,
      "codeLine": 22621,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "DebuggerStatement": {
    "type": "function",
    "name": "DebuggerStatement",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7914,
      "codeLine": 7918,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints DebuggerStatement.\n"
  },
  "VariableDeclaration": {
    "type": "function",
    "name": "VariableDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26306,
      "codeLine": 26310,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "VariableDeclarator": {
    "type": "function",
    "name": "VariableDeclarator",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 7972,
      "codeLine": 7976,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints VariableDeclarator, handles id, id.typeAnnotation, and init.\n"
  },
  "TemplateElement": {
    "type": "function",
    "name": "TemplateElement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8003,
      "codeLine": 8007,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints TemplateElement, prints value.\n"
  },
  "TemplateLiteral": {
    "type": "function",
    "name": "TemplateLiteral",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24797,
      "codeLine": 24801,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "RestElement": {
    "type": "function",
    "name": "RestElement",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24923,
      "codeLine": 24927,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "SpreadElement": {
    "name": "SpreadElement",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8072,
      "codeLine": 8077,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias RestElement printer as SpreadElement,\nand RestElement printer as SpreadProperty.\n"
  },
  "SpreadProperty": {
    "name": "SpreadProperty",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8079,
      "codeLine": 8083,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints ObjectExpression, prints properties.\n"
  },
  "ObjectPattern": {
    "name": "ObjectPattern",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8100,
      "codeLine": 8104,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias ObjectExpression printer as ObjectPattern.\n"
  },
  "Property": {
    "type": "function",
    "name": "Property",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21838,
      "codeLine": 21842,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ArrayExpression": {
    "type": "function",
    "name": "ArrayExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24915,
      "codeLine": 24919,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ArrayPattern": {
    "name": "ArrayPattern",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8171,
      "codeLine": 8175,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Alias ArrayExpression printer as ArrayPattern.\n"
  },
  "Literal": {
    "type": "function",
    "name": "Literal",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24894,
      "codeLine": 24898,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_stringLiteral": {
    "type": "function",
    "name": "_stringLiteral",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8218,
      "codeLine": 8222,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prints string literals, handles format.\n"
  },
  "normalizeOptions": {
    "type": "function",
    "name": "normalizeOptions",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "tokens",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8340,
      "codeLine": 8347,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n- Detects code indentation.\n- If `opts.compact = \"auto\"` and the code is over 100KB, `compact` will be set to `true`.\n  \n",
    "description": "Normalize generator options, setting defaults.\n"
  },
  "findCommonStringDelimiter": {
    "type": "function",
    "name": "findCommonStringDelimiter",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "tokens",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8382,
      "codeLine": 8386,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Determine if input code uses more single or double quotes.\n"
  },
  "generate": {
    "type": "function",
    "name": "generate",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11147,
      "codeLine": 11151,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildPrint": {
    "type": "function",
    "name": "buildPrint",
    "params": [
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8446,
      "codeLine": 8450,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Build NodePrinter.\n"
  },
  "catchUp": {
    "type": "function",
    "name": "catchUp",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8454,
      "codeLine": 8458,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_printNewline": {
    "type": "function",
    "name": "_printNewline",
    "params": [
      {
        "name": "leading",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8467,
      "codeLine": 8471,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "print": {
    "type": "function",
    "name": "print",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8501,
      "codeLine": 8505,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "printJoin": {
    "type": "function",
    "name": "printJoin",
    "params": [
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8549,
      "codeLine": 8553,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "printAndIndentOnComments": {
    "type": "function",
    "name": "printAndIndentOnComments",
    "params": [
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8588,
      "codeLine": 8592,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "printBlock": {
    "type": "function",
    "name": "printBlock",
    "params": [
      {
        "name": "print",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8599,
      "codeLine": 8603,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "generateComment": {
    "type": "function",
    "name": "generateComment",
    "params": [
      {
        "name": "comment",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8612,
      "codeLine": 8616,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "printTrailingComments": {
    "type": "function",
    "name": "printTrailingComments",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8626,
      "codeLine": 8630,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "printLeadingComments": {
    "type": "function",
    "name": "printLeadingComments",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8634,
      "codeLine": 8638,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getComments": {
    "type": "function",
    "name": "getComments",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8642,
      "codeLine": 8646,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_getComments": {
    "type": "function",
    "name": "_getComments",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8667,
      "codeLine": 8671,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "shouldPrintComment": {
    "type": "function",
    "name": "shouldPrintComment",
    "params": [
      {
        "name": "comment",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8675,
      "codeLine": 8679,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_printComments": {
    "type": "function",
    "name": "_printComments",
    "params": [
      {
        "name": "comments",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8691,
      "codeLine": 8695,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Node": {
    "type": "function",
    "name": "Node",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8857,
      "codeLine": 8861,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Whitespace and Parenthesis related methods for nodes.\n"
  },
  "isUserWhitespacable": {
    "type": "function",
    "name": "isUserWhitespacable",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8873,
      "codeLine": 8877,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if `node` can have whitespace set by the user.\n"
  },
  "needsWhitespace": {
    "type": "function",
    "name": "needsWhitespace",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8881,
      "codeLine": 8885,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if a `node` requires whitespace.\n"
  },
  "needsWhitespaceBefore": {
    "type": "function",
    "name": "needsWhitespaceBefore",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8907,
      "codeLine": 8911,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if a `node` requires whitespace before it.\n"
  },
  "needsWhitespaceAfter": {
    "type": "function",
    "name": "needsWhitespaceAfter",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8915,
      "codeLine": 8919,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if a `note` requires whitespace after it.\n"
  },
  "needsParens": {
    "type": "function",
    "name": "needsParens",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 8923,
      "codeLine": 8927,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Test if a `node` needs parentheses around it.\n"
  },
  "ObjectExpression": {
    "type": "function",
    "name": "ObjectExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24907,
      "codeLine": 24911,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Binary": {
    "type": "function",
    "name": "Binary",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9052,
      "codeLine": 9056,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if Binary needs parentheses.\n"
  },
  "UnaryLike": {
    "type": "function",
    "name": "UnaryLike",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9142,
      "codeLine": 9146,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if UnaryLike needs parentheses.\n"
  },
  "printInnerComments": {
    "type": "function",
    "name": "printInnerComments",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9232,
      "codeLine": 9236,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Description\n"
  },
  "plain": {
    "type": "function",
    "name": "plain",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9244,
      "codeLine": 9248,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print a plain node.\n"
  },
  "sequence": {
    "type": "function",
    "name": "sequence",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9252,
      "codeLine": 9256,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print a sequence of nodes as statements.\n"
  },
  "join": {
    "type": "function",
    "name": "join",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9263,
      "codeLine": 9267,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print a sequence of nodes as expressions.\n"
  },
  "list": {
    "type": "function",
    "name": "list",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30126,
      "codeLine": 30130,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create an array from any value, splitting strings by \",\".\n"
  },
  "block": {
    "type": "function",
    "name": "block",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9286,
      "codeLine": 9290,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print a block-like node.\n"
  },
  "indentOnComments": {
    "type": "function",
    "name": "indentOnComments",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9294,
      "codeLine": 9298,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Print node and indent comments.\n"
  },
  "isHelper": {
    "type": "function",
    "name": "isHelper",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9363,
      "codeLine": 9367,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if a node is or has a helper.\n"
  },
  "isType": {
    "type": "function",
    "name": "isType",
    "params": [
      {
        "name": "nodeType",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "targetType",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29396,
      "codeLine": 29400,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n"
  },
  "nodes": {
    "name": "nodes",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9389,
      "codeLine": 9393,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Tests for node types that need whitespace.\n"
  },
  "nodes.Property": {
    "type": "function",
    "name": "nodes.Property",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9493,
      "codeLine": 9497,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if Property or SpreadProperty needs whitespace.\n"
  },
  "unshift": {
    "type": "function",
    "name": "unshift",
    "params": [
      {
        "name": "str",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9593,
      "codeLine": 9597,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Unshift a string from the current position, mantaining the current line and column.\n"
  },
  "mark": {
    "type": "function",
    "name": "mark",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9672,
      "codeLine": 9676,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Mark a node's generated position, and add it to the sourcemap.\n"
  },
  "Whitespace": {
    "type": "function",
    "name": "Whitespace",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9734,
      "codeLine": 9738,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Get whitespace around tokens.\n"
  },
  "getNewlinesBefore": {
    "type": "function",
    "name": "getNewlinesBefore",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9756,
      "codeLine": 9760,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Count all the newlines before a node.\n"
  },
  "getNewlinesAfter": {
    "type": "function",
    "name": "getNewlinesAfter",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9783,
      "codeLine": 9787,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Count all the newlines after a node.\n"
  },
  "getNewlinesBetween": {
    "type": "function",
    "name": "getNewlinesBetween",
    "params": [
      {
        "name": "startToken",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "endToken",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9821,
      "codeLine": 9825,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Count all the newlines between two tokens.\n"
  },
  "_chalk2": {
    "name": "_chalk2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9873,
      "codeLine": 9877,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Chalk styles for token types.\n"
  },
  "NEWLINE": {
    "name": "NEWLINE",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9892,
      "codeLine": 9896,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "RegExp to test for newlines in terminal.\n"
  },
  "getTokenType": {
    "type": "function",
    "name": "getTokenType",
    "params": [
      {
        "name": "match",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9898,
      "codeLine": 9902,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Get the type of token, specifying punctuator type.\n"
  },
  "highlight": {
    "type": "function",
    "name": "highlight",
    "params": [
      {
        "name": "text",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 9925,
      "codeLine": 9929,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Highlight `text`.\n"
  },
  "_lodashObjectMerge2": {
    "name": "_lodashObjectMerge2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10004,
      "codeLine": 10008,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Merge options.\n"
  },
  "babylon": {
    "name": "babylon",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10091,
      "codeLine": 10095,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Parse `code` with normalized options, collecting tokens and comments.\n"
  },
  "util": {
    "name": "util",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14381,
      "codeLine": 14385,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "MESSAGES": {
    "name": "MESSAGES",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10183,
      "codeLine": 10187,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Get a message with $0 placeholders replaced by arguments.\n"
  },
  "parseArgs": {
    "type": "function",
    "name": "parseArgs",
    "params": [
      {
        "name": "args",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10206,
      "codeLine": 10210,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Stingify arguments to be used inside messages.\n"
  },
  "buildUmd": {
    "type": "function",
    "name": "buildUmd",
    "params": [
      {
        "name": "namespace",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "builder",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10288,
      "codeLine": 10292,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "buildVar": {
    "type": "function",
    "name": "buildVar",
    "params": [
      {
        "name": "namespace",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "builder",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10309,
      "codeLine": 10313,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "buildHelpers": {
    "type": "function",
    "name": "buildHelpers",
    "params": [
      {
        "name": "body",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "namespace",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "whitelist",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10320,
      "codeLine": 10324,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "initOptions": {
    "type": "function",
    "name": "initOptions",
    "params": [
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10513,
      "codeLine": 10517,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "isLoose": {
    "type": "function",
    "name": "isLoose",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14257,
      "codeLine": 14261,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildTransformers": {
    "type": "function",
    "name": "buildTransformers",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10568,
      "codeLine": 10572,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "collapseStack": {
    "type": "function",
    "name": "collapseStack",
    "params": [
      {
        "name": "_stack",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10629,
      "codeLine": 10633,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "set": {
    "type": "function",
    "name": "set",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10675,
      "codeLine": 10679,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "setDynamic": {
    "type": "function",
    "name": "setDynamic",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10683,
      "codeLine": 10687,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "resolveModuleSource": {
    "type": "function",
    "name": "resolveModuleSource",
    "params": [
      {
        "name": "source",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10707,
      "codeLine": 10711,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addImport": {
    "type": "function",
    "name": "addImport",
    "params": [
      {
        "name": "source",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10717,
      "codeLine": 10721,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "attachAuxiliaryComment": {
    "type": "function",
    "name": "attachAuxiliaryComment",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10749,
      "codeLine": 10753,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addHelper": {
    "type": "function",
    "name": "addHelper",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10775,
      "codeLine": 10779,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "errorWithNode": {
    "type": "function",
    "name": "errorWithNode",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24278,
      "codeLine": 24282,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "mergeSourceMap": {
    "type": "function",
    "name": "mergeSourceMap",
    "params": [
      {
        "name": "map",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10868,
      "codeLine": 10872,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getModuleFormatter": {
    "type": "function",
    "name": "getModuleFormatter",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10894,
      "codeLine": 10898,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_addAst": {
    "type": "function",
    "name": "_addAst",
    "params": [
      {
        "name": "ast",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10949,
      "codeLine": 10953,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addAst": {
    "type": "function",
    "name": "addAst",
    "params": [
      {
        "name": "ast",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 10965,
      "codeLine": 10969,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "wrap": {
    "type": "function",
    "name": "wrap",
    "params": [
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "method",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12992,
      "codeLine": 12996,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "addCode": {
    "type": "function",
    "name": "addCode",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11039,
      "codeLine": 11043,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "parseCode": {
    "type": "function",
    "name": "parseCode",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11049,
      "codeLine": 11053,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "shouldIgnore": {
    "type": "function",
    "name": "shouldIgnore",
    "params": [
      {
        "name": "filename",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "ignore",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "only",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30195,
      "codeLine": 30199,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Tests if a filename should be ignored based on \"ignore\" and \"only\" options.\n"
  },
  "call": {
    "type": "function",
    "name": "call",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11068,
      "codeLine": 11072,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "parseInputSourceMap": {
    "type": "function",
    "name": "parseInputSourceMap",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11082,
      "codeLine": 11086,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "parseShebang": {
    "type": "function",
    "name": "parseShebang",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11100,
      "codeLine": 11104,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "makeResult": {
    "type": "function",
    "name": "makeResult",
    "params": [
      {
        "name": "_ref",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11112,
      "codeLine": 11116,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "enumerable": {
    "name": "enumerable",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27758,
      "codeLine": 27761,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Variables available in current context.\n"
  },
  "Logger": {
    "type": "function",
    "name": "Logger",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11230,
      "codeLine": 11234,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_buildMessage": {
    "type": "function",
    "name": "_buildMessage",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11242,
      "codeLine": 11246,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "warn": {
    "type": "function",
    "name": "warn",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11252,
      "codeLine": 11256,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "error": {
    "type": "function",
    "name": "error",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11260,
      "codeLine": 11264,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "deprecate": {
    "type": "function",
    "name": "deprecate",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11270,
      "codeLine": 11274,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "verbose": {
    "type": "function",
    "name": "verbose",
    "params": [
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11288,
      "codeLine": 11292,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "debug": {
    "type": "function",
    "name": "debug",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "namespace",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40449,
      "codeLine": 40457,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Create a debugger with the given `namespace`.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "namespace",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "description": ""
    },
    "api": "public"
  },
  "deopt": {
    "type": "function",
    "name": "deopt",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "msg",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11304,
      "codeLine": 11308,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "validateOption": {
    "type": "function",
    "name": "validateOption",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "pipeline",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11612,
      "codeLine": 11616,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Validate an option.\n"
  },
  "normaliseOptions": {
    "type": "function",
    "name": "normaliseOptions",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11825,
      "codeLine": 11829,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "createBareOptions": {
    "type": "function",
    "name": "createBareOptions",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11721,
      "codeLine": 11725,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addConfig": {
    "type": "function",
    "name": "addConfig",
    "params": [
      {
        "name": "loc",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11736,
      "codeLine": 11740,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "mergeOptions": {
    "type": "function",
    "name": "mergeOptions",
    "params": [
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11758,
      "codeLine": 11762,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addIgnoreConfig": {
    "type": "function",
    "name": "addIgnoreConfig",
    "params": [
      {
        "name": "loc",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11783,
      "codeLine": 11787,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "findConfigs": {
    "type": "function",
    "name": "findConfigs",
    "params": [
      {
        "name": "loc",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11800,
      "codeLine": 11804,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Description\n"
  },
  "init": {
    "type": "function",
    "name": "init",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27419,
      "codeLine": 27423,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "transformerList.validate": {
    "type": "function",
    "name": "transformerList.validate",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "pipeline",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11928,
      "codeLine": 11932,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Validate transformer list. Maps \"all\" to all transformer names.\n"
  },
  "number": {
    "type": "function",
    "name": "number",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11940,
      "codeLine": 11944,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Cast a value to a number.\n"
  },
  "filename": {
    "name": "filename",
    "type": "function",
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 52,
      "codeLine": 62,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "get the last part of a module path\nif a npm package is provided\ne.g.\nmain/bar/foo => foo\npackagename@1.0.0#foo/bar => bar\n",
    "params": [
      {
        "name": "uri",
        "description": ""
      }
    ],
    "_curParam": {
      "name": "uri",
      "description": ""
    },
    "returns": "{string}"
  },
  "booleanString": {
    "type": "function",
    "name": "booleanString",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 11964,
      "codeLine": 11968,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Cast a boolean-like string to a boolean.\n"
  },
  "_helpersParse2": {
    "name": "_helpersParse2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12025,
      "codeLine": 12029,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "memoisePluginContainer": {
    "type": "function",
    "name": "memoisePluginContainer",
    "params": [
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12046,
      "codeLine": 12050,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "value": {
    "name": "value",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12071,
      "codeLine": 12075,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "[Please add a description.]\n"
  },
  "subnormaliseString": {
    "type": "function",
    "name": "subnormaliseString",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "position",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12104,
      "codeLine": 12108,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "validate": {
    "type": "function",
    "name": "validate",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "plugin",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16014,
      "codeLine": 16018,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "add": {
    "type": "function",
    "name": "add",
    "params": [
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15085,
      "codeLine": 15089,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "isAssignment": {
    "type": "function",
    "name": "isAssignment",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12234,
      "codeLine": 12238,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildAssignment": {
    "type": "function",
    "name": "buildAssignment",
    "params": [
      {
        "name": "left",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "right",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12242,
      "codeLine": 12246,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "visitor.JSXIdentifier": {
    "type": "function",
    "name": "visitor.JSXIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12375,
      "codeLine": 12379,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "visitor.JSXNamespacedName": {
    "type": "function",
    "name": "visitor.JSXNamespacedName",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12389,
      "codeLine": 12393,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "visitor.JSXExpressionContainer": {
    "type": "function",
    "name": "visitor.JSXExpressionContainer",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12408,
      "codeLine": 12412,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "JSXAttribute": {
    "name": "JSXAttribute",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12416,
      "codeLine": 12420,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildJSXOpeningElementAttributes": {
    "type": "function",
    "name": "buildJSXOpeningElementAttributes",
    "params": [
      {
        "name": "attribs",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12479,
      "codeLine": 12486,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "The logic for this is quite terse. It's because we need to\nsupport spread elements. We loop over all attributes,\nbreaking on spreads, we then push a new object containg\nall prior attributes to an array for later processing.\n"
  },
  "enter": {
    "type": "function",
    "name": "enter",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20192,
      "codeLine": 20196,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Function": {
    "type": "function",
    "name": "Function",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26298,
      "codeLine": 26302,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasComputed": {
    "type": "function",
    "name": "hasComputed",
    "params": [
      {
        "name": "mutatorMap",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12685,
      "codeLine": 12689,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toComputedObjectFromClass": {
    "type": "function",
    "name": "toComputedObjectFromClass",
    "params": [
      {
        "name": "obj",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12698,
      "codeLine": 12702,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toClassObject": {
    "type": "function",
    "name": "toClassObject",
    "params": [
      {
        "name": "mutatorMap",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12715,
      "codeLine": 12719,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toDefineObject": {
    "type": "function",
    "name": "toDefineObject",
    "params": [
      {
        "name": "mutatorMap",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12746,
      "codeLine": 12750,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getPropRef": {
    "type": "function",
    "name": "getPropRef",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 12806,
      "codeLine": 12810,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "visitor": {
    "name": "visitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22705,
      "codeLine": 22709,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ReferencedIdentifier": {
    "type": "function",
    "name": "ReferencedIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26850,
      "codeLine": 26854,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "BindingIdentifier": {
    "type": "property",
    "name": "BindingIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25752,
      "codeLine": 25756,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "visit": {
    "type": "function",
    "name": "visit",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23432,
      "codeLine": 23436,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "custom": {
    "type": "function",
    "name": "custom",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13077,
      "codeLine": 13081,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "property": {
    "type": "function",
    "name": "property",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13086,
      "codeLine": 13090,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "bare": {
    "type": "function",
    "name": "bare",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13102,
      "codeLine": 13106,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isReactComponent": {
    "name": "isReactComponent",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13161,
      "codeLine": 13165,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "cleanJSXElementLiteralChild": {
    "type": "function",
    "name": "cleanJSXElementLiteralChild",
    "params": [
      {
        "name": "child",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "args",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13171,
      "codeLine": 13175,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "buildChildren": {
    "type": "function",
    "name": "buildChildren",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13220,
      "codeLine": 13224,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "pullFlag": {
    "type": "function",
    "name": "pullFlag",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "flag",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13273,
      "codeLine": 13277,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "referenceVisitor": {
    "name": "referenceVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13324,
      "codeLine": 13328,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isMemberExpressionSuper": {
    "type": "function",
    "name": "isMemberExpressionSuper",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13410,
      "codeLine": 13414,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ReplaceSupers": {
    "type": "function",
    "name": "ReplaceSupers",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13458,
      "codeLine": 13462,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getObjectRef": {
    "type": "function",
    "name": "getObjectRef",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13481,
      "codeLine": 13485,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "setSuperProperty": {
    "type": "function",
    "name": "setSuperProperty",
    "params": [
      {
        "name": "property",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "isComputed",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "thisExpression",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13489,
      "codeLine": 13498,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n  _set(Object.getPrototypeOf(CLASS.prototype), \"METHOD\", \"VALUE\", this)\n\n  \n",
    "description": "Sets a super class value of the named property.\n",
    "example": true
  },
  "getSuperProperty": {
    "type": "function",
    "name": "getSuperProperty",
    "params": [
      {
        "name": "property",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "isComputed",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "thisExpression",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13502,
      "codeLine": 13511,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n  _get(Object.getPrototypeOf(CLASS.prototype), \"METHOD\", this)\n\n  \n",
    "description": "Gets a node representing the super class value of the named property.\n",
    "example": true
  },
  "replace": {
    "type": "function",
    "name": "replace",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13515,
      "codeLine": 13519,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "traverseLevel": {
    "type": "function",
    "name": "traverseLevel",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "topLevel",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13523,
      "codeLine": 13527,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getThisReference": {
    "type": "function",
    "name": "getThisReference",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13532,
      "codeLine": 13536,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getLooseSuperProperty": {
    "type": "function",
    "name": "getLooseSuperProperty",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13546,
      "codeLine": 13550,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "looseHandle": {
    "type": "function",
    "name": "looseHandle",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "getThisReference",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13589,
      "codeLine": 13593,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "specHandleAssignmentExpression": {
    "type": "function",
    "name": "specHandleAssignmentExpression",
    "params": [
      {
        "name": "ref",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "getThisReference",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13609,
      "codeLine": 13613,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "specHandle": {
    "type": "function",
    "name": "specHandle",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "getThisReference",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13624,
      "codeLine": 13628,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_pipeline2": {
    "name": "_pipeline2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13716,
      "codeLine": 13720,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_transformers": {
    "name": "_transformers",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13722,
      "codeLine": 13726,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_transformersDeprecated": {
    "name": "_transformersDeprecated",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13730,
      "codeLine": 13734,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_transformersAliases": {
    "name": "_transformersAliases",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13738,
      "codeLine": 13742,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_transformersFilters": {
    "name": "_transformersFilters",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 13746,
      "codeLine": 13750,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ModuleDeclaration": {
    "name": "ModuleDeclaration",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22721,
      "codeLine": 22725,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "Scope": {
    "type": "function",
    "name": "Scope",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26889,
      "codeLine": 26894,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "This searches the current \"scope\" and collects all references/bindings\nwithin.\n"
  },
  "DefaultFormatter": {
    "type": "function",
    "name": "DefaultFormatter",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14008,
      "codeLine": 14012,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "addScope": {
    "type": "function",
    "name": "addScope",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14041,
      "codeLine": 14045,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "isModuleType": {
    "type": "function",
    "name": "isModuleType",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14057,
      "codeLine": 14061,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "doDefaultExportInterop": {
    "type": "function",
    "name": "doDefaultExportInterop",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14074,
      "codeLine": 14078,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getMetadata": {
    "type": "function",
    "name": "getMetadata",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14082,
      "codeLine": 14086,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "remapAssignments": {
    "type": "function",
    "name": "remapAssignments",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14101,
      "codeLine": 14105,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "remapExportAssignment": {
    "type": "function",
    "name": "remapExportAssignment",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "exported",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15353,
      "codeLine": 15357,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_addExport": {
    "type": "function",
    "name": "_addExport",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "exported",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14125,
      "codeLine": 14129,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getExport": {
    "type": "function",
    "name": "getExport",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14137,
      "codeLine": 14141,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getModuleName": {
    "type": "function",
    "name": "getModuleName",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14532,
      "codeLine": 14537,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Get the AMD module name that we'll prepend to the wrapper\nto define this module\n"
  },
  "_pushStatement": {
    "type": "function",
    "name": "_pushStatement",
    "params": [
      {
        "name": "ref",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14196,
      "codeLine": 14200,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_hoistExport": {
    "type": "function",
    "name": "_hoistExport",
    "params": [
      {
        "name": "declar",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "assign",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "priority",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14211,
      "codeLine": 14215,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getExternalReference": {
    "type": "function",
    "name": "getExternalReference",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14223,
      "codeLine": 14227,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "checkExportIdentifier": {
    "type": "function",
    "name": "checkExportIdentifier",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14238,
      "codeLine": 14242,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "exportAllDeclaration": {
    "type": "function",
    "name": "exportAllDeclaration",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14904,
      "codeLine": 14908,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "exportSpecifier": {
    "type": "function",
    "name": "exportSpecifier",
    "params": [
      {
        "name": "specifier",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14802,
      "codeLine": 14806,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildExportsWildcard": {
    "type": "function",
    "name": "buildExportsWildcard",
    "params": [
      {
        "name": "objectIdentifier",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15319,
      "codeLine": 15323,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildExportsFromAssignment": {
    "type": "function",
    "name": "buildExportsFromAssignment",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15345,
      "codeLine": 15349,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildExportsAssignment": {
    "type": "function",
    "name": "buildExportsAssignment",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "init",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15336,
      "codeLine": 15340,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "exportDeclaration": {
    "type": "function",
    "name": "exportDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14895,
      "codeLine": 14899,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_strict2": {
    "name": "_strict2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15498,
      "codeLine": 15502,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "setup": {
    "type": "function",
    "name": "setup",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "options",
        "description": "Logging options passed from the user."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "config",
        "description": "System configuration object.\n"
      }
    ],
    "parent": "node_modules/steal-tools/lib/logger.js",
    "src": {
      "line": 67,
      "codeLine": 71,
      "path": "node_modules/steal-tools/lib/logger.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "config",
      "description": "System configuration object.\n"
    }
  },
  "buildDependencyLiterals": {
    "type": "function",
    "name": "buildDependencyLiterals",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14487,
      "codeLine": 14491,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_getExternalReference": {
    "type": "function",
    "name": "_getExternalReference",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14826,
      "codeLine": 14830,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "importDeclaration": {
    "type": "function",
    "name": "importDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14791,
      "codeLine": 14795,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "importSpecifier": {
    "type": "function",
    "name": "importSpecifier",
    "params": [
      {
        "name": "specifier",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15380,
      "codeLine": 15384,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_setup": {
    "type": "function",
    "name": "_setup",
    "params": [
      {
        "name": "conditional",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 14720,
      "codeLine": 14724,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Remaps": {
    "type": "function",
    "name": "Remaps",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15049,
      "codeLine": 15053,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_getKey": {
    "type": "function",
    "name": "_getKey",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24068,
      "codeLine": 24072,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "remove": {
    "type": "function",
    "name": "remove",
    "params": [
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15101,
      "codeLine": 15105,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getAll": {
    "type": "function",
    "name": "getAll",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15109,
      "codeLine": 15115,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "These methods are used by the system module formatter who needs access to all the remaps\nso it can process them into it's specific setter method. We don't do this by default since\nno other module formatters need access to this.\n"
  },
  "clearAll": {
    "type": "function",
    "name": "clearAll",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15119,
      "codeLine": 15123,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hoistFunctionsVisitor": {
    "name": "hoistFunctionsVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15235,
      "codeLine": 15239,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "runnerSettersVisitor": {
    "name": "runnerSettersVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15261,
      "codeLine": 15265,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "SystemFormatter": {
    "type": "function",
    "name": "SystemFormatter",
    "params": [
      {
        "name": "_AMDFormatter",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15290,
      "codeLine": 15294,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_addImportSource": {
    "type": "function",
    "name": "_addImportSource",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "exportNode",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15310,
      "codeLine": 15314,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_buildExportCall": {
    "type": "function",
    "name": "_buildExportCall",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "init",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "isStatement",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15367,
      "codeLine": 15371,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_buildRunnerSetters": {
    "type": "function",
    "name": "_buildRunnerSetters",
    "params": [
      {
        "name": "block",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "hoistDeclarators",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15399,
      "codeLine": 15403,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_canHoist": {
    "type": "function",
    "name": "_canHoist",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15419,
      "codeLine": 15423,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_file2": {
    "name": "_file2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15679,
      "codeLine": 15683,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "addTransformers": {
    "type": "function",
    "name": "addTransformers",
    "params": [
      {
        "name": "transformers",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15696,
      "codeLine": 15700,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addTransformer": {
    "type": "function",
    "name": "addTransformer",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "plugin",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15707,
      "codeLine": 15711,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addAliases": {
    "type": "function",
    "name": "addAliases",
    "params": [
      {
        "name": "names",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15734,
      "codeLine": 15738,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addDeprecated": {
    "type": "function",
    "name": "addDeprecated",
    "params": [
      {
        "name": "names",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15743,
      "codeLine": 15747,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addFilter": {
    "type": "function",
    "name": "addFilter",
    "params": [
      {
        "name": "filter",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15752,
      "codeLine": 15756,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "canTransform": {
    "type": "function",
    "name": "canTransform",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15906,
      "codeLine": 15910,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": " \n",
    "description": "[Please add a description.]\n"
  },
  "analyze": {
    "type": "function",
    "name": "analyze",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15780,
      "codeLine": 15784,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pretransform": {
    "type": "function",
    "name": "pretransform",
    "params": [
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15791,
      "codeLine": 15795,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Build dependency graph by recursing `metadata.modules`. WIP.\n"
  },
  "transformFromAst": {
    "type": "function",
    "name": "transformFromAst",
    "params": [
      {
        "name": "ast",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15817,
      "codeLine": 15821,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_ensureTransformerNames": {
    "type": "function",
    "name": "_ensureTransformerNames",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "rawKeys",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15832,
      "codeLine": 15836,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Plugin": {
    "type": "function",
    "name": "Plugin",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 15978,
      "codeLine": 15982,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "normalize": {
    "type": "function",
    "name": "normalize",
    "params": [
      {
        "name": "visitor",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16035,
      "codeLine": 16039,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildPass": {
    "type": "function",
    "name": "buildPass",
    "params": [
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16044,
      "codeLine": 16048,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_plugin2": {
    "name": "_plugin2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16076,
      "codeLine": 16080,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "metadata": {
    "name": "metadata",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22639,
      "codeLine": 22643,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n",
    "example": true
  },
  "MemberExpression": {
    "name": "MemberExpression",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16159,
      "codeLine": 16164,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Look for non-computed properties with names that are not valid identifiers.\nTurn them into computed properties with literal names.\n"
  },
  "_lodashObjectExtend2": {
    "name": "_lodashObjectExtend2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16387,
      "codeLine": 16391,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isLetInitable": {
    "type": "function",
    "name": "isLetInitable",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16411,
      "codeLine": 16415,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isVar": {
    "type": "function",
    "name": "isVar",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29957,
      "codeLine": 29961,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is a variable declaration.\n"
  },
  "standardizeLets": {
    "type": "function",
    "name": "standardizeLets",
    "params": [
      {
        "name": "declars",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16427,
      "codeLine": 16431,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Loop": {
    "type": "function",
    "name": "Loop",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16673,
      "codeLine": 16677,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "BlockStatementProgram": {
    "type": "function",
    "name": "BlockStatementProgram",
    "params": [
      {
        "name": "block",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16492,
      "codeLine": 16496,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "replaceVisitor": {
    "name": "replaceVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16523,
      "codeLine": 16527,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "traverseReplace": {
    "type": "function",
    "name": "traverseReplace",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "remaps",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16542,
      "codeLine": 16546,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "letReferenceBlockVisitor": {
    "name": "letReferenceBlockVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16561,
      "codeLine": 16565,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "letReferenceFunctionVisitor": {
    "name": "letReferenceFunctionVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16577,
      "codeLine": 16581,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "hoistVarDeclarationsVisitor": {
    "name": "hoistVarDeclarationsVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16601,
      "codeLine": 16605,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "loopLabelVisitor": {
    "name": "loopLabelVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16629,
      "codeLine": 16633,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "continuationVisitor": {
    "name": "continuationVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16639,
      "codeLine": 16643,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "loopNodeTo": {
    "type": "function",
    "name": "loopNodeTo",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16655,
      "codeLine": 16659,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "loopVisitor": {
    "name": "loopVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16667,
      "codeLine": 16671,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "BlockScoping": {
    "type": "function",
    "name": "BlockScoping",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16751,
      "codeLine": 16755,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "remap": {
    "type": "function",
    "name": "remap",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16807,
      "codeLine": 16811,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "wrapClosure": {
    "type": "function",
    "name": "wrapClosure",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16854,
      "codeLine": 16858,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildClosure": {
    "type": "function",
    "name": "buildClosure",
    "params": [
      {
        "name": "ret",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "call",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16929,
      "codeLine": 16933,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Push the closure to the body.\n"
  },
  "addContinuations": {
    "type": "function",
    "name": "addContinuations",
    "params": [
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16942,
      "codeLine": 16950,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nReference: https://github.com/babel/babel/issues/1078\n  \n",
    "description": "If any of the outer let variables are reassigned then we need to rename them in\nthe closure so we can get direct access to the outer variable to continue the\niteration with bindings based on each iteration.\n"
  },
  "getLetReferences": {
    "type": "function",
    "name": "getLetReferences",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 16972,
      "codeLine": 16976,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "checkLoop": {
    "type": "function",
    "name": "checkLoop",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17023,
      "codeLine": 17032,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  \n",
    "description": "If we're inside of a loop then traverse it and check if it has one of\nthe following node types `ReturnStatement`, `BreakStatement`,\n`ContinueStatement` and replace it with a return value that we can track\nlater on.\n",
    "returns": "{Object}"
  },
  "hoistVarDeclarations": {
    "type": "function",
    "name": "hoistVarDeclarations",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17049,
      "codeLine": 17054,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Hoist all var declarations in this block to before it so they retain scope\nonce we wrap everything in a closure.\n"
  },
  "pushDeclar": {
    "type": "function",
    "name": "pushDeclar",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17058,
      "codeLine": 17063,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with\ntheir declarations hoisted to before the closure wrapper.\n"
  },
  "buildHas": {
    "type": "function",
    "name": "buildHas",
    "params": [
      {
        "name": "ret",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "call",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17085,
      "codeLine": 17089,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ClassDeclaration": {
    "type": "function",
    "name": "ClassDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26819,
      "codeLine": 26823,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_processMethod": {
    "type": "function",
    "name": "_processMethod",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17801,
      "codeLine": 17805,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "collectPropertyReferencesVisitor": {
    "name": "collectPropertyReferencesVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17305,
      "codeLine": 17309,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Identifier": {
    "name": "Identifier",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24760,
      "codeLine": 24764,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "verifyConstructorVisitor": {
    "name": "verifyConstructorVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17328,
      "codeLine": 17332,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "FunctionDeclarationFunctionExpression": {
    "type": "function",
    "name": "FunctionDeclarationFunctionExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17367,
      "codeLine": 17371,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ClassTransformer": {
    "type": "function",
    "name": "ClassTransformer",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17407,
      "codeLine": 17411,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "buildConstructor": {
    "type": "function",
    "name": "buildConstructor",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17512,
      "codeLine": 17516,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushToMap": {
    "type": "function",
    "name": "pushToMap",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "enumerable",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17522,
      "codeLine": 17526,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "constructorMeMaybe": {
    "type": "function",
    "name": "constructorMeMaybe",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17549,
      "codeLine": 17554,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\nhttps://www.youtube.com/watch?v=fWNaR-rxAic\n"
  },
  "buildBody": {
    "type": "function",
    "name": "buildBody",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17575,
      "codeLine": 17579,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushBody": {
    "type": "function",
    "name": "pushBody",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17594,
      "codeLine": 17598,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "clearDescriptors": {
    "type": "function",
    "name": "clearDescriptors",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17638,
      "codeLine": 17642,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushDescriptors": {
    "type": "function",
    "name": "pushDescriptors",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17650,
      "codeLine": 17654,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildObjectAssignment": {
    "type": "function",
    "name": "buildObjectAssignment",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17706,
      "codeLine": 17710,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "placePropertyInitializers": {
    "type": "function",
    "name": "placePropertyInitializers",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17714,
      "codeLine": 17718,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasPropertyCollision": {
    "type": "function",
    "name": "hasPropertyCollision",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17741,
      "codeLine": 17745,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "verifyConstructor": {
    "type": "function",
    "name": "verifyConstructor",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17757,
      "codeLine": 17761,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushMethod": {
    "type": "function",
    "name": "pushMethod",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "allowedIllegal",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17784,
      "codeLine": 17788,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Push a method to its respective mutatorMap.\n"
  },
  "pushProperty": {
    "type": "function",
    "name": "pushProperty",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17809,
      "codeLine": 17813,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushConstructor": {
    "type": "function",
    "name": "pushConstructor",
    "params": [
      {
        "name": "method",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17856,
      "codeLine": 17860,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Replace the constructor body of our class.\n"
  },
  "_pushConstructor": {
    "type": "function",
    "name": "_pushConstructor",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17885,
      "codeLine": 17889,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushInherits": {
    "type": "function",
    "name": "pushInherits",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17903,
      "codeLine": 17907,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Push inherits helper to body.\n"
  },
  "pushDecorators": {
    "type": "function",
    "name": "pushDecorators",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17916,
      "codeLine": 17920,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Push decorators to body.\n"
  },
  "messages": {
    "name": "messages",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 17956,
      "codeLine": 17975,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n**In**\n\n```javascript\nconst MULTIPLIER = 5;\n```\n\n**Out**\n\n```javascript\nvar MULTIPLIER = 5;\n```\n\n",
    "description": "Turn constants into variables.\nEnsure there are no constant violations in any scope.\n",
    "example": true
  },
  "ForXStatement": {
    "type": "function",
    "name": "ForXStatement",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26732,
      "codeLine": 26736,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasRest": {
    "type": "function",
    "name": "hasRest",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19373,
      "codeLine": 19377,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "arrayUnpackVisitor": {
    "name": "arrayUnpackVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18284,
      "codeLine": 18288,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "DestructuringTransformer": {
    "type": "function",
    "name": "DestructuringTransformer",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18302,
      "codeLine": 18306,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "buildVariableAssignment": {
    "type": "function",
    "name": "buildVariableAssignment",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "init",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18319,
      "codeLine": 18323,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildVariableDeclaration": {
    "type": "function",
    "name": "buildVariableDeclaration",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "init",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18340,
      "codeLine": 18344,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "toArray": {
    "type": "function",
    "name": "toArray",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "i",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27170,
      "codeLine": 27174,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushAssignmentPattern": {
    "type": "function",
    "name": "pushAssignmentPattern",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "valueRef",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18378,
      "codeLine": 18382,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushObjectSpread": {
    "type": "function",
    "name": "pushObjectSpread",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "objRef",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "spreadProp",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "spreadPropIndex",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18408,
      "codeLine": 18412,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushObjectProperty": {
    "type": "function",
    "name": "pushObjectProperty",
    "params": [
      {
        "name": "prop",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "propRef",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18440,
      "codeLine": 18444,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushObjectPattern": {
    "type": "function",
    "name": "pushObjectPattern",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "objRef",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18457,
      "codeLine": 18461,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "canUnpackArrayPattern": {
    "type": "function",
    "name": "canUnpackArrayPattern",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "arr",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18490,
      "codeLine": 18494,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushUnpackedArrayPattern": {
    "type": "function",
    "name": "pushUnpackedArrayPattern",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "arr",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18526,
      "codeLine": 18530,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "pushArrayPattern": {
    "type": "function",
    "name": "pushArrayPattern",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "arrayRef",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18541,
      "codeLine": 18545,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "loose": {
    "type": "function",
    "name": "loose",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 18746,
      "codeLine": 18750,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "spec": {
    "type": "function",
    "name": "spec",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "body",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "objId",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "initProps",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19540,
      "codeLine": 19544,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "iifeVisitor": {
    "name": "iifeVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19087,
      "codeLine": 19091,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Flow": {
    "type": "function",
    "name": "Flow",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22183,
      "codeLine": 22187,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "optimiseMemberExpression": {
    "type": "function",
    "name": "optimiseMemberExpression",
    "params": [
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "offset",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19353,
      "codeLine": 19357,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "regex": {
    "name": "regex",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19722,
      "codeLine": 19726,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "references": {
    "type": "function",
    "name": "references",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19761,
      "codeLine": 19765,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "refVisitor": {
    "name": "refVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19773,
      "codeLine": 19777,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "VariableDeclarationFunctionDeclaration": {
    "type": "function",
    "name": "VariableDeclarationFunctionDeclaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19910,
      "codeLine": 19914,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasSpread": {
    "type": "function",
    "name": "hasSpread",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 19980,
      "codeLine": 19984,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "build": {
    "type": "function",
    "name": "build",
    "params": [
      {
        "name": "left",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "right",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21030,
      "codeLine": 21034,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "ReturnStatement": {
    "type": "function",
    "name": "ReturnStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20206,
      "codeLine": 20210,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "TailCallTransformer": {
    "type": "function",
    "name": "TailCallTransformer",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20253,
      "codeLine": 20257,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getArgumentsId": {
    "type": "function",
    "name": "getArgumentsId",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20280,
      "codeLine": 20284,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getThisId": {
    "type": "function",
    "name": "getThisId",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20288,
      "codeLine": 20292,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getLeftId": {
    "type": "function",
    "name": "getLeftId",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20296,
      "codeLine": 20300,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getFunctionId": {
    "type": "function",
    "name": "getFunctionId",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20304,
      "codeLine": 20308,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getAgainId": {
    "type": "function",
    "name": "getAgainId",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20312,
      "codeLine": 20316,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getParams": {
    "type": "function",
    "name": "getParams",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20320,
      "codeLine": 20324,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasDeopt": {
    "type": "function",
    "name": "hasDeopt",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20342,
      "codeLine": 20346,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "subTransform": {
    "type": "function",
    "name": "subTransform",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20457,
      "codeLine": 20461,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "subTransformConditionalExpression": {
    "type": "function",
    "name": "subTransformConditionalExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20468,
      "codeLine": 20472,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "subTransformLogicalExpression": {
    "type": "function",
    "name": "subTransformLogicalExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20492,
      "codeLine": 20496,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "subTransformSequenceExpression": {
    "type": "function",
    "name": "subTransformSequenceExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20512,
      "codeLine": 20516,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "subTransformCallExpression": {
    "type": "function",
    "name": "subTransformCallExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20534,
      "codeLine": 20538,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "buildBinaryExpression": {
    "type": "function",
    "name": "buildBinaryExpression",
    "params": [
      {
        "name": "left",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "right",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20664,
      "codeLine": 20668,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "crawl": {
    "type": "function",
    "name": "crawl",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27427,
      "codeLine": 27431,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "TaggedTemplateExpression": {
    "type": "function",
    "name": "TaggedTemplateExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24953,
      "codeLine": 24957,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "array": {
    "type": "function",
    "name": "array",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 20852,
      "codeLine": 20856,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getStaticContext": {
    "type": "function",
    "name": "getStaticContext",
    "params": [
      {
        "name": "bind",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21137,
      "codeLine": 21141,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "inferBindContext": {
    "type": "function",
    "name": "inferBindContext",
    "params": [
      {
        "name": "bind",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21146,
      "codeLine": 21150,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_lodashCollectionIncludes2": {
    "name": "_lodashCollectionIncludes2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21284,
      "codeLine": 21288,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "blacklist": {
    "type": "function",
    "name": "blacklist",
    "params": [
      {
        "name": "transformer",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21294,
      "codeLine": 21298,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "whitelist": {
    "type": "function",
    "name": "whitelist",
    "params": [
      {
        "name": "transformer",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21303,
      "codeLine": 21307,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "stage": {
    "type": "function",
    "name": "stage",
    "params": [
      {
        "name": "transformer",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21312,
      "codeLine": 21316,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "optional": {
    "type": "function",
    "name": "optional",
    "params": [
      {
        "name": "transformer",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21321,
      "codeLine": 21325,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Block": {
    "name": "Block",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26828,
      "codeLine": 26832,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "buildExportSpecifier": {
    "type": "function",
    "name": "buildExportSpecifier",
    "params": [
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21594,
      "codeLine": 21598,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isJSXAttributeOfName": {
    "type": "function",
    "name": "isJSXAttributeOfName",
    "params": [
      {
        "name": "attr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 21974,
      "codeLine": 21978,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Class": {
    "type": "property",
    "name": "Class",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24943,
      "codeLine": 24947,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "pre": {
    "type": "property",
    "name": "pre",
    "params": [
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25618,
      "codeLine": 25622,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Post hooks should be used for cleaning up parents\n"
  },
  "post": {
    "type": "function",
    "name": "post",
    "params": [
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "file",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22350,
      "codeLine": 22354,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "shouldVisit": {
    "type": "function",
    "name": "shouldVisit",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22769,
      "codeLine": 22773,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "create": {
    "type": "function",
    "name": "create",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "obj",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "listKey",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22791,
      "codeLine": 22795,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "visitMultiple": {
    "type": "function",
    "name": "visitMultiple",
    "params": [
      {
        "name": "container",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "listKey",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22807,
      "codeLine": 22811,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "visitSingle": {
    "type": "function",
    "name": "visitSingle",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22854,
      "codeLine": 22858,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "traverse.node": {
    "type": "function",
    "name": "traverse.node",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parentPath",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "skipKeys",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22969,
      "codeLine": 22973,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "CLEAR_KEYS": {
    "name": "CLEAR_KEYS",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22986,
      "codeLine": 22990,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "traverse.clearNode": {
    "type": "function",
    "name": "traverse.clearNode",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 22992,
      "codeLine": 22996,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "clearVisitor": {
    "name": "clearVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23003,
      "codeLine": 23007,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "traverse.removeProperties": {
    "type": "function",
    "name": "traverse.removeProperties",
    "params": [
      {
        "name": "tree",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23012,
      "codeLine": 23016,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "hasBlacklistedType": {
    "type": "function",
    "name": "hasBlacklistedType",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23023,
      "codeLine": 23027,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "traverse.hasType": {
    "type": "function",
    "name": "traverse.hasType",
    "params": [
      {
        "name": "tree",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "blacklistTypes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23034,
      "codeLine": 23038,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_index2": {
    "name": "_index2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23379,
      "codeLine": 23383,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getFunctionParent": {
    "type": "function",
    "name": "getFunctionParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27567,
      "codeLine": 27572,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Walk up the scope tree until we hit either a Function or reach the\nvery top and hit Program.\n"
  },
  "getStatementParent": {
    "type": "function",
    "name": "getStatementParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23109,
      "codeLine": 23113,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Walk up the tree until we hit a parent node path in a list.\n"
  },
  "getEarliestCommonAncestorFrom": {
    "type": "function",
    "name": "getEarliestCommonAncestorFrom",
    "params": [
      {
        "name": "paths",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23122,
      "codeLine": 23130,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nEarliest is defined as being \"before\" all the other nodes in terms of list container\nposition and visiting key.\n\n",
    "description": "Get the deepest common ancestor and then from it, get the earliest relationship path\nto that ancestor.\n"
  },
  "getDeepestCommonAncestorFrom": {
    "type": "function",
    "name": "getDeepestCommonAncestorFrom",
    "params": [
      {
        "name": "paths",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "filter",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23168,
      "codeLine": 23174,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nTODO: Possible optimisation target.\n\n",
    "description": "Get the earliest path in the tree where the provided `paths` intersect.\n"
  },
  "getAncestry": {
    "type": "function",
    "name": "getAncestry",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23240,
      "codeLine": 23246,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nNOTE: The current node path is included in this.\n\n",
    "description": "Build an array of node paths containing the entire ancestry of the current node path.\n"
  },
  "inType": {
    "type": "function",
    "name": "inType",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23255,
      "codeLine": 23259,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "inShadow": {
    "type": "function",
    "name": "inShadow",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23274,
      "codeLine": 23278,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if we're inside a shadowed function.\n"
  },
  "addComment": {
    "type": "function",
    "name": "addComment",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "content",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "line",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23322,
      "codeLine": 23326,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "addComments": {
    "type": "function",
    "name": "addComments",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "comments",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23333,
      "codeLine": 23337,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Give node `comments` of the specified `type`.\n"
  },
  "isBlacklisted": {
    "type": "function",
    "name": "isBlacklisted",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23423,
      "codeLine": 23427,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "skip": {
    "type": "function",
    "name": "skip",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23465,
      "codeLine": 23469,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "skipKey": {
    "type": "function",
    "name": "skipKey",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23473,
      "codeLine": 23477,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "stop": {
    "type": "function",
    "name": "stop",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23481,
      "codeLine": 23485,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "setScope": {
    "type": "function",
    "name": "setScope",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23490,
      "codeLine": 23494,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "setContext": {
    "type": "function",
    "name": "setContext",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23502,
      "codeLine": 23506,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "resync": {
    "type": "function",
    "name": "resync",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23523,
      "codeLine": 23529,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Here we resync the node paths `key` and `container`. If they've changed according\nto what we have stored internally then we attempt to resync by crawling and looking\nfor the new values.\n"
  },
  "_resyncParent": {
    "type": "function",
    "name": "_resyncParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23538,
      "codeLine": 23542,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_resyncKey": {
    "type": "function",
    "name": "_resyncKey",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23548,
      "codeLine": 23552,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_resyncList": {
    "type": "function",
    "name": "_resyncList",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23577,
      "codeLine": 23581,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_resyncRemoved": {
    "type": "function",
    "name": "_resyncRemoved",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23598,
      "codeLine": 23602,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "shiftContext": {
    "type": "function",
    "name": "shiftContext",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23608,
      "codeLine": 23612,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "unshiftContext": {
    "type": "function",
    "name": "unshiftContext",
    "params": [
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23617,
      "codeLine": 23621,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "setKey": {
    "type": "function",
    "name": "setKey",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23640,
      "codeLine": 23644,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "queueNode": {
    "type": "function",
    "name": "queueNode",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23650,
      "codeLine": 23654,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ensureBlock": {
    "type": "function",
    "name": "ensureBlock",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29494,
      "codeLine": 29499,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Ensure the `key` (defaults to \"body\") of a `node` is a block.\nCasting it to a block if it is not.\n"
  },
  "evaluateTruthy": {
    "type": "function",
    "name": "evaluateTruthy",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23719,
      "codeLine": 23737,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nReturning `true` when we're sure that the expression will evaluate to a\ntruthy value, `false` if we're sure that it will evaluate to a falsy\nvalue and `undefined` if we aren't sure. Because of this please do not\nrely on coercion when using this method and check with === if it's false.\n\nFor example do:\n\n  if (t.evaluateTruthy(node) === false) falsyLogic();\n\n**AND NOT**\n\n  if (!t.evaluateTruthy(node)) falsyLogic();\n\n\n",
    "description": "Walk the input `node` and statically evaluate if it's truthy.\n"
  },
  "evaluate": {
    "type": "function",
    "name": "evaluate",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23742,
      "codeLine": 23757,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nReturns an object in the form `{ confident, value }`. `confident` indicates\nwhether or not we had to drop out of evaluating the expression because of\nhitting an unknown node that we couldn't confidently find the value of.\n\nExample:\n\n  t.evaluate(parse(\"5 + 5\")) // { confident: true, value: 10 }\n  t.evaluate(parse(\"!true\")) // { confident: true, value: false }\n  t.evaluate(parse(\"foo + foo\")) // { confident: false, value: undefined }\n\n\n",
    "description": "Walk the input `node` and statically evaluate it.\n"
  },
  "getOpposite": {
    "type": "function",
    "name": "getOpposite",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 23995,
      "codeLine": 23999,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getCompletionRecords": {
    "type": "function",
    "name": "getCompletionRecords",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24007,
      "codeLine": 24011,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getSibling": {
    "type": "function",
    "name": "getSibling",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24038,
      "codeLine": 24042,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_getPattern": {
    "type": "function",
    "name": "_getPattern",
    "params": [
      {
        "name": "parts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "context",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24101,
      "codeLine": 24105,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getBindingIdentifiers": {
    "type": "function",
    "name": "getBindingIdentifiers",
    "params": [
      {
        "name": "duplicates",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24123,
      "codeLine": 24127,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "NodePath": {
    "type": "function",
    "name": "NodePath",
    "params": [
      {
        "name": "hub",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24172,
      "codeLine": 24176,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getScope": {
    "type": "function",
    "name": "getScope",
    "params": [
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24245,
      "codeLine": 24249,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "setData": {
    "type": "function",
    "name": "setData",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27386,
      "codeLine": 27390,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Set some arbitrary data on the current scope.\n"
  },
  "getData": {
    "type": "function",
    "name": "getData",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27394,
      "codeLine": 27398,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Recursively walk up scope tree looking for the data `key`.\n"
  },
  "traverse": {
    "type": "function",
    "name": "traverse",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "opts",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26920,
      "codeLine": 26924,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Traverse node with current scope and path.\n"
  },
  "_getTypeAnnotation": {
    "type": "function",
    "name": "_getTypeAnnotation",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24376,
      "codeLine": 24380,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "todo: split up this method\n"
  },
  "isBaseType": {
    "type": "function",
    "name": "isBaseType",
    "params": [
      {
        "name": "baseName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "soft",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24420,
      "codeLine": 24424,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_isBaseType": {
    "type": "function",
    "name": "_isBaseType",
    "params": [
      {
        "name": "baseName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "soft",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24428,
      "codeLine": 24432,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "couldBeBaseType": {
    "type": "function",
    "name": "couldBeBaseType",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24454,
      "codeLine": 24458,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "baseTypeStrictlyMatches": {
    "type": "function",
    "name": "baseTypeStrictlyMatches",
    "params": [
      {
        "name": "right",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24477,
      "codeLine": 24481,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isGenericType": {
    "type": "function",
    "name": "isGenericType",
    "params": [
      {
        "name": "genericName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24490,
      "codeLine": 24494,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getTypeAnnotationBindingConstantViolations": {
    "type": "function",
    "name": "getTypeAnnotationBindingConstantViolations",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24538,
      "codeLine": 24542,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getConstantViolationsBefore": {
    "type": "function",
    "name": "getConstantViolationsBefore",
    "params": [
      {
        "name": "binding",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "functions",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24600,
      "codeLine": 24604,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "inferAnnotationFromBinaryExpression": {
    "type": "function",
    "name": "inferAnnotationFromBinaryExpression",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24615,
      "codeLine": 24619,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getParentConditionalPath": {
    "type": "function",
    "name": "getParentConditionalPath",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24670,
      "codeLine": 24674,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "getConditionalAnnotation": {
    "type": "function",
    "name": "getConditionalAnnotation",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24689,
      "codeLine": 24693,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Func": {
    "type": "function",
    "name": "Func",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24933,
      "codeLine": 24937,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "resolveCall": {
    "type": "function",
    "name": "resolveCall",
    "params": [
      {
        "name": "callee",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 24961,
      "codeLine": 24965,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "has": {
    "type": "function",
    "name": "has",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25076,
      "codeLine": 25081,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check whether we have the input `key`. If the `key` references an array then we check\nif the array has any items, otherwise we just check if it's falsy.\n"
  },
  "is": {
    "name": "is",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25096,
      "codeLine": 25100,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Opposite of `has`.\n"
  },
  "equals": {
    "type": "function",
    "name": "equals",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25106,
      "codeLine": 25110,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check whether the path node `key` strict equals `value`.\n"
  },
  "isNodeType": {
    "type": "function",
    "name": "isNodeType",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25114,
      "codeLine": 25119,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check the type against our stored internal type of the node. This is handy when a node has\nbeen removed yet we still internally know the type and need it to calculate node replacement.\n"
  },
  "canHaveVariableDeclarationOrExpression": {
    "type": "function",
    "name": "canHaveVariableDeclarationOrExpression",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25123,
      "codeLine": 25133,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  for (KEY in right);\n  for (KEY;;);\n\nThis is because these spots allow VariableDeclarations AND normal expressions so we need\nto tell the path replacement that it's ok to replace this with an expression.\n\n",
    "description": "This checks whether or now we're in one of the following positions:\n"
  },
  "isCompletionRecord": {
    "type": "function",
    "name": "isCompletionRecord",
    "params": [
      {
        "name": "allowInsideFunction",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25137,
      "codeLine": 25141,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check whether the current path references a completion record\n"
  },
  "isStatementOrBlock": {
    "type": "function",
    "name": "isStatementOrBlock",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25165,
      "codeLine": 25170,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check whether or not the current `key` allows either a single statement or block statement\nso we can explode it if necessary.\n"
  },
  "referencesImport": {
    "type": "function",
    "name": "referencesImport",
    "params": [
      {
        "name": "moduleSource",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "importName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25178,
      "codeLine": 25182,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the currently assigned path references the `importName` of `moduleSource`.\n"
  },
  "getSource": {
    "type": "function",
    "name": "getSource",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25217,
      "codeLine": 25221,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Get the source code associated with this node.\n"
  },
  "willIMaybeExecuteBefore": {
    "type": "function",
    "name": "willIMaybeExecuteBefore",
    "params": [
      {
        "name": "target",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25230,
      "codeLine": 25234,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_guessExecutionStatusRelativeTo": {
    "type": "function",
    "name": "_guessExecutionStatusRelativeTo",
    "params": [
      {
        "name": "target",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25238,
      "codeLine": 25245,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\"Execution status\" simply refers to where or not we **think** this will execuete\nbefore or after the input `target` element.\n\n",
    "description": "Given a `target` check the execution status of it relative to the current path.\n"
  },
  "resolve": {
    "type": "function",
    "name": "resolve",
    "params": [
      {
        "name": "dangerous",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "resolved",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25292,
      "codeLine": 25296,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Resolve a \"pointer\" `NodePath` to it's absolute path.\n"
  },
  "_resolve": {
    "type": "function",
    "name": "_resolve",
    "params": [
      {
        "name": "dangerous",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "resolved",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25300,
      "codeLine": 25304,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "PathHoister": {
    "type": "function",
    "name": "PathHoister",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25425,
      "codeLine": 25429,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "isCompatibleScope": {
    "type": "function",
    "name": "isCompatibleScope",
    "params": [
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25440,
      "codeLine": 25444,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getCompatibleScopes": {
    "type": "function",
    "name": "getCompatibleScopes",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25455,
      "codeLine": 25459,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getAttachmentPath": {
    "type": "function",
    "name": "getAttachmentPath",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25474,
      "codeLine": 25478,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getNextScopeStatementParent": {
    "type": "function",
    "name": "getNextScopeStatementParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25500,
      "codeLine": 25504,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasOwnParamBindings": {
    "type": "function",
    "name": "hasOwnParamBindings",
    "params": [
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25509,
      "codeLine": 25513,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Statement": {
    "name": "Statement",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25776,
      "codeLine": 25780,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Expression": {
    "name": "Expression",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25792,
      "codeLine": 25796,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Referenced": {
    "name": "Referenced",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25815,
      "codeLine": 25819,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "BlockScoped": {
    "name": "BlockScoped",
    "type": "function",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26810,
      "codeLine": 26814,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ]
  },
  "Var": {
    "name": "Var",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25838,
      "codeLine": 25842,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "DirectiveLiteral": {
    "name": "DirectiveLiteral",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25850,
      "codeLine": 25854,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Directive": {
    "name": "Directive",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25862,
      "codeLine": 25866,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "User": {
    "name": "User",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25873,
      "codeLine": 25877,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "Generated": {
    "name": "Generated",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25884,
      "codeLine": 25888,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_containerInsert": {
    "type": "function",
    "name": "_containerInsert",
    "params": [
      {
        "name": "from",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 25968,
      "codeLine": 25972,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_containerInsertBefore": {
    "type": "function",
    "name": "_containerInsertBefore",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26000,
      "codeLine": 26004,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_containerInsertAfter": {
    "type": "function",
    "name": "_containerInsertAfter",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26008,
      "codeLine": 26012,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_maybePopFromStatements": {
    "type": "function",
    "name": "_maybePopFromStatements",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26016,
      "codeLine": 26020,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "insertAfter": {
    "type": "function",
    "name": "insertAfter",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26027,
      "codeLine": 26032,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Insert the provided nodes after the current one. When inserting nodes after an\nexpression, ensure that the completion record is correct by pushing the current node.\n"
  },
  "updateSiblingKeys": {
    "type": "function",
    "name": "updateSiblingKeys",
    "params": [
      {
        "name": "fromIndex",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "incrementBy",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26061,
      "codeLine": 26065,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Update all sibling node paths after `fromIndex` by `incrementBy`.\n"
  },
  "_verifyNodeList": {
    "type": "function",
    "name": "_verifyNodeList",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26075,
      "codeLine": 26079,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "unshiftContainer": {
    "type": "function",
    "name": "unshiftContainer",
    "params": [
      {
        "name": "listKey",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26100,
      "codeLine": 26104,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "pushContainer": {
    "type": "function",
    "name": "pushContainer",
    "params": [
      {
        "name": "listKey",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26124,
      "codeLine": 26128,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "hoist": {
    "type": "function",
    "name": "hoist",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26149,
      "codeLine": 26154,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Hoist the current node to the highest scope possible and return a UID\nreferencing it.\n"
  },
  "removalHooks": {
    "name": "removalHooks",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26176,
      "codeLine": 26181,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Deprecated in favor of `dangerouslyRemove` as it's far more scary and more accurately portrays\nthe risk.\n"
  },
  "dangerouslyRemove": {
    "type": "function",
    "name": "dangerouslyRemove",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26188,
      "codeLine": 26193,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Dangerously remove the current node. This may sometimes result in a tainted\ninvalid AST so use with caution.\n"
  },
  "_callRemovalHooks": {
    "type": "function",
    "name": "_callRemovalHooks",
    "params": [
      {
        "name": "position",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26210,
      "codeLine": 26214,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_remove": {
    "type": "function",
    "name": "_remove",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26223,
      "codeLine": 26227,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_markRemoved": {
    "type": "function",
    "name": "_markRemoved",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26236,
      "codeLine": 26240,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "_assertUnremoved": {
    "type": "function",
    "name": "_assertUnremoved",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26246,
      "codeLine": 26250,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "replaceWithMultiple": {
    "type": "function",
    "name": "replaceWithMultiple",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26332,
      "codeLine": 26340,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n - Inherit the comments of first provided node with that of the current node.\n - Insert the provided nodes after the current node.\n - Remove the current node.\n\n",
    "description": "Replace a node with an array of multiple. This method performs the following steps:\n"
  },
  "replaceWithSourceString": {
    "type": "function",
    "name": "replaceWithSourceString",
    "params": [
      {
        "name": "replacement",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26350,
      "codeLine": 26358,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nNOTE: This is typically not a good idea to use. Building source strings when\ntransforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\neasier to use, your transforms will be extremely brittle.\n\n",
    "description": "Parse a string as an expression and replace the current node with the result.\n"
  },
  "replaceWith": {
    "type": "function",
    "name": "replaceWith",
    "params": [
      {
        "name": "replacement",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "whateverAllowed",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26378,
      "codeLine": 26382,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Replace the current node with another.\n"
  },
  "replaceExpressionWithStatements": {
    "type": "function",
    "name": "replaceExpressionWithStatements",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26445,
      "codeLine": 26451,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "This method takes an array of statements nodes and then explodes it\ninto expressions. This method retains completion records which is\nextremely important to retain original semantics.\n"
  },
  "replaceInline": {
    "type": "function",
    "name": "replaceInline",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26488,
      "codeLine": 26492,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "deoptValue": {
    "type": "function",
    "name": "deoptValue",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26551,
      "codeLine": 26555,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "setValue": {
    "type": "function",
    "name": "setValue",
    "params": [
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26560,
      "codeLine": 26564,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "clearValue": {
    "type": "function",
    "name": "clearValue",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26570,
      "codeLine": 26574,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "reassign": {
    "type": "function",
    "name": "reassign",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26580,
      "codeLine": 26584,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "reference": {
    "type": "function",
    "name": "reference",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26589,
      "codeLine": 26593,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "dereference": {
    "type": "function",
    "name": "dereference",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26598,
      "codeLine": 26602,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "isCompatibleWithType": {
    "type": "function",
    "name": "isCompatibleWithType",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26607,
      "codeLine": 26611,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "For": {
    "type": "function",
    "name": "For",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26690,
      "codeLine": 26694,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "Declaration": {
    "type": "function",
    "name": "Declaration",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26704,
      "codeLine": 26708,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "LabeledStatement": {
    "type": "function",
    "name": "LabeledStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26766,
      "codeLine": 26770,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "renameVisitor": {
    "name": "renameVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26844,
      "codeLine": 26848,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "renameVisitor.AssignmentExpression": {
    "type": "function",
    "name": "renameVisitor.AssignmentExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "state",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26871,
      "codeLine": 26875,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "generateDeclaredUidIdentifier": {
    "type": "function",
    "name": "generateDeclaredUidIdentifier",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26928,
      "codeLine": 26932,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Generate a unique identifier and add it to the current scope.\n"
  },
  "generateUidIdentifier": {
    "type": "function",
    "name": "generateUidIdentifier",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26940,
      "codeLine": 26944,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Generate a unique identifier.\n"
  },
  "generateUid": {
    "type": "function",
    "name": "generateUid",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26948,
      "codeLine": 26952,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Generate a unique `_id1` binding.\n"
  },
  "_generateUid": {
    "type": "function",
    "name": "_generateUid",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "i",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26969,
      "codeLine": 26973,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Generate an `_id1`.\n"
  },
  "generateUidIdentifierBasedOnNode": {
    "type": "function",
    "name": "generateUidIdentifierBasedOnNode",
    "params": [
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "defaultName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 26979,
      "codeLine": 26983,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Generate a unique identifier based on a node.\n"
  },
  "isStatic": {
    "type": "function",
    "name": "isStatic",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27039,
      "codeLine": 27049,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n - `this` expressions\n - `super` expressions\n - Bound identifiers\n  \n",
    "description": "Determine whether evaluating the specific input `node` is a consequenceless reference. ie.\nevaluating it wont result in potentially arbitrary code from being ran. The following are\nwhitelisted and determined not to cause side effects:\n"
  },
  "maybeGenerateMemoised": {
    "type": "function",
    "name": "maybeGenerateMemoised",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "dontPush",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27066,
      "codeLine": 27070,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Possibly generate a memoised identifier if it is not static and has consequences.\n"
  },
  "checkBlockScopedCollisions": {
    "type": "function",
    "name": "checkBlockScopedCollisions",
    "params": [
      {
        "name": "local",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "kind",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "id",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27080,
      "codeLine": 27084,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "rename": {
    "type": "function",
    "name": "rename",
    "params": [
      {
        "name": "oldName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "newName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "block",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27104,
      "codeLine": 27108,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_renameFromMap": {
    "type": "function",
    "name": "_renameFromMap",
    "params": [
      {
        "name": "map",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "oldName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "newName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27137,
      "codeLine": 27141,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "dump": {
    "type": "function",
    "name": "dump",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27148,
      "codeLine": 27152,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "registerDeclaration": {
    "type": "function",
    "name": "registerDeclaration",
    "params": [
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27202,
      "codeLine": 27206,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "registerConstantViolation": {
    "type": "function",
    "name": "registerConstantViolation",
    "params": [
      {
        "name": "root",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "left",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "right",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27229,
      "codeLine": 27233,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "registerBinding": {
    "type": "function",
    "name": "registerBinding",
    "params": [
      {
        "name": "kind",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "path",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27248,
      "codeLine": 27252,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "addGlobal": {
    "type": "function",
    "name": "addGlobal",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27298,
      "codeLine": 27302,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasUid": {
    "type": "function",
    "name": "hasUid",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27306,
      "codeLine": 27310,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasGlobal": {
    "type": "function",
    "name": "hasGlobal",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27320,
      "codeLine": 27324,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasReference": {
    "type": "function",
    "name": "hasReference",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27334,
      "codeLine": 27338,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "isPure": {
    "type": "function",
    "name": "isPure",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "constantsOnly",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27348,
      "codeLine": 27352,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "removeData": {
    "type": "function",
    "name": "removeData",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27406,
      "codeLine": 27411,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Recursively walk up scope tree looking for the data `key` and if it exists,\nremove it.\n"
  },
  "getProgramParent": {
    "type": "function",
    "name": "getProgramParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27553,
      "codeLine": 27557,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Walk up to the top of the scope tree and get the `Program`.\n"
  },
  "getBlockParent": {
    "type": "function",
    "name": "getBlockParent",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27582,
      "codeLine": 27587,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the\nvery top and hit Program.\n"
  },
  "getAllBindings": {
    "type": "function",
    "name": "getAllBindings",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27597,
      "codeLine": 27601,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Walks the scope tree and gathers **all** bindings.\n"
  },
  "getAllBindingsOfKind": {
    "type": "function",
    "name": "getAllBindingsOfKind",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27613,
      "codeLine": 27617,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Walks the scope tree and gathers all declarations of `kind`.\n"
  },
  "bindingIdentifierEquals": {
    "type": "function",
    "name": "bindingIdentifierEquals",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27636,
      "codeLine": 27640,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getBinding": {
    "type": "function",
    "name": "getBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27644,
      "codeLine": 27648,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getOwnBinding": {
    "type": "function",
    "name": "getOwnBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27657,
      "codeLine": 27661,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getBindingIdentifier": {
    "type": "function",
    "name": "getBindingIdentifier",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27665,
      "codeLine": 27669,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "getOwnBindingIdentifier": {
    "type": "function",
    "name": "getOwnBindingIdentifier",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27674,
      "codeLine": 27678,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasOwnBinding": {
    "type": "function",
    "name": "hasOwnBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27683,
      "codeLine": 27687,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "hasBinding": {
    "type": "function",
    "name": "hasBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "noGlobals",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27691,
      "codeLine": 27695,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "parentHasBinding": {
    "type": "function",
    "name": "parentHasBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "noGlobals",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27705,
      "codeLine": 27709,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "moveBindingTo": {
    "type": "function",
    "name": "moveBindingTo",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27713,
      "codeLine": 27717,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Move a binding of `name` to another `scope`.\n"
  },
  "removeOwnBinding": {
    "type": "function",
    "name": "removeOwnBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27726,
      "codeLine": 27730,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "removeBinding": {
    "type": "function",
    "name": "removeBinding",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27734,
      "codeLine": 27738,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "[Please add a description.]\n"
  },
  "_lodashLangClone2": {
    "name": "_lodashLangClone2",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27802,
      "codeLine": 27806,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "verify": {
    "type": "function",
    "name": "verify",
    "params": [
      {
        "name": "visitor",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27910,
      "codeLine": 27914,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "merge": {
    "type": "function",
    "name": "merge",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "shares",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "min",
        "description": "\n    \n    diff : {app1 : waste, app2 : waste, _waste: 0}, \n    lower: i, - the 'lower' share whos contents will be merged into, and contents should run first\n    higher: j  - the 'higher' share\n\t "
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/flatten.js",
    "src": {
      "line": 20,
      "codeLine": 32,
      "path": "node_modules/steal-tools/lib/bundle/flatten.js"
    },
    "body": "\n",
    "description": "Merges 2 shares contents.  Shares are expected to be in the order\ngetMostShared removes them ... by lowest depenency first.\nWe should merge into the 'lower' dependency.\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "min",
      "description": "\n    \n    diff : {app1 : waste, app2 : waste, _waste: 0}, \n    lower: i, - the 'lower' share whos contents will be merged into, and contents should run first\n    higher: j  - the 'higher' share\n\t "
    }
  },
  "ensureEntranceObjects": {
    "type": "function",
    "name": "ensureEntranceObjects",
    "params": [
      {
        "name": "obj",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27961,
      "codeLine": 27965,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "ensureCallbackArrays": {
    "type": "function",
    "name": "ensureCallbackArrays",
    "params": [
      {
        "name": "obj",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27976,
      "codeLine": 27980,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "wrapCheck": {
    "type": "function",
    "name": "wrapCheck",
    "params": [
      {
        "name": "wrapper",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "fn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27985,
      "codeLine": 27989,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "shouldIgnoreKey": {
    "type": "function",
    "name": "shouldIgnoreKey",
    "params": [
      {
        "name": "key",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 27997,
      "codeLine": 28001,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "mergePair": {
    "type": "function",
    "name": "mergePair",
    "params": [
      {
        "name": "dest",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "src",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28014,
      "codeLine": 28018,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toSequenceExpression": {
    "type": "function",
    "name": "toSequenceExpression",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "scope",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28082,
      "codeLine": 28091,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nVariable declarations are turned into simple assignments and their\ndeclarations hoisted to the top of the current scope.\n\nExpression statements are just resolved to their expression.\n\n",
    "description": "Turn an array of statement `nodes` into a `SequenceExpression`.\n"
  },
  "toKeyAlias": {
    "type": "function",
    "name": "toKeyAlias",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28170,
      "codeLine": 28174,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toIdentifier": {
    "type": "function",
    "name": "toIdentifier",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28199,
      "codeLine": 28203,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toBindingIdentifierName": {
    "type": "function",
    "name": "toBindingIdentifierName",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28226,
      "codeLine": 28230,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toStatement": {
    "type": "function",
    "name": "toStatement",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "ignore",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28236,
      "codeLine": 28241,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n",
    "returns": "{Object|Boolean}"
  },
  "toExpression": {
    "type": "function",
    "name": "toExpression",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28276,
      "codeLine": 28280,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "toBlock": {
    "type": "function",
    "name": "toBlock",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28298,
      "codeLine": 28302,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "valueToNode": {
    "type": "function",
    "name": "valueToNode",
    "params": [
      {
        "name": "value",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 28326,
      "codeLine": 28330,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "removeTypeDuplicates": {
    "type": "function",
    "name": "removeTypeDuplicates",
    "params": [
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29137,
      "codeLine": 29141,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Dedupe type annotations.\n"
  },
  "createTypeAnnotationBasedOnTypeof": {
    "type": "function",
    "name": "createTypeAnnotationBasedOnTypeof",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29215,
      "codeLine": 29219,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create a type anotation based on typeof expression.\n"
  },
  "registerType": {
    "type": "function",
    "name": "registerType",
    "params": [
      {
        "name": "type",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "skipAliasCheck",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29284,
      "codeLine": 29289,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.\nPass `skipAliasCheck` to force it to directly compare `node.type` with `type`.\n"
  },
  "STATEMENT_OR_BLOCK_KEYS": {
    "name": "STATEMENT_OR_BLOCK_KEYS",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29302,
      "codeLine": 29306,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Constants.\n"
  },
  "BUILDER_KEYS": {
    "name": "BUILDER_KEYS",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29339,
      "codeLine": 29343,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Registers `is[Type]` and `assert[Type]` for all types.\n"
  },
  "FLIPPED_ALIAS_KEYS": {
    "name": "FLIPPED_ALIAS_KEYS",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29349,
      "codeLine": 29353,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Flip `ALIAS_KEYS` for faster access in the reverse direction.\n"
  },
  "shallowEqual": {
    "type": "function",
    "name": "shallowEqual",
    "params": [
      {
        "name": "actual",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "expected",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29456,
      "codeLine": 29460,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Test if an object is shallowly equal.\n"
  },
  "appendToMemberExpression": {
    "type": "function",
    "name": "appendToMemberExpression",
    "params": [
      {
        "name": "member",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "append",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "computed",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29474,
      "codeLine": 29478,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Append a node to a member expression.\n"
  },
  "prependToMemberExpression": {
    "type": "function",
    "name": "prependToMemberExpression",
    "params": [
      {
        "name": "member",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "prepend",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29485,
      "codeLine": 29489,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Prepend a node to a member expression.\n"
  },
  "clone": {
    "type": "function",
    "name": "clone",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29505,
      "codeLine": 29509,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create a shallow clone of a `node` excluding `_private` properties.\n"
  },
  "cloneDeep": {
    "type": "function",
    "name": "cloneDeep",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29518,
      "codeLine": 29523,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create a deep clone of a `node` and all of it's child nodes\nexluding `_private` properties.\n"
  },
  "buildMatchMemberExpression": {
    "type": "function",
    "name": "buildMatchMemberExpression",
    "params": [
      {
        "name": "match",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "allowPartial",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29545,
      "codeLine": 29553,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nFor example, given the match `React.createClass` it would match the\nparsed nodes of `React.createClass` and `React[\"createClass\"]`.\n\n",
    "description": "Build a function that when called will return whether or not the\ninput `node` `MemberExpression` matches the input `match`.\n"
  },
  "removeComments": {
    "type": "function",
    "name": "removeComments",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29600,
      "codeLine": 29604,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Remove comment properties from a node.\n"
  },
  "inheritsComments": {
    "type": "function",
    "name": "inheritsComments",
    "params": [
      {
        "name": "child",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29614,
      "codeLine": 29618,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Inherit all unique comments from `parent` node to `child` node.\n"
  },
  "keys": {
    "name": "keys",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29719,
      "codeLine": 29723,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Mapping of types to their identifier keys.\n"
  },
  "isReferenced": {
    "type": "function",
    "name": "isReferenced",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29807,
      "codeLine": 29811,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is a reference to a bound variable.\n"
  },
  "isValidIdentifier": {
    "type": "function",
    "name": "isValidIdentifier",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29928,
      "codeLine": 29933,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `name` is a valid identifier name\nand isn't a reserved word.\n"
  },
  "isLet": {
    "type": "function",
    "name": "isLet",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29941,
      "codeLine": 29945,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is a `let` variable declaration.\n"
  },
  "isBlockScoped": {
    "type": "function",
    "name": "isBlockScoped",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29949,
      "codeLine": 29953,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is block scoped.\n"
  },
  "isSpecifierDefault": {
    "type": "function",
    "name": "isSpecifierDefault",
    "params": [
      {
        "name": "specifier",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29965,
      "codeLine": 29969,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `specifier` is a `default` import or export.\n"
  },
  "isScope": {
    "type": "function",
    "name": "isScope",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "parent",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29973,
      "codeLine": 29977,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is a scope.\n"
  },
  "isImmutable": {
    "type": "function",
    "name": "isImmutable",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 29985,
      "codeLine": 29989,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Check if the input `node` is definitely immutable.\n"
  },
  "EXTENSIONS": {
    "name": "EXTENSIONS",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30120,
      "codeLine": 30124,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Default set of compilable extensions.\n"
  },
  "regexify": {
    "type": "function",
    "name": "regexify",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30142,
      "codeLine": 30146,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create a RegExp from a string, array, or regexp.\n"
  },
  "arrayify": {
    "type": "function",
    "name": "arrayify",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "mapFn",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30168,
      "codeLine": 30172,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create an array from a boolean, string, or array, mapped by and optional function.\n"
  },
  "booleanify": {
    "type": "function",
    "name": "booleanify",
    "params": [
      {
        "name": "val",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30185,
      "codeLine": 30189,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Makes boolean-like strings into booleans.\n"
  },
  "_shouldIgnore": {
    "type": "function",
    "name": "_shouldIgnore",
    "params": [
      {
        "name": "pattern",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "filename",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30222,
      "codeLine": 30226,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "[Please add a description.]\n"
  },
  "templateVisitor": {
    "name": "templateVisitor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30234,
      "codeLine": 30238,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "A visitor for Babel templates, replaces placeholder references.\n"
  },
  "noScope": {
    "name": "noScope",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30240,
      "codeLine": 30243,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "360 NoScope PWNd\n"
  },
  "template": {
    "type": "function",
    "name": "template",
    "params": [
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "nodes",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "keepExpression",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30261,
      "codeLine": 30265,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Create an instance of a template to use in a transformer.\n"
  },
  "parseTemplate": {
    "type": "function",
    "name": "parseTemplate",
    "params": [
      {
        "name": "loc",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "code",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30291,
      "codeLine": 30295,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Parse a template.\n"
  },
  "loadTemplates": {
    "type": "function",
    "name": "loadTemplates",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 30301,
      "codeLine": 30305,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Load templates from transformation/templates directory.\n"
  },
  "names": {
    "name": "names",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40411,
      "codeLine": 40415,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "The currently active debug mode names, and names to skip.\n"
  },
  "formatters": {
    "name": "formatters",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40418,
      "codeLine": 40424,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nValid key names are a single, lowercased letter, i.e. \"n\".\n\n",
    "description": "Map of special \"%n\" handling functions, for the debug \"format\" argument.\n"
  },
  "prevColor": {
    "name": "prevColor",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40426,
      "codeLine": 40430,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Previously assigned color.\n"
  },
  "selectColor": {
    "type": "function",
    "name": "selectColor",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40438,
      "codeLine": 40445,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Select a color.\n",
    "returns": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "description": ""
    },
    "api": "private"
  },
  "enable": {
    "type": "function",
    "name": "enable",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "namespaces",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40523,
      "codeLine": 40531,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Enables a debug mode by namespaces. This can include modes\nseparated by a colon and wildcards.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "namespaces",
      "description": ""
    },
    "api": "public"
  },
  "disable": {
    "type": "function",
    "name": "disable",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40548,
      "codeLine": 40554,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Disable debug output.\n",
    "api": "public"
  },
  "enabled": {
    "type": "function",
    "name": "enabled",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "name",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40558,
      "codeLine": 40566,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Returns true if the given mode name is enabled, false otherwise.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "name",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": ""
    },
    "api": "public"
  },
  "coerce": {
    "type": "function",
    "name": "coerce",
    "params": [
      {
        "types": [
          {
            "type": "Mixed"
          }
        ],
        "name": "val",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40581,
      "codeLine": 40589,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Coerce `val`.\n",
    "_curParam": {
      "types": [
        {
          "type": "Mixed"
        }
      ],
      "name": "val",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "Mixed"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "Mixed"
        }
      ],
      "description": ""
    },
    "api": "private"
  },
  "tty": {
    "name": "tty",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40597,
      "codeLine": 40601,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Module dependencies.\n"
  },
  "colors": {
    "name": "colors",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40617,
      "codeLine": 40621,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Colors.\n"
  },
  "fd": {
    "name": "fd",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40623,
      "codeLine": 40630,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  $ DEBUG_FD=3 node script.js 3>debug.log\n\n",
    "description": "The file descriptor to write the `debug()` calls to.\nSet the `DEBUG_FD` env variable to override with another value. i.e.:\n"
  },
  "useColors": {
    "type": "function",
    "name": "useColors",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40635,
      "codeLine": 40639,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Is stdout a TTY? Colored output is enabled when `true`.\n"
  },
  "inspect": {
    "name": "inspect",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40651,
      "codeLine": 40655,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Map %o to `util.inspect()`, since Node doesn't do that out of the box.\n"
  },
  "formatArgs": {
    "type": "function",
    "name": "formatArgs",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40671,
      "codeLine": 40677,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Adds ANSI color escape codes if enabled.\n",
    "api": "public"
  },
  "log": {
    "type": "function",
    "name": "log",
    "params": [],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40696,
      "codeLine": 40700,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Invokes `console.error()` with the specified arguments.\n"
  },
  "save": {
    "type": "function",
    "name": "save",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "name": "namespaces",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40704,
      "codeLine": 40711,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Save `namespaces`.\n",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "namespaces",
      "description": ""
    },
    "api": "private"
  },
  "load": {
    "type": "typedef",
    "name": "load",
    "params": [],
    "parent": "StealJS.types",
    "src": {
      "path": "node_modules/steal/docs/type-load.md"
    },
    "body": "\n",
    "description": "\nThe **load** object is a POJO that is used to refer to a module during module loading lifecycle hooks.\n",
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "returns the previously persisted debug modes"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "returns the previously persisted debug modes"
    },
    "api": "private",
    "title": "load",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "name",
            "description": "The [moduleName] of this module. The **name** property always exists on the *load* object. The load object is only created after the module name is known; after the [steal.hooks.normalize] step.\n",
            "types": [
              {
                "type": "String"
              }
            ]
          },
          {
            "name": "address",
            "description": "The URL / filesystem path, or generic location of which the module can be fetched. The address is known after the [steal.hooks.locate] step.\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true
          },
          {
            "name": "source",
            "description": "The actual source code for this module.\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true
          },
          {
            "name": "metadata",
            "description": "The metadata associated with this module, such as which module format is being used.\n",
            "types": [
              {
                "type": "load.metadata"
              }
            ]
          }
        ]
      }
    ]
  },
  "createWritableStdioStream": {
    "type": "function",
    "name": "createWritableStdioStream",
    "params": [
      {
        "name": "fd",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40732,
      "codeLine": 40739,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nXXX: It's lame that node doesn't expose this API out-of-the-box. It also\nrelies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n\n",
    "description": "Copied from `node/src/node.js`.\n"
  },
  "s": {
    "name": "s",
    "type": "property",
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40808,
      "codeLine": 40812,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Helpers.\n"
  },
  "short": {
    "type": "function",
    "name": "short",
    "params": [
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "ms",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40892,
      "codeLine": 40900,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Short format for `ms`.\n",
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "name": "ms",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": ""
    },
    "api": "private"
  },
  "long": {
    "type": "function",
    "name": "long",
    "params": [
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "ms",
        "description": ""
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40908,
      "codeLine": 40916,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Long format for `ms`.\n",
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "name": "ms",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": ""
    },
    "api": "private"
  },
  "plural": {
    "type": "function",
    "name": "plural",
    "params": [
      {
        "name": "ms",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "n",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "name",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal/ext/babel.js",
    "src": {
      "line": 40924,
      "codeLine": 40928,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Pluralization helper.\n"
  },
  "static": {
    "type": "static",
    "name": "static",
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "string"
          }
        ],
        "name": "path",
        "description": "The path of the property to get."
      }
    ],
    "parent": null,
    "src": {
      "line": 46822,
      "codeLine": 46844,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\nvar objects = [\n  { 'a': { 'b': { 'c': 2 } } },\n  { 'a': { 'b': { 'c': 1 } } }\n];\n\n_.map(objects, _.property('a.b.c'));\n// => [2, 1]\n\n_.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n// => [1, 2]\n\n",
    "description": "Creates a function that returns the property value at `path` on a\ngiven object.\n",
    "title": "static",
    "memberof": "_",
    "category": "Utility",
    "_curParam": {
      "types": [
        {
          "type": "Array"
        },
        {
          "type": "string"
        }
      ],
      "name": "path",
      "description": "The path of the property to get."
    },
    "returns": "{Function} Returns the new function.",
    "example": true,
    "alias": "extend"
  },
  "static.arrayProto": {
    "name": "static.arrayProto",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 42731,
      "codeLine": 42732,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used for native method references. \n"
  },
  "static.splice": {
    "name": "static.splice",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 42734,
      "codeLine": 42735,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Native method references. \n"
  },
  "static.FUNC_ERROR_TEXT": {
    "name": "static.FUNC_ERROR_TEXT",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43203,
      "codeLine": 43204,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used as the `TypeError` message for \"Functions\" methods. \n"
  },
  "static.Set": {
    "name": "static.Set",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 44866,
      "codeLine": 44867,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Native method references. \n"
  },
  "static.SetCache": {
    "type": "function",
    "name": "static.SetCache",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "values",
        "description": "The values to cache.\n"
      }
    ],
    "parent": "static",
    "src": {
      "line": 43273,
      "codeLine": 43280,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Creates a cache object to store unique values.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "values",
      "description": "The values to cache.\n"
    }
  },
  "static.arrayCopy": {
    "type": "function",
    "name": "static.arrayCopy",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "source",
        "description": "The array to copy values from."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "array",
        "defaultValue": "[",
        "description": "The array to copy values to."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43296,
      "codeLine": 43304,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Copies the values of `source` to `array`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "array",
      "defaultValue": "[",
      "description": "The array to copy values to."
    },
    "returns": "{Array} Returns `array`."
  },
  "static.arrayEach": {
    "type": "function",
    "name": "static.arrayEach",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43318,
      "codeLine": 43327,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `_.forEach` for arrays without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array} Returns `array`."
  },
  "static.arrayMap": {
    "type": "function",
    "name": "static.arrayMap",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43342,
      "codeLine": 43351,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `_.map` for arrays without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array} Returns the new mapped array."
  },
  "static.arrayPush": {
    "type": "function",
    "name": "static.arrayPush",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to modify."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "values",
        "description": "The values to append."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43365,
      "codeLine": 43373,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Appends the elements of `values` to `array`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "values",
      "description": "The values to append."
    },
    "returns": "{Array} Returns `array`."
  },
  "static.arrayReduceRight": {
    "type": "function",
    "name": "static.arrayReduceRight",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "optional": true,
        "name": "accumulator",
        "description": "The initial value."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "initFromArray",
        "description": "Specify using the last element of `array`\n as the initial value."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43387,
      "codeLine": 43399,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `_.reduceRight` for arrays without support for\ncallback shorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "name": "initFromArray",
      "description": "Specify using the last element of `array`\n as the initial value."
    },
    "returns": "{*} Returns the accumulated value."
  },
  "static.arraySome": {
    "type": "function",
    "name": "static.arraySome",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "predicate",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43413,
      "codeLine": 43423,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n else `false`.\n\n",
    "description": "A specialized version of `_.some` for arrays without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "predicate",
      "description": "The function invoked per iteration."
    },
    "returns": "{boolean} Returns `true` if any element passes the predicate check,"
  },
  "static.assignDefaults": {
    "type": "function",
    "name": "static.assignDefaults",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "objectValue",
        "description": "The destination object property value."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "sourceValue",
        "description": "The source object property value."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43438,
      "codeLine": 43446,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Used by `_.defaults` to customize its `_.assign` use.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "sourceValue",
      "description": "The source object property value."
    },
    "returns": "{*} Returns the value to assign to the destination object."
  },
  "static.assignWith": {
    "type": "function",
    "name": "static.assignWith",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The destination object."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The source object."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "customizer",
        "description": "The function to customize assigned values."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43455,
      "codeLine": 43466,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `_.assign` for customizing assigned values without\nsupport for argument juggling, multiple sources, and `this` binding `customizer`\nfunctions.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "customizer",
      "description": "The function to customize assigned values."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseAssign": {
    "type": "function",
    "name": "static.baseAssign",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The destination object."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The source object."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43490,
      "codeLine": 43499,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.assign` without support for argument juggling,\nmultiple sources, and `customizer` functions.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "source",
      "description": "The source object."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseCallback": {
    "type": "function",
    "name": "static.baseCallback",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "optional": true,
        "name": "func",
        "defaultValue": "_.identity",
        "description": "The value to convert to a callback."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "optional": true,
        "name": "thisArg",
        "description": "The `this` binding of `func`."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "optional": true,
        "name": "argCount",
        "description": "The number of arguments to provide to `func`."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43514,
      "codeLine": 43524,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.callback` which supports specifying the\nnumber of arguments to provide to `func`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "name": "argCount",
      "description": "The number of arguments to provide to `func`."
    },
    "returns": "{Function} Returns the callback."
  },
  "static.argsTag": {
    "name": "static.argsTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46245,
      "codeLine": 46246,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.cloneableTags": {
    "name": "static.cloneableTags",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43581,
      "codeLine": 43582,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to identify `toStringTag` values supported by `_.clone`. \n"
  },
  "static.objectProto": {
    "name": "static.objectProto",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46538,
      "codeLine": 46539,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used for native method references. \n"
  },
  "static.objToString": {
    "name": "static.objToString",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46289,
      "codeLine": 46293,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\nof values.\n"
  },
  "static.baseClone": {
    "type": "function",
    "name": "static.baseClone",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to clone."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isDeep",
        "description": "Specify a deep clone."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize cloning values."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "optional": true,
        "name": "key",
        "description": "The key of `value`."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "optional": true,
        "name": "object",
        "description": "The object `value` belongs to."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "defaultValue": "[",
        "description": "Tracks traversed source objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "defaultValue": "[",
        "description": "Associates clones with source counterparts."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43605,
      "codeLine": 43619,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.clone` without support for argument juggling\nand `this` binding `customizer` functions.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "defaultValue": "[",
      "description": "Associates clones with source counterparts."
    },
    "returns": "{*} Returns the cloned value."
  },
  "static.baseCompareAscending": {
    "type": "function",
    "name": "static.baseCompareAscending",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to compare."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "other",
        "description": "The other value to compare."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43675,
      "codeLine": 43684,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `compareAscending` which compares values and\nsorts them in ascending order without guaranteeing a stable sort.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "other",
      "description": "The other value to compare."
    },
    "returns": "{number} Returns the sort order indicator for `value`."
  },
  "static.baseCopy": {
    "type": "function",
    "name": "static.baseCopy",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The object to copy properties from."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "props",
        "description": "The property names to copy."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "optional": true,
        "name": "object",
        "defaultValue": "{",
        "description": "The object to copy properties to."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43711,
      "codeLine": 43720,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Copies properties of `source` to `object`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "optional": true,
      "name": "object",
      "defaultValue": "{",
      "description": "The object to copy properties to."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseEach": {
    "name": "static.baseEach",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43739,
      "codeLine": 43748,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.forEach` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "Object"
          },
          {
            "type": "string"
          }
        ],
        "name": "collection",
        "description": "The collection to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array|Object|string} Returns `collection`."
  },
  "static.baseEachRight": {
    "name": "static.baseEachRight",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43756,
      "codeLine": 43765,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.forEachRight` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "Object"
          },
          {
            "type": "string"
          }
        ],
        "name": "collection",
        "description": "The collection to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array|Object|string} Returns `collection`."
  },
  "static.baseFlatten": {
    "type": "function",
    "name": "static.baseFlatten",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to flatten."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isDeep",
        "description": "Specify a deep flatten."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isStrict",
        "description": "Restrict flattening to arrays-like objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "result",
        "defaultValue": "[",
        "description": "The initial result value."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43776,
      "codeLine": 43787,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.flatten` with added support for restricting\nflattening and specifying the start index.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "result",
      "defaultValue": "[",
      "description": "The initial result value."
    },
    "returns": "{Array} Returns the new flattened array."
  },
  "static.baseFor": {
    "name": "static.baseFor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43815,
      "codeLine": 43827,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `baseForIn` and `baseForOwn` which iterates\nover `object` properties returned by `keysFunc` invoking `iteratee` for\neach property. Iteratee functions may exit iteration early by explicitly\nreturning `false`.\n",
    "private": true,
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "keysFunc",
        "description": "The function to get the keys of `object`."
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "keysFunc",
      "description": "The function to get the keys of `object`."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseForIn": {
    "type": "function",
    "name": "static.baseForIn",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43835,
      "codeLine": 43844,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.forIn` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseForOwn": {
    "type": "function",
    "name": "static.baseForOwn",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43854,
      "codeLine": 43863,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.forOwn` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseForOwnRight": {
    "type": "function",
    "name": "static.baseForOwnRight",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43873,
      "codeLine": 43882,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.forOwnRight` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseForRight": {
    "name": "static.baseForRight",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 43891,
      "codeLine": 43901,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "This function is like `baseFor` except that it iterates over properties\nin the opposite order.\n",
    "private": true,
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "keysFunc",
        "description": "The function to get the keys of `object`."
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "keysFunc",
      "description": "The function to get the keys of `object`."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseGet": {
    "type": "function",
    "name": "static.baseGet",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "path",
        "description": "The path of the property to get."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "optional": true,
        "name": "pathKey",
        "description": "The key representation of path."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43908,
      "codeLine": 43918,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `get` without support for string paths\nand default values.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "name": "pathKey",
      "description": "The key representation of path."
    },
    "returns": "{*} Returns the resolved value."
  },
  "static.baseIndexOf": {
    "type": "function",
    "name": "static.baseIndexOf",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to search."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to search for."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "name": "fromIndex",
        "description": "The index to search from."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43939,
      "codeLine": 43948,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.indexOf` without support for binary searches.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "name": "fromIndex",
      "description": "The index to search from."
    },
    "returns": [
      "{number} Returns the index of the matched value",
      "else `-1`."
    ]
  },
  "static.baseIsEqual": {
    "type": "function",
    "name": "static.baseIsEqual",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to compare."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "other",
        "description": "The other value to compare."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize comparing values."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isLoose",
        "description": "Specify performing partial comparisons."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "description": "Tracks traversed `value` objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "description": "Tracks traversed `other` objects."
      }
    ],
    "parent": "static",
    "src": {
      "line": 43970,
      "codeLine": 43983,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.isEqual` without support for `this` binding\n`customizer` functions.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "description": "Tracks traversed `other` objects."
    },
    "returns": [
      "{boolean} Returns `true` if the values are equivalent",
      "else `false`."
    ]
  },
  "static.hasOwnProperty": {
    "name": "static.hasOwnProperty",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46541,
      "codeLine": 46542,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to check objects for own properties. \n"
  },
  "static.baseIsEqualDeep": {
    "type": "function",
    "name": "static.baseIsEqualDeep",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to compare."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "other",
        "description": "The other object to compare."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "equalFunc",
        "description": "The function to determine equivalents of values."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize comparing objects."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isLoose",
        "description": "Specify performing partial comparisons."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "defaultValue": "[",
        "description": "Tracks traversed `value` objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "defaultValue": "[",
        "description": "Tracks traversed `other` objects."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44019,
      "codeLine": 44034,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseIsEqual` for arrays and objects which performs\ndeep comparisons and tracks traversed objects enabling objects with circular\nreferences to be compared.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "defaultValue": "[",
      "description": "Tracks traversed `other` objects."
    },
    "returns": [
      "{boolean} Returns `true` if the objects are equivalent",
      "else `false`."
    ]
  },
  "static.baseIsMatch": {
    "type": "function",
    "name": "static.baseIsMatch",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to inspect."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "matchData",
        "description": "The propery names, values, and compare flags to match."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize comparing objects."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44103,
      "codeLine": 44113,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.isMatch` without support for callback\nshorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "optional": true,
      "name": "customizer",
      "description": "The function to customize comparing objects."
    },
    "returns": [
      "{boolean} Returns `true` if `object` is a match",
      "else `false`."
    ]
  },
  "static.baseMap": {
    "type": "function",
    "name": "static.baseMap",
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "Object"
          },
          {
            "type": "string"
          }
        ],
        "name": "collection",
        "description": "The collection to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44157,
      "codeLine": 44166,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.map` without support for callback shorthands\nand `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array} Returns the new mapped array."
  },
  "static.baseMatches": {
    "type": "function",
    "name": "static.baseMatches",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The object of property values to match."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44183,
      "codeLine": 44190,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.matches` which does not clone `source`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "source",
      "description": "The object of property values to match."
    },
    "returns": "{Function} Returns the new function."
  },
  "static.baseMatchesProperty": {
    "type": "function",
    "name": "static.baseMatchesProperty",
    "params": [
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "path",
        "description": "The path of the property to get."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "srcValue",
        "description": "The value to compare."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44221,
      "codeLine": 44229,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "srcValue",
      "description": "The value to compare."
    },
    "returns": "{Function} Returns the new function."
  },
  "static.baseMerge": {
    "type": "function",
    "name": "static.baseMerge",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The destination object."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The source object."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize merged values."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "defaultValue": "[",
        "description": "Tracks traversed source objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "defaultValue": "[",
        "description": "Associates values with source counterparts."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44267,
      "codeLine": 44279,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.merge` without support for argument juggling,\nmultiple sources, and `this` binding `customizer` functions.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "defaultValue": "[",
      "description": "Associates values with source counterparts."
    },
    "returns": "{Object} Returns `object`."
  },
  "static.baseMergeDeep": {
    "type": "function",
    "name": "static.baseMergeDeep",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The destination object."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "source",
        "description": "The source object."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "key",
        "description": "The key of the value to merge."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "mergeFunc",
        "description": "The function to merge values."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize merged values."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "defaultValue": "[",
        "description": "Tracks traversed source objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "defaultValue": "[",
        "description": "Associates values with source counterparts."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44324,
      "codeLine": 44339,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseMerge` for arrays and objects which performs\ndeep merges and tracks traversed objects enabling objects with circular\nreferences to be merged.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "defaultValue": "[",
      "description": "Associates values with source counterparts."
    },
    "returns": [
      "{boolean} Returns `true` if the objects are equivalent",
      "else `false`."
    ]
  },
  "static.baseProperty": {
    "type": "function",
    "name": "static.baseProperty",
    "params": [
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "key",
        "description": "The key of the property to get."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44385,
      "codeLine": 44392,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.property` without support for deep paths.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "string"
        }
      ],
      "name": "key",
      "description": "The key of the property to get."
    },
    "returns": "{Function} Returns the new function."
  },
  "static.basePropertyDeep": {
    "type": "function",
    "name": "static.basePropertyDeep",
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "string"
          }
        ],
        "name": "path",
        "description": "The path of the property to get."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44404,
      "codeLine": 44411,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseProperty` which supports deep paths.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array"
        },
        {
          "type": "string"
        }
      ],
      "name": "path",
      "description": "The path of the property to get."
    },
    "returns": "{Function} Returns the new function."
  },
  "static.baseReduce": {
    "type": "function",
    "name": "static.baseReduce",
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "Object"
          },
          {
            "type": "string"
          }
        ],
        "name": "collection",
        "description": "The collection to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "iteratee",
        "description": "The function invoked per iteration."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "accumulator",
        "description": "The initial value."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "name": "initFromCollection",
        "description": "Specify using the first or last element\n of `collection` as the initial value."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "eachFunc",
        "description": "The function to iterate over `collection`."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44422,
      "codeLine": 44436,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.reduce` and `_.reduceRight` without support\nfor callback shorthands and `this` binding, which iterates over `collection`\nusing the provided `eachFunc`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "eachFunc",
      "description": "The function to iterate over `collection`."
    },
    "returns": "{*} Returns the accumulated value."
  },
  "static.baseSlice": {
    "type": "function",
    "name": "static.baseSlice",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to slice."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "optional": true,
        "name": "start",
        "defaultValue": "0",
        "description": "The start position."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "optional": true,
        "name": "end",
        "defaultValue": "array.length",
        "description": "The end position."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44448,
      "codeLine": 44457,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.slice` without an iteratee call guard.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "name": "end",
      "defaultValue": "array.length",
      "description": "The end position."
    },
    "returns": "{Array} Returns the slice of `array`."
  },
  "static.baseSome": {
    "type": "function",
    "name": "static.baseSome",
    "params": [
      {
        "types": [
          {
            "type": "Array"
          },
          {
            "type": "Object"
          },
          {
            "type": "string"
          }
        ],
        "name": "collection",
        "description": "The collection to iterate over."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "predicate",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44484,
      "codeLine": 44494,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n else `false`.\n\n",
    "description": "The base implementation of `_.some` without support for callback shorthands\nand `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "predicate",
      "description": "The function invoked per iteration."
    },
    "returns": "{boolean} Returns `true` if any element passes the predicate check,"
  },
  "static.baseSortBy": {
    "type": "function",
    "name": "static.baseSortBy",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to sort."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "comparer",
        "description": "The function to define sort order."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44507,
      "codeLine": 44517,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.sortBy` which uses `comparer` to define\nthe sort order of `array` and replaces criteria objects with their\ncorresponding values.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "comparer",
      "description": "The function to define sort order."
    },
    "returns": "{Array} Returns `array`."
  },
  "static.baseToString": {
    "type": "function",
    "name": "static.baseToString",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to process."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44530,
      "codeLine": 44538,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Converts `value` to a string if it's not one. An empty string is returned\nfor `null` or `undefined` values.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to process."
    },
    "returns": "{string} Returns the string."
  },
  "static.LARGE_ARRAY_SIZE": {
    "name": "static.LARGE_ARRAY_SIZE",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 44549,
      "codeLine": 44550,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used as the size to enable large array optimizations. \n"
  },
  "static.baseUniq": {
    "type": "function",
    "name": "static.baseUniq",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to inspect."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44552,
      "codeLine": 44561,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.uniq` without support for callback shorthands\nand `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "optional": true,
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array} Returns the new duplicate-value-free array."
  },
  "static.baseValues": {
    "type": "function",
    "name": "static.baseValues",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "props",
        "description": "The property names to get values for."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44607,
      "codeLine": 44617,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "The base implementation of `_.values` and `_.valuesIn` which creates an\narray of `object` property values corresponding to the property names\nof `props`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "props",
      "description": "The property names to get values for."
    },
    "returns": "{Object} Returns the array of property values."
  },
  "static.bindCallback": {
    "type": "function",
    "name": "static.bindCallback",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "func",
        "description": "The function to bind."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "thisArg",
        "description": "The `this` binding of `func`."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "optional": true,
        "name": "argCount",
        "description": "The number of arguments to provide to `func`."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44633,
      "codeLine": 44643,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseCallback` which only supports `this` binding\nand specifying the number of arguments to provide to `func`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "name": "argCount",
      "description": "The number of arguments to provide to `func`."
    },
    "returns": "{Function} Returns the callback."
  },
  "static.ArrayBuffer": {
    "name": "static.ArrayBuffer",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 44673,
      "codeLine": 44674,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Native method references. \n"
  },
  "static.bufferClone": {
    "type": "function",
    "name": "static.bufferClone",
    "params": [
      {
        "types": [
          {
            "type": "ArrayBuffer"
          }
        ],
        "name": "buffer",
        "description": "The array buffer to clone."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44677,
      "codeLine": 44684,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a clone of the given array buffer.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "ArrayBuffer"
        }
      ],
      "name": "buffer",
      "description": "The array buffer to clone."
    },
    "returns": "{ArrayBuffer} Returns the cloned array buffer."
  },
  "static.cacheIndexOf": {
    "type": "function",
    "name": "static.cacheIndexOf",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "cache",
        "description": "The cache to search."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to search for."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44698,
      "codeLine": 44707,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if `value` is in `cache` mimicking the return signature of\n`_.indexOf` by returning `0` if the value is found, else `-1`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to search for."
    },
    "returns": [
      "{number} Returns `0` if `value` is found",
      "else `-1`."
    ]
  },
  "static.compareAscending": {
    "type": "function",
    "name": "static.compareAscending",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to compare."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "other",
        "description": "The other object to compare."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44741,
      "codeLine": 44750,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Used by `_.sortBy` to compare transformed elements of a collection and stable\nsort them in ascending order.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "other",
      "description": "The other object to compare."
    },
    "returns": "{number} Returns the sort order indicator for `object`."
  },
  "static.createAssigner": {
    "type": "function",
    "name": "static.createAssigner",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "assigner",
        "description": "The function to assign values."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44761,
      "codeLine": 44768,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a `_.assign`, `_.defaults`, or `_.merge` function.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "assigner",
      "description": "The function to assign values."
    },
    "returns": "{Function} Returns the new assigner function."
  },
  "static.createBaseEach": {
    "type": "function",
    "name": "static.createBaseEach",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "eachFunc",
        "description": "The function to iterate over a collection."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "fromRight",
        "description": "Specify iterating from right to left."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44804,
      "codeLine": 44812,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a `baseEach` or `baseEachRight` function.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "name": "fromRight",
      "description": "Specify iterating from right to left."
    },
    "returns": "{Function} Returns the new base function."
  },
  "static.createBaseFor": {
    "type": "function",
    "name": "static.createBaseFor",
    "params": [
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "fromRight",
        "description": "Specify iterating from right to left."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44835,
      "codeLine": 44842,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a base function for `_.forIn` or `_.forInRight`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "name": "fromRight",
      "description": "Specify iterating from right to left."
    },
    "returns": "{Function} Returns the new base function."
  },
  "static.createCache": {
    "type": "function",
    "name": "static.createCache",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "values",
        "description": "The values to cache."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44872,
      "codeLine": 44879,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a `Set` cache object to optimize linear searches of large arrays.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "values",
      "description": "The values to cache."
    },
    "returns": [
      "{null|Object} Returns the new cache object if `Set` is supported",
      "else `null`."
    ]
  },
  "static.createDefaults": {
    "type": "function",
    "name": "static.createDefaults",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "assigner",
        "description": "The function to assign values."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "customizer",
        "description": "The function to customize assigned values."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44889,
      "codeLine": 44897,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a `_.defaults` or `_.defaultsDeep` function.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "customizer",
      "description": "The function to customize assigned values."
    },
    "returns": "{Function} Returns the new defaults function."
  },
  "static.createForEach": {
    "type": "function",
    "name": "static.createForEach",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "arrayFunc",
        "description": "The function to iterate over an array."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "eachFunc",
        "description": "The function to iterate over a collection."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44914,
      "codeLine": 44922,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a function for `_.forEach` or `_.forEachRight`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "eachFunc",
      "description": "The function to iterate over a collection."
    },
    "returns": "{Function} Returns the new each function."
  },
  "static.createReduce": {
    "type": "function",
    "name": "static.createReduce",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "arrayFunc",
        "description": "The function to iterate over an array."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "eachFunc",
        "description": "The function to iterate over a collection."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44937,
      "codeLine": 44945,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Creates a function for `_.reduce` or `_.reduceRight`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "eachFunc",
      "description": "The function to iterate over a collection."
    },
    "returns": "{Function} Returns the new each function."
  },
  "static.equalArrays": {
    "type": "function",
    "name": "static.equalArrays",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to compare."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "other",
        "description": "The other array to compare."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "equalFunc",
        "description": "The function to determine equivalents of values."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize comparing arrays."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isLoose",
        "description": "Specify performing partial comparisons."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "description": "Tracks traversed `value` objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "description": "Tracks traversed `other` objects."
      }
    ],
    "parent": "static",
    "src": {
      "line": 44959,
      "codeLine": 44973,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseIsEqualDeep` for arrays with support for\npartial deep comparisons.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "description": "Tracks traversed `other` objects."
    },
    "returns": [
      "{boolean} Returns `true` if the arrays are equivalent",
      "else `false`."
    ]
  },
  "static.boolTag": {
    "name": "static.boolTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45848,
      "codeLine": 45849,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.equalByTag": {
    "type": "function",
    "name": "static.equalByTag",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to compare."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "other",
        "description": "The other object to compare."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "tag",
        "description": "The `toStringTag` of the objects to compare."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45018,
      "codeLine": 45031,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n**Note:** This function only supports comparing values with tags of\n`Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\n\n",
    "description": "A specialized version of `baseIsEqualDeep` for comparing objects of\nthe same `toStringTag`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "string"
        }
      ],
      "name": "tag",
      "description": "The `toStringTag` of the objects to compare."
    },
    "returns": [
      "{boolean} Returns `true` if the objects are equivalent",
      "else `false`."
    ]
  },
  "static.equalObjects": {
    "type": "function",
    "name": "static.equalObjects",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to compare."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "other",
        "description": "The other object to compare."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "equalFunc",
        "description": "The function to determine equivalents of values."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "customizer",
        "description": "The function to customize comparing values."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isLoose",
        "description": "Specify performing partial comparisons."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackA",
        "description": "Tracks traversed `value` objects."
      },
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "optional": true,
        "name": "stackB",
        "description": "Tracks traversed `other` objects."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45068,
      "codeLine": 45082,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A specialized version of `baseIsEqualDeep` for objects with support for\npartial deep comparisons.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "optional": true,
      "name": "stackB",
      "description": "Tracks traversed `other` objects."
    },
    "returns": [
      "{boolean} Returns `true` if the objects are equivalent",
      "else `false`."
    ]
  },
  "static.regexpEscapes": {
    "name": "static.regexpEscapes",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45129,
      "codeLine": 45130,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to escape characters for inclusion in compiled regexes. \n"
  },
  "static.stringEscapes": {
    "name": "static.stringEscapes",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45138,
      "codeLine": 45139,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to escape characters for inclusion in compiled string literals. \n"
  },
  "static.escapeRegExpChar": {
    "type": "function",
    "name": "static.escapeRegExpChar",
    "params": [
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "chr",
        "description": "The matched character to escape."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "leadingChar",
        "description": "The capture group for a leading character."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "whitespaceChar",
        "description": "The capture group for a whitespace character."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45148,
      "codeLine": 45157,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "string"
        }
      ],
      "name": "whitespaceChar",
      "description": "The capture group for a whitespace character."
    },
    "returns": "{string} Returns the escaped character."
  },
  "static.getLength": {
    "name": "static.getLength",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45171,
      "codeLine": 45181,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n**Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\nthat affects Safari on at least iOS 8.1-8.3 ARM64.\n\n\n",
    "description": "Gets the \"length\" property value of `object`.\n",
    "private": true,
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "object",
      "description": "The object to query."
    },
    "returns": "{*} Returns the \"length\" value."
  },
  "static.getMatchData": {
    "type": "function",
    "name": "static.getMatchData",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45189,
      "codeLine": 45196,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Gets the propery names, values, and compare flags of `object`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "object",
      "description": "The object to query."
    },
    "returns": "{Array} Returns the match data of `object`."
  },
  "static.getNative": {
    "type": "function",
    "name": "static.getNative",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "key",
        "description": "The key of the method to get."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45211,
      "codeLine": 45219,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Gets the native function at `key` of `object`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "string"
        }
      ],
      "name": "key",
      "description": "The key of the method to get."
    },
    "returns": [
      "{*} Returns the function if it's native",
      "else `undefined`."
    ]
  },
  "static.indexOfNaN": {
    "type": "function",
    "name": "static.indexOfNaN",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to search."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "name": "fromIndex",
        "description": "The index to search from."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "fromRight",
        "description": "Specify iterating from right to left."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45227,
      "codeLine": 45236,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Gets the index at which the first occurrence of `NaN` is found in `array`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "name": "fromRight",
      "description": "Specify iterating from right to left."
    },
    "returns": [
      "{number} Returns the index of the matched `NaN`",
      "else `-1`."
    ]
  },
  "static.initCloneArray": {
    "type": "function",
    "name": "static.initCloneArray",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to clone."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45258,
      "codeLine": 45265,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Initializes an array clone.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "array",
      "description": "The array to clone."
    },
    "returns": "{Array} Returns the initialized clone."
  },
  "static.reFlags": {
    "name": "static.reFlags",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45300,
      "codeLine": 45301,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to match `RegExp` flags from their coerced string values. \n"
  },
  "static.initCloneByTag": {
    "type": "function",
    "name": "static.initCloneByTag",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to clone."
      },
      {
        "types": [
          {
            "type": "string"
          }
        ],
        "name": "tag",
        "description": "The `toStringTag` of the object to clone."
      },
      {
        "types": [
          {
            "type": "boolean"
          }
        ],
        "optional": true,
        "name": "isDeep",
        "description": "Specify a deep clone."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45303,
      "codeLine": 45315,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n**Note:** This function only supports cloning values with tags of\n`Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\n\n",
    "description": "Initializes an object clone based on its `toStringTag`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "name": "isDeep",
      "description": "Specify a deep clone."
    },
    "returns": "{Object} Returns the initialized clone."
  },
  "static.initCloneObject": {
    "type": "function",
    "name": "static.initCloneObject",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to clone."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45345,
      "codeLine": 45352,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Initializes an object clone.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "object",
      "description": "The object to clone."
    },
    "returns": "{Object} Returns the initialized clone."
  },
  "static.isArrayLike": {
    "type": "function",
    "name": "static.isArrayLike",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45366,
      "codeLine": 45373,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if `value` is array-like.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to check."
    },
    "returns": [
      "{boolean} Returns `true` if `value` is array-like",
      "else `false`."
    ]
  },
  "static.reIsUint": {
    "name": "static.reIsUint",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45380,
      "codeLine": 45381,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to detect unsigned integer values. \n"
  },
  "static.MAX_SAFE_INTEGER": {
    "name": "static.MAX_SAFE_INTEGER",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45466,
      "codeLine": 45470,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\nof an array-like value.\n"
  },
  "static.isIndex": {
    "type": "function",
    "name": "static.isIndex",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      },
      {
        "types": [
          {
            "type": "number"
          }
        ],
        "optional": true,
        "name": "length",
        "defaultValue": "MAX_SAFE_INTEGER",
        "description": "The upper bounds of a valid index."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45389,
      "codeLine": 45397,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if `value` is a valid array-like index.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "name": "length",
      "defaultValue": "MAX_SAFE_INTEGER",
      "description": "The upper bounds of a valid index."
    },
    "returns": [
      "{boolean} Returns `true` if `value` is a valid index",
      "else `false`."
    ]
  },
  "static.isIterateeCall": {
    "type": "function",
    "name": "static.isIterateeCall",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The potential iteratee value argument."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "index",
        "description": "The potential iteratee index or key argument."
      },
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "object",
        "description": "The potential iteratee object argument."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45410,
      "codeLine": 45419,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if the provided arguments are from an iteratee call.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "object",
      "description": "The potential iteratee object argument."
    },
    "returns": [
      "{boolean} Returns `true` if the arguments are from an iteratee call",
      "else `false`."
    ]
  },
  "static.reIsDeepProp": {
    "name": "static.reIsDeepProp",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45439,
      "codeLine": 45440,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to match property names within property paths. \n"
  },
  "static.isKey": {
    "type": "function",
    "name": "static.isKey",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "optional": true,
        "name": "object",
        "description": "The object to query keys on."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45443,
      "codeLine": 45451,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if `value` is a property name and not a property path.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "optional": true,
      "name": "object",
      "description": "The object to query keys on."
    },
    "returns": [
      "{boolean} Returns `true` if `value` is a property name",
      "else `false`."
    ]
  },
  "static.isLength": {
    "type": "function",
    "name": "static.isLength",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45472,
      "codeLine": 45481,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n**Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\n\n",
    "description": "Checks if `value` is a valid array-like length.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to check."
    },
    "returns": [
      "{boolean} Returns `true` if `value` is a valid length",
      "else `false`."
    ]
  },
  "static.isObjectLike": {
    "type": "function",
    "name": "static.isObjectLike",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45488,
      "codeLine": 45495,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Checks if `value` is object-like.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to check."
    },
    "returns": [
      "{boolean} Returns `true` if `value` is object-like",
      "else `false`."
    ]
  },
  "static.isStrictComparable": {
    "type": "function",
    "name": "static.isStrictComparable",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to check."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45504,
      "codeLine": 45512,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n equality comparisons, else `false`.\n\n",
    "description": "Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to check."
    },
    "returns": "{boolean} Returns `true` if `value` if suitable for strict"
  },
  "static.shimKeys": {
    "type": "function",
    "name": "static.shimKeys",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "object",
        "description": "The object to query."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45531,
      "codeLine": 45539,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "A fallback implementation of `Object.keys` which creates an array of the\nown enumerable property names of `object`.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "object",
      "description": "The object to query."
    },
    "returns": "{Array} Returns the array of property names."
  },
  "static.sortedUniq": {
    "type": "function",
    "name": "static.sortedUniq",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "array",
        "description": "The array to inspect."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "iteratee",
        "description": "The function invoked per iteration."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45562,
      "codeLine": 45571,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "An implementation of `_.uniq` optimized for sorted arrays without support\nfor callback shorthands and `this` binding.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "optional": true,
      "name": "iteratee",
      "description": "The function invoked per iteration."
    },
    "returns": "{Array} Returns the new duplicate-value-free array."
  },
  "static.toObject": {
    "type": "function",
    "name": "static.toObject",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to process."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45595,
      "codeLine": 45602,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Converts `value` to an object if it's not one.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to process."
    },
    "returns": "{Object} Returns the object."
  },
  "static.rePropName": {
    "name": "static.rePropName",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45612,
      "codeLine": 45613,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to match property names within property paths. \n"
  },
  "static.reEscapeChar": {
    "name": "static.reEscapeChar",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45615,
      "codeLine": 45616,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to match backslashes in property paths. \n"
  },
  "static.toPath": {
    "type": "function",
    "name": "static.toPath",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "value",
        "description": "The value to process."
      }
    ],
    "parent": "static",
    "src": {
      "line": 45618,
      "codeLine": 45625,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n\n",
    "description": "Converts `value` to property path array if it's not one.\n",
    "private": true,
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "value",
      "description": "The value to process."
    },
    "returns": "{Array} Returns the property path array."
  },
  "static.propertyIsEnumerable": {
    "name": "static.propertyIsEnumerable",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45777,
      "codeLine": 45778,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Native method references. \n"
  },
  "static.arrayTag": {
    "name": "static.arrayTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45808,
      "codeLine": 45809,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.funcTag": {
    "name": "static.funcTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45934,
      "codeLine": 45935,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.reIsHostCtor": {
    "name": "static.reIsHostCtor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45975,
      "codeLine": 45976,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to detect host constructors (Safari > 5). \n"
  },
  "static.fnToString": {
    "name": "static.fnToString",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45981,
      "codeLine": 45982,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to resolve the decompiled source of functions. \n"
  },
  "static.reIsNative": {
    "name": "static.reIsNative",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 45987,
      "codeLine": 45988,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to detect if a method is native. \n"
  },
  "static.numberTag": {
    "name": "static.numberTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46024,
      "codeLine": 46025,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.objectTag": {
    "name": "static.objectTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46099,
      "codeLine": 46100,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.regexpTag": {
    "name": "static.regexpTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46170,
      "codeLine": 46171,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.stringTag": {
    "name": "static.stringTag",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46207,
      "codeLine": 46208,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "`Object#toString` result references. \n"
  },
  "static.typedArrayTags": {
    "name": "static.typedArrayTags",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46271,
      "codeLine": 46272,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to identify `toStringTag` values of typed arrays. \n"
  },
  "static.reRegExpChars": {
    "name": "static.reRegExpChars",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 46727,
      "codeLine": 46731,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)\nand those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).\n"
  },
  "static.following": {
    "name": "static.following",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 47627,
      "codeLine": 47627,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "/b/\n"
  },
  "static.assert": {
    "name": "static.assert",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 50351,
      "codeLine": 50361,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThis source code is licensed under the BSD-style license found in the\nhttps://raw.github.com/facebook/regenerator/master/LICENSE file. An\nadditional grant of patent rights can be found in the PATENTS file in\nthe same directory.\n\n",
    "description": "Copyright (c) 2014, Facebook, Inc.\nAll rights reserved.\n"
  },
  "static.fromString": {
    "type": "function",
    "name": "static.fromString",
    "params": [
      {
        "name": "string",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "options",
        "description": "- Options object that configures printing.\n"
      }
    ],
    "parent": "static",
    "src": {
      "line": 53628,
      "codeLine": 53631,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "options",
      "description": "- Options object that configures printing.\n"
    }
  },
  "static.parse": {
    "name": "static.parse",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57255,
      "codeLine": 57259,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Parse a string of code into an augmented syntax tree suitable for\narbitrary modification and reprinting.\n"
  },
  "static.visit": {
    "name": "static.visit",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57264,
      "codeLine": 57277,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  recast.visit(ast, {\n    names: [],\n    visitIdentifier: function(path) {\n      var node = path.value;\n      this.visitor.names.push(node.name);\n      this.traverse(path);\n    }\n  });\n    \n",
    "description": "Traverse and potentially modify an abstract syntax tree using a\nconvenient visitor syntax:\n"
  },
  "static.print": {
    "name": "static.print",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57282,
      "codeLine": 57286,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Reprint a modified syntax tree using as much of the original source\ncode as possible.\n"
  },
  "static.prettyPrint": {
    "name": "static.prettyPrint",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57291,
      "codeLine": 57294,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Print without attempting to reuse any original source code.\n"
  },
  "static.types": {
    "name": "static.types",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57299,
      "codeLine": 57302,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Customized version of require(\"ast-types\").\n"
  },
  "static.run": {
    "name": "static.run",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 57307,
      "codeLine": 57310,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Convenient command-line interface (see e.g. example/add-braces).\n"
  },
  "static.NPp.needsParens": {
    "type": "function",
    "name": "static.NPp.needsParens",
    "params": [
      {
        "name": "assumeExpressionContext",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 58891,
      "codeLine": 58904,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nFor instance, in the expression `(1 + 2) * 3`, the BinaryExpression\nwhose operator is \"+\" needs parentheses, because `1 + 2 * 3` would\nparse differently.\n\nIf assumeExpressionContext === true, we don't worry about edge cases\nlike an anonymous FunctionExpression appearing lexically first in its\nenclosing statement and thus needing parentheses to avoid being parsed\nas a FunctionDeclaration with a missing name.\n\n",
    "description": "Determine whether this.node needs to be wrapped in parentheses in order\nfor a parser to reproduce the same local AST structure.\n"
  },
  "static.cleanUpNodesAfterPrune": {
    "type": "function",
    "name": "static.cleanUpNodesAfterPrune",
    "params": [
      {
        "name": "remainingNodePath",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 59179,
      "codeLine": 59182,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.\n"
  },
  "static.objectTypes": {
    "name": "static.objectTypes",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63450,
      "codeLine": 63451,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used to determine if values are of the language type `Object` \n"
  },
  "static.root": {
    "name": "static.root",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63456,
      "codeLine": 63457,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Used as a reference to the global object \n"
  },
  "static.oldRoot": {
    "name": "static.oldRoot",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63459,
      "codeLine": 63460,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Backup possible global object \n"
  },
  "static.freeExports": {
    "name": "static.freeExports",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63462,
      "codeLine": 63463,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Detect free variable `exports` \n"
  },
  "static.freeModule": {
    "name": "static.freeModule",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63465,
      "codeLine": 63466,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Detect free variable `module` \n"
  },
  "static.freeGlobal": {
    "name": "static.freeGlobal",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 63468,
      "codeLine": 63469,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Detect free variable `global` from Node.js or Browserified code and use it as `root` \n"
  },
  "static.ArraySet": {
    "type": "function",
    "name": "static.ArraySet",
    "params": [],
    "parent": "static",
    "src": {
      "line": 65067,
      "codeLine": 65073,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "A data structure which is a combination of an array and a set. Adding a new\nmember is O(1), testing for membership is O(1), and finding the index of an\nelement is O(1). Removing elements from the set is not supported. Only\nstrings are supported for membership.\n"
  },
  "static.ArraySet_fromArray": {
    "type": "function",
    "name": "static.ArraySet_fromArray",
    "params": [
      {
        "name": "aArray",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aAllowDuplicates",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65078,
      "codeLine": 65081,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Static method for creating ArraySet instances from an existing array.\n"
  },
  "static.ArraySet_size": {
    "type": "function",
    "name": "static.ArraySet_size",
    "params": [],
    "parent": "static",
    "src": {
      "line": 65089,
      "codeLine": 65095,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  \n",
    "description": "Return how many unique items are in this ArraySet. If duplicates have been\nadded, than those do not count towards the size.\n",
    "returns": "Number"
  },
  "static.ArraySet_add": {
    "type": "function",
    "name": "static.ArraySet_add",
    "params": [
      {
        "name": "aStr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aAllowDuplicates",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "String",
        "description": "aStr\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65099,
      "codeLine": 65104,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Add the given string to this set.\n",
    "_curParam": {
      "name": "String",
      "description": "aStr\n  "
    }
  },
  "static.ArraySet_has": {
    "type": "function",
    "name": "static.ArraySet_has",
    "params": [
      {
        "name": "aStr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "String",
        "description": "aStr\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65115,
      "codeLine": 65120,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Is the given string a member of this set?\n",
    "_curParam": {
      "name": "String",
      "description": "aStr\n  "
    }
  },
  "static.ArraySet_indexOf": {
    "type": "function",
    "name": "static.ArraySet_indexOf",
    "params": [
      {
        "name": "aStr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "String",
        "description": "aStr\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65125,
      "codeLine": 65130,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "What is the index of the given string in the array?\n",
    "_curParam": {
      "name": "String",
      "description": "aStr\n  "
    }
  },
  "static.ArraySet_at": {
    "type": "function",
    "name": "static.ArraySet_at",
    "params": [
      {
        "name": "aIdx",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "Number",
        "description": "aIdx\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65137,
      "codeLine": 65142,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "What is the element at the given index?\n",
    "_curParam": {
      "name": "Number",
      "description": "aIdx\n  "
    }
  },
  "static.ArraySet_toArray": {
    "type": "function",
    "name": "static.ArraySet_toArray",
    "params": [],
    "parent": "static",
    "src": {
      "line": 65149,
      "codeLine": 65154,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Returns the array representation of this set (which has the proper indices\nindicated by indexOf). Note that this is a copy of the internal array used\nfor storing the members so that no one can mess with internal state.\n"
  },
  "static.toVLQSigned": {
    "type": "function",
    "name": "static.toVLQSigned",
    "params": [
      {
        "name": "aValue",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65229,
      "codeLine": 65235,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n  2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n  \n",
    "description": "Converts from a two-complement value to a value where the sign bit is\nplaced in the least significant bit.  For example, as decimals:\n"
  },
  "static.fromVLQSigned": {
    "type": "function",
    "name": "static.fromVLQSigned",
    "params": [
      {
        "name": "aValue",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65241,
      "codeLine": 65247,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n  4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n  \n",
    "description": "Converts to a two-complement value from a value where the sign bit is\nplaced in the least significant bit.  For example, as decimals:\n"
  },
  "static.base64VLQ_encode": {
    "type": "function",
    "name": "static.base64VLQ_encode",
    "params": [
      {
        "name": "aValue",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65255,
      "codeLine": 65258,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Returns the base 64 VLQ encoded value.\n"
  },
  "static.base64VLQ_decode": {
    "type": "function",
    "name": "static.base64VLQ_decode",
    "params": [
      {
        "name": "aStr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aIndex",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aOutParam",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65278,
      "codeLine": 65282,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Decodes the next base 64 VLQ value from the given string and returns the\nvalue and the rest of the string via the out parameter.\n"
  },
  "static.encode": {
    "type": "function",
    "name": "static.encode",
    "params": [
      {
        "name": "number",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65324,
      "codeLine": 65327,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Encode an integer in the range of 0 to 63 to a single base 64 digit.\n"
  },
  "static.decode": {
    "type": "function",
    "name": "static.decode",
    "params": [
      {
        "name": "charCode",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65334,
      "codeLine": 65338,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Decode a single base 64 character code digit to an integer. Returns -1 on\nfailure.\n"
  },
  "static.recursiveSearch": {
    "type": "function",
    "name": "static.recursiveSearch",
    "params": [
      {
        "name": "aLow",
        "description": "Indices here and lower do not contain the needle."
      },
      {
        "name": "aHigh",
        "description": "Indices here and higher do not contain the needle."
      },
      {
        "name": "aNeedle",
        "description": "The element being searched for."
      },
      {
        "name": "aHaystack",
        "description": "The non-empty array being searched."
      },
      {
        "name": "aCompare",
        "description": "Function which takes two elements and returns -1, 0, or 1."
      },
      {
        "name": "aBias",
        "description": "Either 'binarySearch.GREATEST_LOWER_BOUND' or\n    'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n    closest element that is smaller than or greater than the one we are\n    searching for, respectively, if the exact element cannot be found.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65400,
      "codeLine": 65413,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Recursive implementation of binary search.\n",
    "_curParam": {
      "name": "aBias",
      "description": "Either 'binarySearch.GREATEST_LOWER_BOUND' or\n    'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n    closest element that is smaller than or greater than the one we are\n    searching for, respectively, if the exact element cannot be found.\n  "
    }
  },
  "static.search": {
    "type": "function",
    "name": "static.search",
    "params": [
      {
        "name": "aNeedle",
        "description": "The element you are looking for."
      },
      {
        "name": "aHaystack",
        "description": "The array that is being searched."
      },
      {
        "name": "aCompare",
        "description": "A function which takes the needle and an element in the\n    array and returns -1, 0, or 1 depending on whether the needle is less\n    than, equal to, or greater than the element, respectively."
      },
      {
        "name": "aBias",
        "description": "Either 'binarySearch.GREATEST_LOWER_BOUND' or\n    'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n    closest element that is smaller than or greater than the one we are\n    searching for, respectively, if the exact element cannot be found.\n    Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65460,
      "codeLine": 65478,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "This is an implementation of binary search which will always try and return\nthe index of the closest element if there is no exact hit. This is because\nmappings between original and generated line/col pairs are single points,\nand there is an implicit region between each of them, so a miss just means\nthat you aren't on the very start of a region.\n",
    "_curParam": {
      "name": "aBias",
      "description": "Either 'binarySearch.GREATEST_LOWER_BOUND' or\n    'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n    closest element that is smaller than or greater than the one we are\n    searching for, respectively, if the exact element cannot be found.\n    Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n  "
    }
  },
  "static.generatedPositionAfter": {
    "type": "function",
    "name": "static.generatedPositionAfter",
    "params": [
      {
        "name": "mappingA",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "mappingB",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65518,
      "codeLine": 65522,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Determine whether mappingB is after mappingA with respect to generated\nposition.\n"
  },
  "static.MappingList": {
    "type": "function",
    "name": "static.MappingList",
    "params": [],
    "parent": "static",
    "src": {
      "line": 65532,
      "codeLine": 65537,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "A data structure to provide a sorted view of accumulated mappings in a\nperformance conscious manner. It trades a neglibable overhead in general\ncase for a large speedup in case of mappings being added in order.\n"
  },
  "static.unsortedForEach": {
    "name": "static.unsortedForEach",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 65544,
      "codeLine": 65550,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nNOTE: The order of the mappings is NOT guaranteed.\n  \n",
    "description": "Iterate through internal items. This method takes the same arguments that\n`Array.prototype.forEach` takes.\n"
  },
  "static.MappingList_add": {
    "type": "function",
    "name": "static.MappingList_add",
    "params": [
      {
        "name": "aMapping",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "Object",
        "description": "aMapping\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65555,
      "codeLine": 65560,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Add the given source mapping.\n",
    "_curParam": {
      "name": "Object",
      "description": "aMapping\n  "
    }
  },
  "static.MappingList_toArray": {
    "type": "function",
    "name": "static.MappingList_toArray",
    "params": [],
    "parent": "static",
    "src": {
      "line": 65571,
      "codeLine": 65580,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nWARNING: This method returns internal data without copying, for\nperformance. The return value must NOT be mutated, and should be treated as\nan immutable borrow. If you want to take ownership, you must make your own\ncopy.\n  \n",
    "description": "Returns the flat, sorted array of mappings. The mappings are sorted by\ngenerated position.\n"
  },
  "static.swap": {
    "type": "function",
    "name": "static.swap",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "ary",
        "description": "\n       The array."
      },
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "x",
        "description": "\n       The index of the first item."
      },
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "y",
        "description": "\n       The index of the second item.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65614,
      "codeLine": 65624,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Swap the elements indexed by `x` and `y` in the array `ary`.\n",
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "name": "y",
      "description": "\n       The index of the second item.\n  "
    }
  },
  "static.randomIntInRange": {
    "type": "function",
    "name": "static.randomIntInRange",
    "params": [
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "low",
        "description": "\n       The lower bound on the range."
      },
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "high",
        "description": "\n       The upper bound on the range.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65630,
      "codeLine": 65638,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Returns a random integer within the range `low .. high` inclusive.\n",
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "name": "high",
      "description": "\n       The upper bound on the range.\n  "
    }
  },
  "static.doQuickSort": {
    "type": "function",
    "name": "static.doQuickSort",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "ary",
        "description": "\n       An array to sort."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "comparator",
        "description": "\n       Function to use to compare two items."
      },
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "p",
        "description": "\n       Start index of the array"
      },
      {
        "types": [
          {
            "type": "Number"
          }
        ],
        "name": "r",
        "description": "\n       End index of the array\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65642,
      "codeLine": 65654,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "The Quick Sort algorithm.\n",
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "name": "r",
      "description": "\n       End index of the array\n  "
    }
  },
  "static.quickSort": {
    "type": "function",
    "name": "static.quickSort",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "ary",
        "description": "\n       An array to sort."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "name": "comparator",
        "description": "\n       Function to use to compare two items.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 65700,
      "codeLine": 65708,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Sort the given array in-place with the given comparator function.\n",
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "comparator",
      "description": "\n       Function to use to compare two items.\n  "
    }
  },
  "static._version": {
    "name": "static._version",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66581,
      "codeLine": 66584,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "The version of the source mapping spec that we are consuming.\n"
  },
  "static._parseMappings": {
    "name": "static._parseMappings",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66735,
      "codeLine": 66740,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Parse the mappings in a string in to a data structure which we can easily\nquery (the ordered arrays in the `this.__generatedMappings` and\n`this.__originalMappings` properties).\n"
  },
  "static.eachMapping": {
    "name": "static.eachMapping",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 65826,
      "codeLine": 65842,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Iterate over each mapping between an original source/line/column and a\ngenerated line/column in this source map.\n",
    "params": [
      {
        "name": "Function",
        "description": "aCallback\n       The function that is called with each mapping."
      },
      {
        "name": "Object",
        "description": "aContext\n       Optional. If specified, this object will be the value of `this` every\n       time that `aCallback` is called."
      },
      {
        "name": "aOrder",
        "description": "\n       Either `SourceMapConsumer.GENERATED_ORDER` or\n       `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n       iterate over the mappings sorted by the generated file's line/column\n       order or the original's source/line/column order, respectively. Defaults to\n       `SourceMapConsumer.GENERATED_ORDER`.\n  "
      }
    ],
    "_curParam": {
      "name": "aOrder",
      "description": "\n       Either `SourceMapConsumer.GENERATED_ORDER` or\n       `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n       iterate over the mappings sorted by the generated file's line/column\n       order or the original's source/line/column order, respectively. Defaults to\n       `SourceMapConsumer.GENERATED_ORDER`.\n  "
    }
  },
  "static.allGeneratedPositionsFor": {
    "name": "static.allGeneratedPositionsFor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 65876,
      "codeLine": 65895,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThe only argument is an object with the following properties:\n\n  - source: The filename of the original source.\n  - line: The line number in the original source.\n  - column: Optional. the column number in the original source.\n\nand an array of objects is returned, each with the following properties:\n\n  - line: The line number in the generated source, or null.\n  - column: The column number in the generated source, or null.\n  \n",
    "description": "Returns all generated line and column information for the original source,\nline, and column provided. If no column is provided, returns all mappings\ncorresponding to a either the line we are searching for or the next\nclosest line that has any mappings. Otherwise, returns all mappings\ncorresponding to the given line and either the column we are searching for\nor the next closest column that has any offsets.\n"
  },
  "static.BasicSourceMapConsumer": {
    "type": "function",
    "name": "static.BasicSourceMapConsumer",
    "params": [
      {
        "name": "aSourceMap",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 65970,
      "codeLine": 66000,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThe only parameter is the raw source map (either as a JSON string, or\nalready parsed to an object). According to the spec, source maps have the\nfollowing attributes:\n\n  - version: Which version of the source map spec this map is following.\n  - sources: An array of URLs to the original source files.\n  - names: An array of identifiers which can be referrenced by individual mappings.\n  - sourceRoot: Optional. The URL root from which all sources are relative.\n  - sourcesContent: Optional. An array of contents of the original source files.\n  - mappings: A string of base64 VLQs which contain the actual mappings.\n  - file: Optional. The generated file this source map is associated with.\n\nHere is an example source map, taken from the source map spec[0]:\n\n    {\n      version : 3,\n      file: \"out.js\",\n      sourceRoot : \"\",\n      sources: [\"foo.js\", \"bar.js\"],\n      names: [\"src\", \"maps\", \"are\", \"fun\"],\n      mappings: \"AA,AB;;ABCDE;\"\n    }\n\n[0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n  \n",
    "description": "A BasicSourceMapConsumer instance represents a parsed source map which we can\nquery for information about the original file positions by giving it a file\nposition in the generated source.\n"
  },
  "static.fromSourceMap": {
    "name": "static.fromSourceMap",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66833,
      "codeLine": 66838,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Creates a new SourceMapGenerator based on a SourceMapConsumer\n",
    "params": [
      {
        "name": "aSourceMapConsumer",
        "description": "The SourceMap.\n  "
      }
    ],
    "_curParam": {
      "name": "aSourceMapConsumer",
      "description": "The SourceMap.\n  "
    },
    "returns": "BasicSourceMapConsumer"
  },
  "static.Mapping": {
    "type": "function",
    "name": "static.Mapping",
    "params": [],
    "parent": "static",
    "src": {
      "line": 66112,
      "codeLine": 66115,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Provide the JIT with a nice shape / hidden class.\n"
  },
  "static._findMapping": {
    "name": "static._findMapping",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66233,
      "codeLine": 66237,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Find the mapping that best matches the hypothetical \"needle\" mapping that\nwe are searching for in the given \"haystack\" of mappings.\n"
  },
  "static.computeColumnSpans": {
    "name": "static.computeColumnSpans",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66257,
      "codeLine": 66261,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Compute the last column for each generated mapping. The last column is\ninclusive.\n"
  },
  "static.originalPositionFor": {
    "name": "static.originalPositionFor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66601,
      "codeLine": 66616,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  - line: The line number in the generated source.\n  - column: The column number in the generated source.\n\nand an object is returned with the following properties:\n\n  - source: The original source file, or null.\n  - line: The line number in the original source, or null.\n  - column: The column number in the original source, or null.\n  - name: The original identifier, or null.\n  \n",
    "description": "Returns the original source, line, and column information for the generated\nsource's line and column positions provided. The only argument is an object\nwith the following properties:\n"
  },
  "static.hasContentsOfAllSources": {
    "name": "static.hasContentsOfAllSources",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66657,
      "codeLine": 66661,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Return true if we have the source content for every source in the source\nmap, false otherwise.\n"
  },
  "static.sourceContentFor": {
    "name": "static.sourceContentFor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66668,
      "codeLine": 66673,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Returns the original source content. The only argument is the url of the\noriginal source file. Returns null if no original source content is\navailable.\n"
  },
  "static.generatedPositionFor": {
    "name": "static.generatedPositionFor",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66691,
      "codeLine": 66705,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  - source: The filename of the original source.\n  - line: The line number in the original source.\n  - column: The column number in the original source.\n\nand an object is returned with the following properties:\n\n  - line: The line number in the generated source, or null.\n  - column: The column number in the generated source, or null.\n  \n",
    "description": "Returns the generated line and column information for the original source,\nline, and column positions provided. The only argument is an object with\nthe following properties:\n"
  },
  "static.IndexedSourceMapConsumer": {
    "type": "function",
    "name": "static.IndexedSourceMapConsumer",
    "params": [
      {
        "name": "aSourceMap",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 66485,
      "codeLine": 66530,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nThe only parameter is a raw source map (either as a JSON string, or already\nparsed to an object). According to the spec for indexed source maps, they\nhave the following attributes:\n\n  - version: Which version of the source map spec this map is following.\n  - file: Optional. The generated file this source map is associated with.\n  - sections: A list of section definitions.\n\nEach value under the \"sections\" field has two fields:\n  - offset: The offset into the original specified at which this section\n      begins to apply, defined as an object with a \"line\" and \"column\"\n      field.\n  - map: A source map definition. This source map could also be indexed,\n      but doesn't have to be.\n\nInstead of the \"map\" field, it's also possible to have a \"url\" field\nspecifying a URL to retrieve a source map from, but that's currently\nunsupported.\n\nHere's an example source map, taken from the source map spec[0], but\nmodified to omit a section which uses the \"url\" field.\n\n {\n   version : 3,\n   file: \"app.js\",\n   sections: [{\n     offset: {line:100, column:10},\n     map: {\n       version : 3,\n       file: \"section.js\",\n       sources: [\"foo.js\", \"bar.js\"],\n       names: [\"src\", \"maps\", \"are\", \"fun\"],\n       mappings: \"AAAA,E;;ABCDE;\"\n     }\n   }],\n }\n\n[0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n  \n",
    "description": "An IndexedSourceMapConsumer instance represents a parsed source map which\nwe can query for information. It differs from BasicSourceMapConsumer in\nthat it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\ninput.\n"
  },
  "static.SourceMapGenerator": {
    "type": "function",
    "name": "static.SourceMapGenerator",
    "params": [
      {
        "name": "aArgs",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 66810,
      "codeLine": 66818,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  - file: The filename of the generated source.\n  - sourceRoot: A root for all relative URLs in this source map.\n  \n",
    "description": "An instance of the SourceMapGenerator represents a source map which is\nbeing built incrementally. You may pass an object with the following\nproperties:\n"
  },
  "static.addMapping": {
    "name": "static.addMapping",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66880,
      "codeLine": 66890,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  - generated: An object with the generated line and column positions.\n  - original: An object with the original line and column positions.\n  - source: The original source file (relative to the sourceRoot).\n  - name: An optional original token name for this mapping.\n  \n",
    "description": "Add a single mapping from original source line and column to the generated\nsource's line and column for this source map being created. The mapping\nobject should have the following properties:\n"
  },
  "static.setSourceContent": {
    "name": "static.setSourceContent",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67475,
      "codeLine": 67482,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Set the source content for a source file. This will be added to the SourceMapGenerator\nin the sourcesContent field.\n",
    "params": [
      {
        "name": "aSourceFile",
        "description": "The filename of the source file"
      },
      {
        "name": "aSourceContent",
        "description": "The content of the source file\n  "
      }
    ],
    "_curParam": {
      "name": "aSourceContent",
      "description": "The content of the source file\n  "
    }
  },
  "static.applySourceMap": {
    "name": "static.applySourceMap",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 66946,
      "codeLine": 66962,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Applies the mappings of a sub-source-map for a specific source file to the\nsource map being generated. Each mapping to the supplied source file is\nrewritten using the supplied source map. Note: The resolution for the\nresulting mappings is the minimium of this map and the supplied map.\n",
    "params": [
      {
        "name": "aSourceMapConsumer",
        "description": "The source map to be applied."
      },
      {
        "name": "aSourceFile",
        "description": "Optional. The filename of the source file.\n       If omitted, SourceMapConsumer's file property will be used."
      },
      {
        "name": "aSourceMapPath",
        "description": "Optional. The dirname of the path to the source map\n       to be applied. If relative, it is relative to the SourceMapConsumer.\n       This parameter is needed when the two source maps aren't in the same\n       directory, and the source map to be applied contains relative source\n       paths. If so, those relative source paths need to be rewritten\n       relative to the SourceMapGenerator.\n  "
      }
    ],
    "_curParam": {
      "name": "aSourceMapPath",
      "description": "Optional. The dirname of the path to the source map\n       to be applied. If relative, it is relative to the SourceMapConsumer.\n       This parameter is needed when the two source maps aren't in the same\n       directory, and the source map to be applied contains relative source\n       paths. If so, those relative source paths need to be rewritten\n       relative to the SourceMapGenerator.\n  "
    }
  },
  "static._validateMapping": {
    "name": "static._validateMapping",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67039,
      "codeLine": 67050,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n  1. Just the generated position.\n  2. The Generated position, original position, and original source.\n  3. Generated and original position, original source, as well as a name\n     token.\n\nTo maintain consistency, we validate that any new mapping being added falls\nin to one of these categories.\n  \n",
    "description": "A mapping can have one of the three levels of data:\n"
  },
  "static._serializeMappings": {
    "name": "static._serializeMappings",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67077,
      "codeLine": 67081,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Serialize the accumulated mappings in to the stream of base 64 VLQs\nspecified by the source map format.\n"
  },
  "static.toJSON": {
    "name": "static.toJSON",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67158,
      "codeLine": 67161,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Externalize the source map.\n"
  },
  "static.toString": {
    "name": "static.toString",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67182,
      "codeLine": 67185,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Render the source map being generated to a string.\n"
  },
  "static.SourceNode": {
    "type": "function",
    "name": "static.SourceNode",
    "params": [
      {
        "name": "aLine",
        "description": "The original line number."
      },
      {
        "name": "aColumn",
        "description": "The original column number."
      },
      {
        "name": "aSource",
        "description": "The original source's filename."
      },
      {
        "name": "aChunks",
        "description": "Optional. An array of strings which are snippets of\n       generated JS, or other SourceNodes."
      },
      {
        "name": "aName",
        "description": "The original identifier.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67221,
      "codeLine": 67233,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "SourceNodes provide a way to abstract over interpolating/concatenating\nsnippets of generated JavaScript source code while maintaining the line and\ncolumn information associated with the original source code.\n",
    "_curParam": {
      "name": "aName",
      "description": "The original identifier.\n  "
    }
  },
  "static.fromStringWithSourceMap": {
    "name": "static.fromStringWithSourceMap",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67244,
      "codeLine": 67252,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Creates a SourceNode from generated code and a SourceMapConsumer.\n",
    "params": [
      {
        "name": "aGeneratedCode",
        "description": "The generated code"
      },
      {
        "name": "aSourceMapConsumer",
        "description": "The SourceMap for the generated code"
      },
      {
        "name": "aRelativePath",
        "description": "Optional. The path that relative sources in the\n       SourceMapConsumer should be relative to.\n  "
      }
    ],
    "_curParam": {
      "name": "aRelativePath",
      "description": "Optional. The path that relative sources in the\n       SourceMapConsumer should be relative to.\n  "
    }
  },
  "static.SourceNode_add": {
    "type": "function",
    "name": "static.SourceNode_add",
    "params": [
      {
        "name": "aChunk",
        "description": "A string snippet of generated JS code, another instance of\n       SourceNode, or an array where each member is one of those things.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67359,
      "codeLine": 67365,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Add a chunk of generated JS to this source node.\n",
    "_curParam": {
      "name": "aChunk",
      "description": "A string snippet of generated JS code, another instance of\n       SourceNode, or an array where each member is one of those things.\n  "
    }
  },
  "static.SourceNode_prepend": {
    "type": "function",
    "name": "static.SourceNode_prepend",
    "params": [
      {
        "name": "aChunk",
        "description": "A string snippet of generated JS code, another instance of\n       SourceNode, or an array where each member is one of those things.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67384,
      "codeLine": 67390,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Add a chunk of generated JS to the beginning of this source node.\n",
    "_curParam": {
      "name": "aChunk",
      "description": "A string snippet of generated JS code, another instance of\n       SourceNode, or an array where each member is one of those things.\n  "
    }
  },
  "static.SourceNode_walk": {
    "type": "function",
    "name": "static.SourceNode_walk",
    "params": [
      {
        "name": "aFn",
        "description": "The traversal function.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67407,
      "codeLine": 67414,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Walk over the tree of JS snippets in this node and its children. The\nwalking function is called once for each snippet of JS and is passed that\nsnippet and the its original associated source's line/column location.\n",
    "_curParam": {
      "name": "aFn",
      "description": "The traversal function.\n  "
    }
  },
  "static.SourceNode_join": {
    "type": "function",
    "name": "static.SourceNode_join",
    "params": [
      {
        "name": "aSep",
        "description": "The separator.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67432,
      "codeLine": 67438,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\neach of `this.children`.\n",
    "_curParam": {
      "name": "aSep",
      "description": "The separator.\n  "
    }
  },
  "static.SourceNode_replaceRight": {
    "type": "function",
    "name": "static.SourceNode_replaceRight",
    "params": [
      {
        "name": "aPattern",
        "description": "The pattern to replace."
      },
      {
        "name": "aReplacement",
        "description": "The thing to replace the pattern with.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67454,
      "codeLine": 67461,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Call String.prototype.replace on the very right-most source snippet. Useful\nfor trimming whitespace from the end of a source node, etc.\n",
    "_curParam": {
      "name": "aReplacement",
      "description": "The thing to replace the pattern with.\n  "
    }
  },
  "static.walkSourceContents": {
    "name": "static.walkSourceContents",
    "type": "property",
    "parent": "static",
    "src": {
      "line": 67487,
      "codeLine": 67493,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Walk over the tree of SourceNodes. The walking function is called for each\nsource file content and is passed the filename and source content.\n",
    "params": [
      {
        "name": "aFn",
        "description": "The traversal function.\n  "
      }
    ],
    "_curParam": {
      "name": "aFn",
      "description": "The traversal function.\n  "
    }
  },
  "static.SourceNode_toString": {
    "type": "function",
    "name": "static.SourceNode_toString",
    "params": [],
    "parent": "static",
    "src": {
      "line": 67507,
      "codeLine": 67511,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Return the string representation of this source node. Walks over the tree\nand concatenates all the various snippets together to one string.\n"
  },
  "static.SourceNode_toStringWithSourceMap": {
    "type": "function",
    "name": "static.SourceNode_toStringWithSourceMap",
    "params": [
      {
        "name": "aArgs",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 67519,
      "codeLine": 67523,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Returns the string representation of this source node along with a source\nmap.\n"
  },
  "static.getArg": {
    "type": "function",
    "name": "static.getArg",
    "params": [
      {
        "name": "aArgs",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aName",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "aDefaultValue",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "args",
        "description": "The object we are extracting values from"
      },
      {
        "name": "name",
        "description": "The name of the property we are getting."
      },
      {
        "name": "defaultValue",
        "description": "An optional value to return if the property is missing\nfrom the object. If this is not specified and the property is missing, an\nerror will be thrown.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67622,
      "codeLine": 67632,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "This is a helper function for getting values from parameter/options\nobjects.\n",
    "_curParam": {
      "name": "defaultValue",
      "description": "An optional value to return if the property is missing\nfrom the object. If this is not specified and the property is missing, an\nerror will be thrown.\n  "
    }
  },
  "static.normalize": {
    "type": "function",
    "name": "static.normalize",
    "params": [
      {
        "name": "aPath",
        "description": "The path or url to normalize.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67683,
      "codeLine": 67694,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n- Replaces consequtive slashes with one slash.\n- Removes unnecessary '.' parts.\n- Removes unnecessary '<dir>/..' parts.\n\nBased on code in the Node.js 'path' core module.\n\n",
    "description": "Normalizes a path, or the path portion of a URL:\n",
    "_curParam": {
      "name": "aPath",
      "description": "The path or url to normalize.\n  "
    }
  },
  "static.join": {
    "type": "function",
    "name": "static.join",
    "params": [
      {
        "name": "aRoot",
        "description": "The root path or URL."
      },
      {
        "name": "aPath",
        "description": "The path or URL to be joined with the root.\n\n- If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n  scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n  first.\n- Otherwise aPath is a path. If aRoot is a URL, then its path portion\n  is updated with the result and aRoot is returned. Otherwise the result\n  is returned.\n  - If aPath is absolute, the result is aPath.\n  - Otherwise the two paths are joined with a slash.\n- Joining for example 'http://' and 'www.example.com' is also supported.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67739,
      "codeLine": 67755,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Joins two paths/URLs.\n",
    "_curParam": {
      "name": "aPath",
      "description": "The path or URL to be joined with the root.\n\n- If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n  scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n  first.\n- Otherwise aPath is a path. If aRoot is a URL, then its path portion\n  is updated with the result and aRoot is returned. Otherwise the result\n  is returned.\n  - If aPath is absolute, the result is aPath.\n  - Otherwise the two paths are joined with a slash.\n- Joining for example 'http://' and 'www.example.com' is also supported.\n  "
    }
  },
  "static.relative": {
    "type": "function",
    "name": "static.relative",
    "params": [
      {
        "name": "aRoot",
        "description": "The root path or URL."
      },
      {
        "name": "aPath",
        "description": "The path or URL to be made relative to aRoot.\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67798,
      "codeLine": 67804,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Make a path relative to a URL or another path.\n",
    "_curParam": {
      "name": "aPath",
      "description": "The path or URL to be made relative to aRoot.\n  "
    }
  },
  "static.toSetString": {
    "type": "function",
    "name": "static.toSetString",
    "params": [
      {
        "name": "aStr",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "String",
        "description": "aStr\n  "
      }
    ],
    "parent": "static",
    "src": {
      "line": 67838,
      "codeLine": 67847,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nSee https://github.com/mozilla/source-map/pull/31 and\nhttps://github.com/mozilla/source-map/issues/30\n\n",
    "description": "Because behavior goes wacky when you set `__proto__` on objects, we\nhave to prefix all the strings in our set with an arbitrary character.\n",
    "_curParam": {
      "name": "String",
      "description": "aStr\n  "
    }
  },
  "static.compareByOriginalPositions": {
    "type": "function",
    "name": "static.compareByOriginalPositions",
    "params": [
      {
        "name": "mappingA",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "mappingB",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "onlyCompareOriginal",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 67857,
      "codeLine": 67865,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nOptionally pass in `true` as `onlyCompareGenerated` to consider two\nmappings with the same original source/line/column, but different generated\nline and column the same. Useful when searching for a mapping with a\nstubbed out mapping.\n  \n",
    "description": "Comparator between two mappings where the original positions are compared.\n"
  },
  "static.compareByGeneratedPositionsDeflated": {
    "type": "function",
    "name": "static.compareByGeneratedPositionsDeflated",
    "params": [
      {
        "name": "mappingA",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "mappingB",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "onlyCompareGenerated",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 67895,
      "codeLine": 67904,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\nOptionally pass in `true` as `onlyCompareGenerated` to consider two\nmappings with the same generated line and column, but different\nsource/name/original line and column the same. Useful when searching for a\nmapping with a stubbed out mapping.\n  \n",
    "description": "Comparator between two mappings with deflated source and name indices where\nthe generated positions are compared.\n"
  },
  "static.compareByGeneratedPositionsInflated": {
    "type": "function",
    "name": "static.compareByGeneratedPositionsInflated",
    "params": [
      {
        "name": "mappingA",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "mappingB",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 67946,
      "codeLine": 67950,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "  \n",
    "description": "Comparator between two mappings with inflated source and name strings where\nthe generated positions are compared.\n"
  },
  "static.amdefine": {
    "type": "function",
    "name": "static.amdefine",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "module",
        "description": "the \"module\" object that is defined by Node for the\ncurrent module."
      },
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          }
        ],
        "optional": true,
        "name": "requireFn",
        "description": ". Node's require function for the current module.\nIt only needs to be passed in Node versions before 0.5, when module.require\ndid not exist."
      }
    ],
    "parent": "static",
    "src": {
      "line": 67994,
      "codeLine": 68004,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "\n",
    "description": "Creates a define for node.\nmodule.\n",
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "optional": true,
      "name": "requireFn",
      "description": ". Node's require function for the current module.\nIt only needs to be passed in Node versions before 0.5, when module.require\ndid not exist."
    },
    "returns": "{Function} a define function that is usable for the current node"
  },
  "static.trimDots": {
    "type": "function",
    "name": "static.trimDots",
    "params": [
      {
        "types": [
          {
            "type": "Array",
            "options": []
          }
        ],
        "name": "ary",
        "description": "the array of path segments.\n    "
      }
    ],
    "parent": "static",
    "src": {
      "line": 68012,
      "codeLine": 68021,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "",
    "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.\n",
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "options": []
        }
      ],
      "name": "ary",
      "description": "the array of path segments.\n    "
    }
  },
  "static.makeNormalize": {
    "type": "function",
    "name": "static.makeNormalize",
    "params": [
      {
        "name": "relName",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "static",
    "src": {
      "line": 68065,
      "codeLine": 68069,
      "path": "node_modules/steal/ext/babel.js"
    },
    "body": "    \n",
    "description": "Create the normalize() function passed to a loader plugin's\nnormalize method.\n"
  },
  "steal-tools.build": {
    "src": {
      "path": "node_modules/steal-tools/doc/build.md"
    },
    "body": "\n\n## Use\n\nThe following uses steal-tool's `build` method to programatically build out the \"my-app\"\nmodule as bundles.    \n\n    var stealTools = require(\"steal-tools\");\n    \n    var promise = stealTools.build({\n      main: \"my-app\",\n      config: __dirname+\"/package.json!npm\"\n    },{\n      // the following are the default values, so you don't need\n      // to write them.\n      minify: true,\n      debug: true\n    });\n\nThis will build bundles like:\n\n    /dist/bundles/\n      my-app.js\n      my-app.css\n\nTo load the bundles, a html page should have a script tag like:\n\n```\n<script src='./node_modules/steal/steal.production.js' \n        main='my-app'\n        env='production'></script>\n```\n\n## bundleSteal\n\nSetting the `bundleSteal` option to `true` includes _steal.js_ and the [System.configMain] in each\nmain bundle.  This means one fewer http request.  \n\n    var promise = stealTools.build({\n      main: \"my-app\",\n      config: __dirname+\"/package.json!npm\"\n    },{\n      bundleSteal: true\n    });\n\nThis will build bundles like:\n\n    /dist/bundles/\n      my-app.js\n      my-app.css\n\nTo load the bundles, a html page should have a script tag like:\n\n```\n<script src='./dist/bundles/my-app.js' \n        config='../../package.json!npm'></script>\n```\n\nThe [System.configPath] must be given if a [System.configMain config file] is in the bundle;\notherwise, [System.baseURL] should be set like:\n\n```\n<script src='./dist/bundles/my-app.js' \n        base-url='../../'></script>\n```\n\n\n## bundlesPath\n\nThe `bundlesPath` option specifies where the bundles should be looked for\nrelative to [System.baseURL].  It will also change where the bundles are written out.\n\n    var promise = stealTools.build({\n      main: \"my-app\",\n      config: __dirname+\"/package.json!npm\",\n      bundlesPath: \"mobile/assets\"\n    },{\n      bundleSteal: true\n    });\n\nThis will build bundles like:\n\n    /mobile/assets/\n      my-app.js\n      my-app.css\n\nTo load the bundles, a html page should have a script tag like:\n\n```\n<script src='../mobile/assets/my-app.js' \n        config='../package.json!npm'\n        bundles-path='mobile/assets'\n        ></script>\n```\n\n> Notice: bundlesPath should typically not be set in your\nconfig file. Instead, it should be set when `.build` is called\nand as an attribute in the script that loads _steal.js_.\n\n## <a name=\"ignore\"></a>ignore\n\nThe `ignore` option specifies which modules exclude from being bundled.\nA typical scenario for using `ignore` is if you want a dependent module loaded from a CDN.\nThe browser can load e.g. jQuery from the browsers cache. This saves traffic and also speed up your site.\n\nIf you exclude a module from the bundled file, you have to make sure, that in the [production environment configuration](http://stealjs.com/docs/System.envs.html)\nthe module is:\n\n* ... [mapped to the pseudo-module @empty](http://stealjs.com/docs/System.map.html#ignoring-optional-dependencies) if you don't need it in production environment\n\n    ```\n    \"envs\": {\n        \"window-production\": {\n            \"map\": {\n                \"MODULENAME': \"@empty\"\n            }\n        }\n    }\n    ```\n\n* ... [configured](http://stealjs.com/docs/steal.html#path-configure) to the [right location](http://stealjs.com/docs/System.paths.html) of the module e.g. a CDN\n\n    ```\n    \"envs\": {\n        \"production\": {\n            \"paths\": {\n                \"jquery': \"//code.jquery.com/jquery-2.2.1.min.js\"\n            }\n        }\n    }\n    ```\n\n\n## Multi-page use\n\nThe following uses steal-tool's `build` method to programatically build out the \"login\" and \"homepage\"\nmodules as bundles.    \n\n    var stealTools = require(\"steal-tools\");\n    \n    var promise = stealTools.build({\n      main: [\"login\",\"homepage\"],\n      config: __dirname+\"/config.js\"\n    },{\n      bundleSteal: true,\n      // the following are the default values, so you don't need\n      // to write them.\n      minify: true,\n      debug: false,\n      quiet: false,\n      bundleDepth: 3,\n      mainDepth: 3\n    });\n\nAssuming that \"login\" and \"homepage\" need the same modules, the following bundles will be created:\n\n    /dist/bundles/\n      homepage.js\n      homepage.css\n      login.js\n      login.css\n      login_homepage.css\n      login_homepage.js\n      \nTo load the homepage JS, CSS and the shared JS and CSS, an html page should have a script tag like:\n\n```\n<script src='./node_modules/steal/steal.js' \n        main='homepage'\n        env='production'>\n```\n\n## Source Maps\n\nSource maps provide a way to debug your bundled application. Using steal-tool's `build` you can generate source maps like so:\n\n    var stealTools = require(\"steal-tools\");\n\n    stealTools.build({\n        config: \"package.json!npm\",\n        main: \"app\"\n    }, {\n        sourceMaps: true\n    });\n\nThis will build out your application to `dist/bundles/app.js` and a corresponding source map will be at `dist/bundles/app.js.map`. Now load your application:\n\n```html\n<script src=\"./node_modules/steal/steal.js\"\n    env=\"production\"\n    main=\"app\"></script>\n```\n\nAnd look in your debugger tools, the original sources should be shown and are debuggable.\n\nThese source maps are light-weight because they only include mappings back to the original sources; the original source files are still loaded by the browser. If you have a production environment where the original source files cannot be accessed, or you want to limit the number of requests made, you can set the `sourceMapsContent` option to `true` and the original sources will be packaged along in the `app.js.map` file.\n\n",
    "description": "\nBuild a module and all of its dependencies and, optionally, other bundles to progressively load.\n",
    "title": "build",
    "name": "steal-tools.build",
    "type": "function",
    "parent": "steal-tools.JS",
    "signatures": [
      {
        "code": "stealTools.build(config, options)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "steal-tools.SystemConfig",
                "options": [
                  {
                    "name": "bundlesPath",
                    "description": "Specifies the path where the production bundles should be \nplaced. Often, this is the same value as [System.bundlesPath]. By default, the location is `\"dist/bundles\"`.\n\nThe path can be specified in three ways:\n\n - Absolute path - bundlesPath starts with `/`, or matches _/^\\w+:[\\/\\\\]/_, like:`__dirname+\"/place\"`, or `\"c:\\my\\bundles\"`.\n - Relative to `process.cwd()` - bundlesPath starts with `./`, like `\"./place\"`.\n - Relative to [System.baseURL baseURL] - bundlesPath looks like: \"packages\", \"foo/bar\".\n \n",
                    "types": [
                      {
                        "type": "String"
                      }
                    ],
                    "optional": true,
                    "defaultValue": "'dist/bundle'"
                  }
                ]
              }
            ],
            "name": "config",
            "description": "\n\nSpecifies configuration values to set on the System loader.  In addition to the `main`, `config`, `baseUrl` and `meta` values \nspecified in [steal-tools.SystemConfig], an additional `bundlesPath` is sometimes provided.\n\n"
          },
          {
            "types": [
              {
                "type": "steal-tools.BuildOptions"
              }
            ],
            "optional": true,
            "name": "options",
            "description": "\n\nSpecifies the behavior of the build.\n  "
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "Either a Promise that resolves when the build is complete or a Stream that will send `data` events every time a rebuild is complete. By default a Promise is returned, unless the `watch` option is enabled.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "steal-tools.BuildOptions"
        }
      ],
      "optional": true,
      "name": "options",
      "description": "\n\nSpecifies the behavior of the build.\n  "
    },
    "types": [],
    "_curReturn": {
      "types": [
        {
          "type": "Promise",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        },
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "Either a Promise that resolves when the build is complete or a Stream that will send `data` events every time a rebuild is complete. By default a Promise is returned, unless the `watch` option is enabled.\n"
    },
    "comment": " "
  },
  "steal-tools.streams.bundle": {
    "src": {
      "path": "node_modules/steal-tools/doc/bundle-stream.md"
    },
    "body": "\n\n# Use\n\nGiven a graph stream, you should first [steal-tools.streams.transpile] and [steal-tools.streams.minify] before applying the bundle stream:\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar graphStream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\tminify: false\n});\n\nvar buildStream = graphStream\n\t.pipe(s.transpile())\n\t.pipe(s.minify())\n\t.pipe(s.bundle());\n\nminifyStream.on(\"data\", function(data){\n\tvar bundles = s.bundles;\n});\n```\n\n",
    "description": "\nThe bundle stream takes a [stream](https://nodejs.org/api/stream.html) of [steal-tools.BuildResult] objects and applies a progressive loading algorithm to split the graph into separate bundles optimized for fast loading.\n",
    "title": "bundle",
    "name": "steal-tools.streams.bundle",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.bundle()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph, with each module having been minified.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph, with each module having been minified.\n"
    },
    "comment": " "
  },
  "steal-tools.cmd.build": {
    "src": {
      "path": "node_modules/steal-tools/doc/command-build.md"
    },
    "body": "\n\n## Use\n\n> Note: The `steal-tools build` command-line\nutility calls [steal-tools.build steal-tools.build] \ninternally. This page documents the specifics of the command-line utility. Read\n[steal-tools.build steal-tools.build's documentation] for how to use\nthe build in various workflows and detailed information\non the options available.\n\n\n`steal-tools` can be installed into the command line, like:\n\n    > npm install steal-tools -g\n    \nThen you can run `steal-tools build`, like:\n\n    > steal-tools build --config app/config.js --main app/app\n\nOr, you can access `steal-tools` in _node_modules/.bin_, like:\n\n    > ./node_modules/.bin/steal-tools build \\\n          --config app/config.js \\\n          --main app/app\n          \nIf you are using the [npm] plugin you don't need to specify `--config` or `--main`:\n\n    > steal-tools\n\nwill default to `package.json!npm` as the config and build out to `dist/`.\n\n",
    "description": "\nCall steal-tools [steal-tools.build] from the command line.\n",
    "title": "steal-tools build",
    "name": "steal-tools.cmd.build",
    "type": "function",
    "parent": "steal-tools.cmd",
    "signatures": [
      {
        "code": "steal-tools build [--OPTION_NAME OPTION_VALUE]...",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_NAME",
            "description": "Any `config` or `options` name in [steal-tools.build].\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_VALUE",
            "description": "The value of `OPTION_NAME`.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "OPTION_VALUE",
      "description": "The value of `OPTION_NAME`.\n"
    },
    "comment": " "
  },
  "steal-tools.cmd.export": {
    "src": {
      "path": "node_modules/steal-tools/doc/command-export.md"
    },
    "body": "\n\n## Use\n\n> Note: The `steal-tools export` command-line\nutility calls [steal-tools.export steal-tools.export] internally.\nThis page documents the specifics of the command-line utility, which is useful\nto export to default module outputs like `+amd`,`+cjs`, `+global-js` and\n`+global-css` (by passing --amd, --cjs, --global or --all). Read\n[steal-tools.export steal-tools.export's documentation] for how to use\nexport in various workflows and detailed information on the options available.\n\n\nAccess `steal-tools` in _node_modules/.bin_, like:\n\n    > ./node_modules/.bin/steal-tools export \\\n               --config app/config.js \\\n               --main app \\\n               --all\n\nOr, `steal-tools` can be installed into the command line, like:\n\n    > npm install steal-tools -g\n\nThen you can run `steal-tools transform`, like:\n\n    > steal-tools export \\\n               --config app/config.js \\\n               --main app \\\n               --amd\n\n",
    "description": "\nExport a project's modules to other forms and formats from the command line.\n",
    "title": "steal-tools export",
    "name": "steal-tools.cmd.export",
    "type": "function",
    "parent": "steal-tools.cmd",
    "signatures": [
      {
        "code": "steal-tools export [--OPTION_NAME OPTION_VALUE]...",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_NAME",
            "description": "Any `system`, `options`, or `outputs` name in\n[steal-tools.export.object].\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_VALUE",
            "description": "The value of `OPTION_NAME`.  The `ignores` option\nwill be converted to a regular expression.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "String"
            }
          ],
          "description": "Writes the output to the console.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "OPTION_VALUE",
      "description": "The value of `OPTION_NAME`.  The `ignores` option\nwill be converted to a regular expression.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "Writes the output to the console.\n"
    },
    "comment": " "
  },
  "steal-tools.cmd.transform": {
    "src": {
      "path": "node_modules/steal-tools/doc/command-transform.md"
    },
    "body": "\n\n## Use\n\n> Note: The `steal-tools transform` command-line\nutility calls [steal-tools.transform steal-tools.transform] and\n[steal-tools.transformImport steal-tools.transformImport]\ninternally. This page documents the specifics of the command-line utility. Read\n[steal-tools.transform steal-tools.transform's documentation] for how to use\ntransform in various workflows and detailed information\non the options available.\n\nAccess `steal-tools` in _node_modules/.bin_, like:\n\n    > ./node_modules/.bin/steal-tools transform \\\n               --config app/config.js \\\n               --main app \\\n               --ignores foo/.+\n               > app.js\n\nOr, `steal-tools` can be installed into the command line, like:\n\n    > npm install steal-tools -g\n    \nThen you can run `steal-tools transform`, like:\n\n    > steal-tools transform \\\n               --config app/config.js \\\n               --main app \\\n               --ignores foo/.+\n               > app.js\n               \n",
    "description": "\nTransform a module from the command line.\n",
    "title": "steal-tools transform",
    "name": "steal-tools.cmd.transform",
    "type": "function",
    "parent": "steal-tools.cmd",
    "signatures": [
      {
        "code": "steal-tools transform [--OPTION_NAME OPTION_VALUE]...",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_NAME",
            "description": "Any `config`, `pluginifierOptions`, or `options` name in \n[steal-tools.transformImport] or [steal-tools.transform transform].\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_VALUE",
            "description": "The value of `OPTION_NAME`.  The `ignores` option\nwill be converted to a regular expression.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "String"
            }
          ],
          "description": "Writes the output to the console.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "OPTION_VALUE",
      "description": "The value of `OPTION_NAME`.  The `ignores` option\nwill be converted to a regular expression.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "Writes the output to the console.\n"
    },
    "comment": " "
  },
  "steal-tools.cmd.live-reload": {
    "src": {
      "path": "node_modules/steal-tools/doc/command-live-reload.md"
    },
    "body": "\n\n## Use\n\nIf using [npm] simply type:\n\n    > steal-tools live-reload\n\nTo start a Web Socket server. Then in your `package.json` add:\n\n    {\n      \"system\": {\n        \"configDependencies\": [\n          \"live-reload\"\n        ]\n      }\n    }\n\nCreate an html page:\n\n    <script src=\"node_modules/steal/steal.js\"></script>\n\nAnd open it in your browser. See the [steal.live-reload] documentation to learn how to configure your application to respond to reload events (such as re-rendering when needed).\n\n",
    "description": "\nStarts a live-reload Web Socket server. Used with [steal.live-reload], allows you to develop without ever refreshing the browser.\n",
    "title": "steal-tools live-reload",
    "name": "steal-tools.cmd.live-reload",
    "type": "function",
    "parent": "steal-tools.cmd",
    "signatures": [
      {
        "code": "steal-tools live-reload [--OPTION_NAME OPTION_VALUE]...",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_NAME",
            "description": "Any `config` or `options` name in [steal-tools.build].\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "OPTION_VALUE",
            "description": "The value of `OPTION_NAME`.\n"
          }
        ]
      },
      {
        "code": "steal-tools live-reload --live-reload-port PORT",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "name": "--live-reload-port",
            "defaultValue": "8012",
            "description": "Web Socket port to use for connecting with browser clients.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Number"
        }
      ],
      "optional": true,
      "name": "--live-reload-port",
      "defaultValue": "8012",
      "description": "Web Socket port to use for connecting with browser clients.\n"
    },
    "comment": " "
  },
  "steal-tools.cmd.steal-tools": {
    "src": {
      "path": "node_modules/steal-tools/doc/command-steal-tools.md"
    },
    "body": "\nThe command line interface for building and exporting with StealTools. There are 2 subcommands:\n\n- `build`: Builds bundles that can be progressively loaded. Use this option if you are creating a build for your production application. See [steal-tools.cmd.build] for more information.\n- `transform`: Transforms your application/library into a single file that can be used without a loader. Use this option if you have a small application or library that you just want to use as a global. See [steal-tools.cmd.transform] for more information.\n\n\n## Use\n\nBy default simply calling `steal-tools` will assume you are doing `build`. If you are using the [npm] plugin (and you really should be), this is the only thing you need to type. For example say you had an application like:\n\n```\napp/\n\tpackage.json\n\tapp.html\n\tapp.js\n\tadder/\n\t\tadder.js\n\tmy_module/\n\t\tmy_module.js\n\t\tmy_module.less\n```\n\nAnd your `package.json` looks like:\n\n```json\n{\n  \"name\": \"my-app\",\n  \"main\": \"app/app.js\"\n}\n```\n\nPerform your build:\n\n```shell\nsteal-tools\n```\n\nWill produce a `dist/bundles` folder where your bundled application build is written.\n\n",
    "description": "\n",
    "title": "steal-tools",
    "name": "steal-tools.cmd.steal-tools",
    "type": "function",
    "parent": "steal-tools.cmd",
    "comment": " "
  },
  "steal-tools.streams.concat": {
    "src": {
      "path": "node_modules/steal-tools/doc/concat-stream.md"
    },
    "body": "\n\n# Use\n\nThe concat stream is used to **concatenate** the source code from a bundle and (optionally) create source maps.\n\nThis API must be used in conjuction with [steal-tools.streams.transpileAndBundle].\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar graphStream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\tminify: false\n});\n\nvar buildStream = graphStream\n\t.pipe(s.transpile())\n \t.pipe(s.bundle());\n\nvar concatStream = buildStream.pipe(s.concat());\n\nconcatStream.on(\"data\", function(data){\n\tvar bundle = data.bundles[0];\n\tassert(bundle.source, \"The source was concatenated\");\n});\n```\n\n",
    "description": "\nCreate a [stream](https://nodejs.org/api/stream.html) of [steal-tools.BuildResult] objects.\n",
    "title": "concat",
    "name": "steal-tools.streams.concat",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.concat()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph, bundles, and loader used to perform the trace.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph, bundles, and loader used to perform the trace.\n"
    },
    "comment": " "
  },
  "steal-tools.export": {
    "src": {
      "path": "node_modules/steal-tools/doc/export.md"
    },
    "body": "\n\n## Use\n\n`stealTools.export` is used to declaratively describe multiple [steal-tools.transform transformations]\nthat take place on an application's modules to make it distributable.  The\n[steal-tools/lib/build/helpers/amd], [steal-tools/lib/build/helpers/cjs], and\n[steal-tools/lib/build/helpers/global] _Export Helpers_ can be used to export censible versions\nof your project in those formats.\n\nThe basic use of `stealTools` export is to provide a \"system\" that is able to load your project's modules,\nand several \"outputs\" that write out those modules in a new form:\n\n```\nvar stealTools = require(\"steal-tools\");\nstealTools.export({\n  system: {\n    main: \"myproject\",\n    config: __dirname+\"/config.js\"\n  },\n  options: {\n    verbose: true\n  },\n  outputs: {\n    amd: {\n      format: \"amd\",\n      graphs: [\"myproject\"],\n      dest: __dirname+\"/dist/amd\"\n    },\n    standalone: {\n      format: \"global\",\n      modules: [\"myproject\"],\n      dest: __dirname+\"/dist/standalone.js\",\n      minify: true\n    }\n  }\n})\n```\n\n## exportTask\n\nThe first argument is an [steal-tools.export.object].  Details about its API and options can be found on its page.\n\n## defaults\n\nAs there are times when the same options may need to be set over and over again, the `defaults` option can \ncontain default values each output can call:\n\n```\nvar stealTools = require(\"steal-tools\");\nstealTools.export({\n  system: {\n    main: \"myproject\",  config: __dirname+\"/config.js\"\n  },\n  outputs: {\n    \"+commonjs\": {\n      dest: __dirname+\"/dist/cjs\"\n    },\n    \"+cjs+minify\": {\n      dest: __dirname+\"/dist/min/cjs\"\n    }\n  }\n},{\n  \"commonjs\" : {\n    modules: [\"myproject\"],\n    format: \"cjs\"\n  },\n  \"minify\": {\n    minify: true,\n    uglifyOptions: { ... }\n  }\n})\n```\n\nThe [steal-tools/lib/build/helpers/cjs] and other export helpers can also be mixed in output names by default:\n\n```\nvar stealTools = require(\"steal-tools\");\nstealTools.export({\n  system: {\n    main: \"myproject\",  config: __dirname+\"/config.js\"\n  },\n  outputs: {\n    \"+cjs\" : {}\n  }\n})\n```\n\n## modules\n\nDeprecated.\n\n",
    "description": "\nExport a project's modules to other forms and formats declaratively.  \n",
    "title": "export",
    "name": "steal-tools.export",
    "type": "function",
    "parent": "steal-tools.JS",
    "signatures": [
      {
        "code": "stealTools.export( exportTask, defaults, modules )",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "steal-tools.export.object",
                "options": [
                  {
                    "name": "system",
                    "description": "`System.config` data needed to load\nall the modules for export.\n",
                    "types": [
                      {
                        "type": "steal-tools.SystemConfig"
                      }
                    ]
                  },
                  {
                    "name": "options",
                    "description": "Options that configure logging.\n",
                    "types": [
                      {
                        "type": "Object",
                        "options": []
                      }
                    ],
                    "optional": true
                  },
                  {
                    "name": "outputs",
                    "description": "Configures output files to be written.\n",
                    "types": [
                      {
                        "type": "Object",
                        "template": [
                          {
                            "types": [
                              {
                                "type": "String"
                              }
                            ]
                          },
                          {
                            "types": [
                              {
                                "type": "steal-tools.export.output"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "name": "exportTask",
            "description": "An [steal-tools.export.object] with the following properties:\n"
          },
          {
            "types": [
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "steal-tools.export.output"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true,
            "name": "defaults",
            "description": "An object of names and default ExportOutput\nvalues.\n"
          },
          {
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "Object",
                        "options": []
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true,
            "name": "modules",
            "description": "An array of module data that an [steal-tools.export.output]'s\n`modules`, `eachModule`, `graphs`, or `ignore` can be filtered against.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "A promise that resolves when all outputs have been written out.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "Object",
                  "options": []
                }
              ]
            }
          ]
        }
      ],
      "optional": true,
      "name": "modules",
      "description": "An array of module data that an [steal-tools.export.output]'s\n`modules`, `eachModule`, `graphs`, or `ignore` can be filtered against.\n"
    },
    "types": [],
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise that resolves when all outputs have been written out.\n"
    },
    "comment": " "
  },
  "steal-tools.grunt.build": {
    "src": {
      "path": "node_modules/steal-tools/doc/grunt-build.md"
    },
    "body": "\n\n## Use\n\n> Note: The `steal-build` Grunt task calls [steal-tools.build steal-tools.build] \ninternally. This page documents the specifics of the Grunt task. Read\n[steal-tools.build steal-tools.build's documentation] for how to use\nthe build in various workflows and detailed information\non the system and options arguments.\n\n`\"steal-build\"` is registered as a Grunt multi-build task. Specify the\ndefault \"steal-build\" task options, as follows:\n\n    grunt.initConfig({\n      \"steal-build\": {\n        default: {\n          options: {\n            system: {\n              config: __dirname + \"/app/config.js\",\n              main: \"app/app\"\n            },\n            buildOptions: {\n              minify: false\n            }\n          }\n        }\n      }\n    });\n\nThe Grunt task takes 2 objects as its \noptions: `system`, and `buildOptions`.\n\n## system\n\nThese are [System.config] values that are used to \nload modules during the build process. Typically, you will want \nto specify at least the `config` and `main` options, like so:\n\n    {\n\t  config: __dirname + \"/config.js\",\n      main: [\"math/add\", \"math/subtract\"]\n    }\n\n## buildOptions\n\nThe `buildOptions` property specifies the properties on the `options`\nargument to [steal-tools.build stealTools.build]. The following options are available:\n\n{{#each [steal-tools.build].signatures.0.params.1.types.0.options}}\n - {{name}} <i>{{{makeTypesString types}}}</i>{{/each}}\n \n\n\nRead more about them on [steal-tools.build stealTools.build].\n\n\n",
    "description": "\nThe `steal-build` options object's values.\n",
    "type": "typedef",
    "title": "steal-build",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "system",
            "description": "Specifies the `config` argument in\n[steal-tools.build]. The [System.main main] option must be specified. Typically,\n[System.configPath configPath] is also specified, as that is used to set \n[System.baseURL baseURL].  Any System [System.config configuration] can be specified; however,\nmost other __build__ configuration values are specified\nby [System.buildConfig], in the config file.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          },
          {
            "name": "buildOptions",
            "description": "Specifies the `options` argument \nto [steal-tools.build stealTools.build].\n\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.grunt.build",
    "parent": "steal-tools.grunt",
    "comment": " "
  },
  "steal-tools.streams.graph": {
    "src": {
      "path": "node_modules/steal-tools/doc/graph-stream.md"
    },
    "body": "\n",
    "description": "\nCreate a [stream](https://nodejs.org/api/stream.html) that will result in a dependency graph.\n",
    "title": "graph",
    "name": "steal-tools.streams.graph",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.graph(config, options)",
        "description": "\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar stream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\tminify: false\n});\n\nstream.on(\"data\", function(data){\n\tvar dependencyGraph = data.graph;\n});\n```\n",
        "params": [
          {
            "types": [
              {
                "type": "steal-tools.SystemConfig"
              }
            ],
            "name": "config",
            "description": "\n"
          },
          {
            "types": [
              {
                "type": "steal-tools.BuildOptions"
              }
            ],
            "optional": true,
            "name": "options",
            "description": "\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "Object",
                      "options": []
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "steal-tools.BuildOptions"
        }
      ],
      "optional": true,
      "name": "options",
      "description": "\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "Object",
                  "options": []
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph.\n"
    }
  },
  "steal-tools.grunt.export": {
    "src": {
      "path": "node_modules/steal-tools/doc/grunt-export.md"
    },
    "body": "\n\n## Use\n\n> Note: The `steal-export` Grunt task calls [steal-tools.export steal-tools.export] \ninternally. This page documents the specifics of the Grunt task. Read\n[steal-tools.export steal-tools.export's documentation] for how to use\nthe export in various workflows and detailed information\non the system and options arguments.\n\n`steal-export` is a Grunt [multi-task](http://gruntjs.com/creating-tasks#multi-tasks) that is \nused to build library projects to a variety of formats. For example, to load a \"main\" module and\ntranspile it, and all of its dependencies (except jQuery), to AMD and CommonJS with debug output:\n\n    grunt.initConfig({\n      \"steal-export\": {\n        transpile: {\n          system: {\n            main: \"main\",\n            config: __dirname + \"/config.js\"\n          },\n          options: {\n            debug: true\n          },\n          outputs: {\n            amd: {\n              graphs: [\"main\"],\n              format: \"amd\",\n              ignore: [\"jquery\"]\n            },\n            cjs: {\n              graphs: [\"main\"],\n              format: \"amd\",\n              ignore: [\"jquery\"]\n            }\n          }\n        }\n      }\n    });\n    \nEach [steal-tools.export.object] task is configured by three values:\n\n - system - describes the [System.config] values used to load modules; this is passed to [steal-tools.transformImport].\n - options - configures special behavior of the loader, such as logging.\n - outputs - configures the modules that should be written out, how they \n             should be written out, and where they should be written. \n\nThe [steal-tools.export.object] documentation has more information.\n\n## meta.steal.export-helpers\n\nYou can add your own export helpers on your Grunt config's \n`meta.steal.export-helpers` object, as follows:\n\n```\ngrunt.initConfig({\n  meta: {\n    steal: {\n      \"export-helpers\": {\n        \"minify\": {minify: true}\n      }\n    }\n  },\n  \"steal-export\": {\n    transpile: {\n      system: { ... },\n      outputs: {\n        \"amd +minify\": {\n          format: \"amd\"\n        }\n      }\n    }\n  }\n})\n```\n\n\n\n\n\n\n\n",
    "description": "\nA [http://gruntjs.com/ Grunt] multi task that loads modules, and writes them out in different formats.\n",
    "type": "typedef",
    "title": "steal-export",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "tasks",
            "description": "An object with task names as keys,\nand exportObjects as values.\n\n```\ngrunt.initConfig({\n  \"steal-export\": {\n    taskName1: { ExportObject1 },\n    taskName2: { ExportObject2 }\n  }\n});\n```\n\nEach [steal-tools.export.object] specifies:\n\n - A `system` object that specifies the modules to be loaded.\n - An `options` object that specifies any special loading behavior, like turning logging.\n - An `outputs` object that specifies how the modules should be written out.\n \n```\ngrunt.initConfig({\n  \"steal-export\": {\n    taskName: {\n      system : { .. },\n      options: { .. },\n      outputs: { .. }\n    }\n  }\n});\n```\n\n",
            "types": [
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "steal-tools.export.object"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.grunt.export",
    "parent": "steal-tools.grunt",
    "comment": " "
  },
  "steal-tools.grunt.live-reload": {
    "src": {
      "path": "node_modules/steal-tools/doc/grunt-live-reload.md"
    },
    "body": "\n\n## Use\n\n`\"steal-live-reload\"` is registered as a Grunt multi-build task. Specify the\ndefault \"steal-live-reload\" task options, as follows:\n\n    grunt.initConfig({\n      \"steal-live-reload\": {\n        default: {\n          options: {\n            system: {\n              config: __dirname + \"/app/config.js\",\n              main: \"app/app\"\n            },\n            liveReloadOptions: {\n              liveReloadPort: 8013\n            }\n          }\n        }\n      }\n    });\n\nThe Grunt task takes 2 objects as its\noptions: `system`, and `liveReloadOptions`.\n\n## system\n\nThese are [System.config] values that are used to\nload modules during the build process. Typically, you will want\nto specify at least the `config` and `main` options, like so:\n\n    {\n\t  config: __dirname + \"/config.js\",\n      main: [\"math/add\", \"math/subtract\"]\n    }\n\n## liveReloadOptions\n\nThe `liveReloadOptions` property specifies the properties on the `options`\nargument to [steal-tools.cmd.live-reload steal-tools live-reload].\n\nThe following options are available:\n\n - liveReloadPort <i>{Number}</i>\n\n\nRead more about them on [steal-tools.cmd.live-reload steal-tools live-reload].\n\n\n",
    "description": "\nThe `steal-live-reload` options object's values.\n",
    "type": "typedef",
    "title": "steal-live-reload",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "system",
            "description": "Specifies the `config` argument in\n[steal-tools.build]. The [System.main main] option must be specified. Typically,\n[System.configPath configPath] is also specified, as that is used to set\n[System.baseURL baseURL].  Any System [System.config configuration] can be specified; however,\nmost other __build__ configuration values are specified\nby [System.buildConfig], in the config file.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          },
          {
            "name": "liveReloadOptions",
            "description": "Specifies the `options` argument\nto [steal-tools.cmd.live-reload steal-tools live-reload].\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.grunt.live-reload",
    "parent": "steal-tools.grunt",
    "comment": " "
  },
  "steal-tools.streams.minify": {
    "src": {
      "path": "node_modules/steal-tools/doc/minify-stream.md"
    },
    "body": "\n\n# Use\n\nThis stream minifies the modules in a dependency graph. Instead of minifying the entire bundle once concatenated, this will minify each module individually.\n\nThis API must be used in conjuction with [steal-tools.streams.graph].\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar graphStream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\tminify: false\n});\n\nvar minifyStream = graphStream.pipe(s.transpile())\n\t.pipe(s.minify());\n\nminifyStream.on(\"data\", function(data){\n\tvar dependencyGraph = data.graph;\n});\n```\n\n",
    "description": "\nGiven a [stream](https://nodejs.org/api/stream.html) of [steal-tools.BuildResult] objects, minify the source of each module in each bundle. This is the default behavior of StealTool's multi-build.\n",
    "title": "minify",
    "name": "steal-tools.streams.minify",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.minify()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph, with each module having been minified.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph, with each module having been minified.\n"
    },
    "comment": " "
  },
  "steal-tools.transform": {
    "src": {
      "path": "node_modules/steal-tools/doc/transform.md"
    },
    "body": "\n\n## Use\n\nAfter getting `transform` from [steal-tools.transformImport] you can call it, like:\n\n    var result = transform(\"module/name/to/build\", {\n      // specifies modules to ignore\n      ignore: [\n        // ignores this module, and all of its dependencies\n        \"module/name/to/ignore\",\n        // ignores modules with names matching this pattern\n        /can\\//\n      ],\n      \n      // Remove code between !steal-remove-start and !steal-remove-end.\n      // true by default.\n      removeDevelopmentCode: true,\n      \n      // Transpile the code to either \"amd\", \"steal\", \"cjs\" or \"global\".\n      // \"global\", the default, allows the file to work without any \n      // module loader.\n      format: \"global\",\n      \n      // Minify the file using uglify.\n      // `false` by default.\n      minify: true,\n      \n      // Only write the module specified by `moduleName`, instead of its \n      // dependencies. `false` by default.\n      ignoreAllDependencies: false\n      \n      // Map module names to their name on the global object. Useful for\n      // building \"global\" modules that depend on other scripts already in \n      // the page.\n      exports: {\"jquery\": \"jQuery\"},\n      \n      // Transpile to normalized dependency names.\n      // `true` by default.\n      useNormalizedDependencies: true\n      \n      // Custom normalization behavior\n      // By default, the normalized name is used.\n      normalize: function(name, currentModule, address){\n        return name;\n      }\n      \n    });\n    \nMost of these options are optional.  For more \ninformation, read [steal-tools.transform.options transformOptions].\n\n",
    "description": "\nA function provided by [steal-tools.transformImport] that returns a transformed\nmodule or modules.\n",
    "title": "transform",
    "name": "steal-tools.transform",
    "type": "function",
    "parent": "steal-tools.JS",
    "signatures": [
      {
        "code": "transform(moduleName, options)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ],
            "optional": true,
            "name": "moduleName",
            "defaultValue": "config.main",
            "description": "The module name to build.\n"
          },
          {
            "types": [
              {
                "type": "steal-tools.transform.options"
              }
            ],
            "optional": true,
            "name": "options",
            "description": "\n\nOptions that configure how the files are compiled.  These options overwrite the \n`pluginifierOptions` argument passed to [steal-tools.transformImport].\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "steal-tools.source.object"
            }
          ],
          "description": "An object containing a string `code` property and a `map` that is the source map if the `sourceMaps` option is set to `true`.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "steal-tools.transform.options"
        }
      ],
      "optional": true,
      "name": "options",
      "description": "\n\nOptions that configure how the files are compiled.  These options overwrite the \n`pluginifierOptions` argument passed to [steal-tools.transformImport].\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "steal-tools.source.object"
        }
      ],
      "description": "An object containing a string `code` property and a `map` that is the source map if the `sourceMaps` option is set to `true`.\n"
    },
    "comment": " "
  },
  "steal-tools.JS": {
    "name": "steal-tools.JS",
    "title": "JavaScript",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools.cmd": {
    "name": "steal-tools.cmd",
    "title": "Command Line",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools.grunt": {
    "name": "steal-tools.grunt",
    "title": "Grunt Tasks",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools.stream": {
    "name": "steal-tools.stream",
    "title": "Streams",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools.types": {
    "name": "steal-tools.types",
    "title": "Types",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools.helpers": {
    "name": "steal-tools.helpers",
    "title": "Export Helpers",
    "type": "group",
    "parent": "steal-tools",
    "description": "",
    "order": 0
  },
  "steal-tools": {
    "src": {
      "path": "node_modules/steal-tools/doc/steal-tools.md"
    },
    "body": "\n## Use\n\nThere are three core pieces of functionality that steal-tools provides:\n\n - [steal-tools.build] - An application packager that intelligently bundles progressively-loaded\n   apps to improve application load times and caching.\n - [steal-tools.transformImport] and [steal-tools.transform] - A low-level utility that can convert modules from one form to another.\n - [steal-tools.export] - A higher-level utility that can export projects into many formats.\n\n\nCurrently, steal-tools depends \non [steal]. Before doing a build, make\nsure `steal.js` loads your app successfully in the browser.\n\n",
    "description": "\n`steal-tools` is a collection of JS, Grunt, and command-line utilities\nthat make building, packaging, and sharing ES6, CommonJS, AMD, and [Steal](https://github.com/bitovi/steal)\napplications easy.\n",
    "name": "steal-tools",
    "title": "steal-tools",
    "type": "page",
    "parent": "StealJS.api"
  },
  "steal-tools.transformImport": {
    "src": {
      "path": "node_modules/steal-tools/doc/transformImport.md"
    },
    "body": "\n\n## Use\n\n`stealTools.transformImport` lets you transform modules to a different \nformat or form.  It's passed a [steal-tools.SystemConfig], which is used\nto load modules. Once all modules have been loaded, it provides a\n[steal-tools.transform] method that can write out modules:\n\n - in different formats (cjs, amd, global),\n - minified, or\n - with development code removed.\n \n`transformImport` and `transform` are low-level functionality. For the majority of projects, [steal-tools.export]\nwill be a better fit for the most common transformation behavior.\n\nLike [steal-tools.build], transformImport can be used from the command-line, from Grunt, or \nprogrammatically in Node.js. For this example, we're going to use \ntransformImport programmatically, in order to showcase \nits more advanced functionality:\n\n    var transformImport = require(\"steal-tools\").transformImport;\n    var fs = require(\"fs\");\n\n    transformImport({\n      config: __dirname + \"/config.js\",\n      main: \"main\"\n    }).then(function(transform){\n      // Get the main module and it's dependencies as a string\n      var main = transform();\n\n      // Get just a dependency and it's own dependencies as a string\n      var myModule = transform(\"my_module\");\n\n      // Get the main module, ignoring a dependency we don't want.\n      var mainAlone = transform(\"main\", {\n        ignore: [\"my_module\"]\n      });\n\n      // Now you can do whatever you want with the module.\n      fs.writeFileSync(\"out_main.js\", mainAlone, \"utf8\");\n    });\n\nAs you can see, transformImport takes an object containing the \nSystem configuration and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). \nThe promise will return another function (named \"transform\" in this example) that can be used to generate \na string containing a module and its dependencies. By default, the transform \nfunction will return the main module; but it can be used to generate any dependency in the graph.\n\n",
    "description": "\nLoads a module, and its dependencies, and provides a [steal-tools.transform] \nmethod, so they can be written out in another form.\n",
    "title": "transformImport",
    "name": "steal-tools.transformImport",
    "type": "function",
    "parent": "steal-tools.JS",
    "signatures": [
      {
        "code": "stealTools.transformImport(config, transformOptions)",
        "description": "\n\nLoads a module, and all of its dependencies, and returns a function that\ncan write out all, or parts, of the module and its dependency graph,\nso that they don't depend on `steal.js`.\n",
        "params": [
          {
            "types": [
              {
                "type": "steal-tools.SystemConfig",
                "options": [
                  {
                    "name": "main",
                    "description": "The module whose dependencies should be built.",
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  },
                  {
                    "name": "config",
                    "description": "The path to a configuration file. This\nwill also specify `baseURL`.",
                    "types": [
                      {
                        "type": "String"
                      }
                    ],
                    "optional": true
                  },
                  {
                    "name": "baseURL",
                    "description": "If a configuration file is not used, \nthe [System.baseURL baseURL] value must be set.\n",
                    "types": [
                      {
                        "type": "String"
                      }
                    ],
                    "optional": true
                  }
                ]
              }
            ],
            "name": "config",
            "description": "\n\nSpecifies configuration values to set on \na System loader. The [System.main main] option must be specified. Typically,\n[System.configPath configPath] is also specified, as that is used to set \n[System.baseURL baseURL].  Any System [System.config configuration] can be specified; however,\nmost other __build__ configuration values are specified\nby [System.buildConfig] in the config file.\n"
          },
          {
            "types": [
              {
                "type": "Object",
                "options": [
                  {
                    "name": "verbose",
                    "description": "Set to true to get a lot of warning messages.",
                    "types": [
                      {
                        "type": "Boolean"
                      }
                    ],
                    "optional": true,
                    "defaultValue": "false"
                  },
                  {
                    "name": "quiet",
                    "description": "Set to true to log nothing.\n",
                    "types": [
                      {
                        "type": "Boolean"
                      }
                    ],
                    "optional": true,
                    "defaultValue": "false"
                  }
                ]
              }
            ],
            "name": "transformOptions",
            "description": "\n\nConfigures the behavior of loading the modules, and acts as default values\nfor the resulting [steal-tools.transform transform function's] options argument.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.transform"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A deferred, which resolves to a function that can write out all or part of the loaded dependency tree. \n\n\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": [
            {
              "name": "verbose",
              "description": "Set to true to get a lot of warning messages.",
              "types": [
                {
                  "type": "Boolean"
                }
              ],
              "optional": true,
              "defaultValue": "false"
            },
            {
              "name": "quiet",
              "description": "Set to true to log nothing.\n",
              "types": [
                {
                  "type": "Boolean"
                }
              ],
              "optional": true,
              "defaultValue": "false"
            }
          ]
        }
      ],
      "name": "transformOptions",
      "description": "\n\nConfigures the behavior of loading the modules, and acts as default values\nfor the resulting [steal-tools.transform transform function's] options argument.\n"
    },
    "types": [],
    "_curReturn": {
      "types": [
        {
          "type": "Promise",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.transform"
                }
              ]
            }
          ]
        }
      ],
      "description": "A deferred, which resolves to a function that can write out all or part of the loaded dependency tree. \n\n\n"
    },
    "comment": " "
  },
  "steal-tools.streams.write": {
    "src": {
      "path": "node_modules/steal-tools/doc/write-stream.md"
    },
    "body": "\n\n# Use\n\nThe write stream is used to write the result of a build to the file system.\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar system = {\n\tconfig: __dirname + \"/package.json!npm\"\n};\n\nvar stream = s.graph(system)\n\t.pipe(s.transpile())\n\t.pipe(s.minify())\n\t.pipe(s.bundle())\n\t.pipe(s.concat())\n\t.pipe(s.write());\n\nstream.on(\"data\", function(){\n\t// Files were written to the file system\n});\n```\n\n\n",
    "description": "\nCreate a [stream](https://nodejs.org/api/stream.html) that takes a [steal-tools.BuildResult] objects and writes them to the filesystem.\n",
    "title": "write",
    "name": "steal-tools.streams.write",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.write()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph, bundles, and loader used to perform the trace.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph, bundles, and loader used to perform the trace.\n"
    },
    "comment": " "
  },
  "steal-tools.streams.transpile": {
    "src": {
      "path": "node_modules/steal-tools/doc/transpile-stream.md"
    },
    "body": "\n\n# Use\n\nThis stream is used to transpile the dependency graph to AMD format for use in production environments. \n\nThis API must be used in conjuction with [steal-tools.streams.graph].\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar graphStream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\tminify: false\n});\n\nvar transpileStream = graphStream.pipe(s.transpile());\n\ntranspileStream.on(\"data\", function(data){\n\tvar dependencyGraph = data.graph;\n});\n```\n\n",
    "description": "\nCreate a [stream](https://nodejs.org/api/stream.html) of [steal-tools.BuildResult] objects.\n",
    "title": "transpile",
    "name": "steal-tools.streams.transpile",
    "type": "function",
    "parent": "steal-tools.stream",
    "signatures": [
      {
        "code": "stealTools.streams.transpile()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Stream",
              "template": [
                {
                  "types": [
                    {
                      "type": "steal-tools.BuildResult"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "A stream of objects that contains the dependency graph, transpiled to AMD.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Stream",
          "template": [
            {
              "types": [
                {
                  "type": "steal-tools.BuildResult"
                }
              ]
            }
          ]
        }
      ],
      "description": "A stream of objects that contains the dependency graph, transpiled to AMD.\n"
    },
    "comment": " "
  },
  "steal.hooks.fetch": {
    "src": {
      "path": "node_modules/steal/docs/hook-fetch.md"
    },
    "body": "\n\nThe **fetch** is used to retrieve a module's source, so that it can be passed on to the next loader hook [steal.hooks.translate].\n\nHere's an example of a loader override that stores module source in `localStorage`:\n\n\tvar oldFetch = loader.fetch;\n\n\tloader.fetch = function(load) {\n\t\tif(localStorage[load.name]) {\n\t\t\treturn localStorage[load.name];\n\t\t}\n\n\t\treturn oldFetch.call(this, load).then(function(source){\n\t\t\tlocalStorage[load.name] = source;\n\n\t\t\treturn source;\n\t\t});\n\t};\n\n",
    "description": "\nA loader hook that fetches a module, usually from an http url, returning the source of that module.\n",
    "title": "fetch",
    "name": "steal.hooks.fetch",
    "type": "function",
    "parent": "StealJS.hooks",
    "signatures": [
      {
        "code": "fetch(load)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "load"
              }
            ],
            "name": "load",
            "description": "The load object associated with this module.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "load"
        }
      ],
      "name": "load",
      "description": "The load object associated with this module.\n"
    },
    "comment": " "
  },
  "steal.hooks.instantiate": {
    "src": {
      "path": "node_modules/steal/docs/hook-instantiate.md"
    },
    "body": "\n",
    "description": "\nA loader hook that determines the module's dependencies and provides a function that will result in its value.\n",
    "name": "steal.hooks.instantiate",
    "title": "instantiate",
    "type": "page",
    "parent": "StealJS.hooks",
    "signatures": [
      {
        "code": "instantiate(load)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "load"
              }
            ],
            "name": "load",
            "description": "The load object associated with this module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            },
            {
              "type": "instantiateResult"
            }
          ],
          "description": "The [instantiateResult] is an object that describes the module by providing its dependencies and a function that will provide its value.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "load"
        }
      ],
      "name": "load",
      "description": "The load object associated with this module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        },
        {
          "type": "instantiateResult"
        }
      ],
      "description": "The [instantiateResult] is an object that describes the module by providing its dependencies and a function that will provide its value.\n"
    }
  },
  "steal.hooks.locate": {
    "src": {
      "path": "node_modules/steal/docs/hook-locate.md"
    },
    "body": "\n\nThe **locate** hook is the second hook in the module loading lifecycle. It is used to determine from where a module can be fetched.\n\n```\nloader.locate({\n  name: \"foo\"\n}).then(function(address){\n  address === \"http://example.com/foo.js\"\n});\n```\n\n",
    "description": "\nA loader hook that is used to identify the location (such as the URL) where a module can be fetched.\n",
    "title": "locate",
    "name": "steal.hooks.locate",
    "type": "function",
    "parent": "StealJS.hooks",
    "signatures": [
      {
        "code": "locate(load)",
        "description": "",
        "params": [
          {
            "types": [
              {
                "type": "load"
              }
            ],
            "name": "load",
            "description": "The *load* object associated with this module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            },
            {
              "type": "String"
            }
          ],
          "description": "the result\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "load"
        }
      ],
      "name": "load",
      "description": "The *load* object associated with this module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        },
        {
          "type": "String"
        }
      ],
      "description": "the result\n"
    },
    "comment": " "
  },
  "steal.hooks.normalize": {
    "src": {
      "path": "node_modules/steal/docs/hook-normalize.md"
    },
    "body": "\n\nThe **normalize** hook is used to convert a [moduleIdentifier] from a given context and, using the normalization algorithm, to a canonical [moduleName].\n\n",
    "description": "\nA loader hook that converts a [moduleIdentifier] into a [moduleName] to serve as the canonical key for a module.\n",
    "title": "normalize",
    "name": "steal.hooks.normalize",
    "type": "function",
    "parent": "StealJS.hooks",
    "signatures": [
      {
        "code": "normalize(name, parentName, parentAddress)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "name",
            "description": "The [moduleIdentifier] provided in the `import`, `require()` or similar call depending on the module syntax used.\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true,
            "name": "parentName",
            "description": "The [moduleName] of the parent module; the module that is doing the importing.\n"
          },
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true,
            "name": "parentAddress",
            "description": "The address (as determined in [steal.hooks.locate]) of the parent module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            },
            {
              "type": "String"
            }
          ],
          "description": "The string [moduleName] as determined by applying the normalize algorithm, or a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that will resolve with the moduleName.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "optional": true,
      "name": "parentAddress",
      "description": "The address (as determined in [steal.hooks.locate]) of the parent module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        },
        {
          "type": "String"
        }
      ],
      "description": "The string [moduleName] as determined by applying the normalize algorithm, or a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that will resolve with the moduleName.\n"
    },
    "comment": " "
  },
  "steal.hooks.translate": {
    "src": {
      "path": "node_modules/steal/docs/hook-translate.md"
    },
    "body": "\n",
    "description": "\nA loader hook that converts a module's source, if needed. The most common usage of this hook is for transpiling a language down to JavaScript.\n",
    "name": "steal.hooks.translate",
    "title": "translate",
    "type": "page",
    "parent": "StealJS.hooks",
    "signatures": [
      {
        "code": "translate(load)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "load"
              }
            ],
            "name": "load",
            "description": "The load object associated with this module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            },
            {
              "type": "String"
            }
          ],
          "description": "The translated source or a Promise that will resolve with the translated source.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "load"
        }
      ],
      "name": "load",
      "description": "The load object associated with this module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        },
        {
          "type": "String"
        }
      ],
      "description": "The translated source or a Promise that will resolve with the translated source.\n"
    }
  },
  "live-reload.disposeModule": {
    "src": {
      "path": "node_modules/steal/docs/live-reload-disposeModule.md"
    },
    "body": "\n## Use\n\nAdvanced plugins might want to dispose of modules at arbitrary times and disposeModule allows for that. One example would be if a plugin creates virtual modules and needs to remove them when the parent module is disposed.\n\n```js\nvar reload = require(\"live-reload\");\nvar loader = require(\"@loader\");\n\nloader.set(\"virtual-module\", loader.newModule({}));\n\n// Called when this module is disposed during a live-reload cycle.\nreload.dispose(function(){\n\n\t// Remove virtual-module since it will be recreated when \n\t// this module reloads.\n\treload.disposeModule(\"virtual-module\");\n\n});\n```\n\n## Implementation\n\nImplemented by [live-reload](https://github.com/stealjs/live-reload).\n\n",
    "description": "Dispose of a module, removing it from the Loader registry. \n",
    "title": "disposeModule",
    "name": "live-reload.disposeModule",
    "type": "function",
    "parent": "steal.live-reload",
    "signatures": [
      {
        "code": "reload.disposeModule(moduleName)",
        "description": "\n\nRemove a module from the Loader registry and call any dispose callbacks registered for the module.\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "moduleName",
            "description": "the name of the module to be disposed\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "moduleName",
      "description": "the name of the module to be disposed\n"
    },
    "comment": " "
  },
  "@config": {
    "src": {
      "path": "node_modules/steal/docs/module-config.md"
    },
    "body": "\n## Use\n\nThe path to `@config` is typically specified with [System.configPath] in the steal.js `<script>` tag like:\n\n    <script src=\"../path/to/steal/steal.js\"\n            config-path=\"../path/to/stealconfig.js\"\n            main=\"app\">\n    </script>\n\nBut it can be specified with any of the approaches in [System.config].\n\n\n",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "*",
        "description": "The `@config` module is loaded prior to the [@dev] and [System.main] module\nin [System.env development] and assumed to be packaged in [System.bundlesPath bundle] in\nproduction.\n\nIf `System.paths[\"@config\"]` is not specified, its default path will obey the following rules:\n\n - If `steal.js` is in <i>ROOT/bower_components/steal/steal.js</i>, `@config` will be looked for in\n   <i>ROOT/stealconfig.js</i>.\n - Otherwise, it will be looked for in _[System.baseURL baseURL]/stealconfig.js_.\n"
      }
    ],
    "name": "@config",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "bower": {
    "src": {
      "path": "node_modules/steal/docs/module-bower.md"
    },
    "body": "\n## Use\n\nThe `bower` plugin makes it easy to work in projects that use a lot of Bower dependencies.\nInstead of configuring each package individually you can use your `bower.json`\nfile in place of the [System.configMain] and all of your dependencies will be\npre-configured for you.\n\nBy default, if [System.stealPath] points to steal.js within bower_components like:\n\n    <script src=\"bower_components/steal/steal.js\"></script>\n\n[System.configMain] will point to `\"bower.json!bower\"`. The `bower` plugin reads your\nbower.json file and configure each dependency so they can be automatically loaded.\n\n## Options\n\n### System.bowerPath\n\nSpecifies the path to the folder where Bower dependencies can be found.\n\nWhen using the [Bower plugin](https://github.com/bitovi/system-bower) by default it will assume dependencies are located at `System.baseURL` + `/bower_components`, which is the default location that Bower installs dependencies. Since this is configurable by Bower itself, `bowerPath` provices a way to point to the directory where you install Bower dependencies.  Using in the script tag is the best option:\n\n```html\n<script src=\"vendor/steal/steal.js\"\n\tdata-bower-path=\"vendor\"\n\tdata-main=\"main\"></script>\n```\n\nWould load the Bower configuration file for, for example, `lodash` in `vendor/lodash/bower.json`.\n\n### System.bowerDev\n\nSpecifies whether `devDependencies` included in your bower.json will be included in configuration.\n\nBy default, the [Bower plugin](https://github.com/bitovi/system-bower) will only load configurations for deps listed in `dependencies`. In some cases you might want to also load the `devDependencies`, for example when running unit tests. To do so just include `bowerDev` in the script tag when loading Steal:\n\n```html\n<script src=\"bower_components/steal/steal.js\"\n\tdata-bower-dev=\"true\"\n\tdata-main=\"tests\"></script>\n```\n\n## Configuration\n\n`bower.json` configures the behavior of a package and all dependent packages. This section\ncontains a list of properties that are used by the Bower plugin to configure the loader.\n\n### package.main\n\nSpecifies the [System.main] property unless already defined (such as setting the main\nin your `<script>` tag).\n\n### package.system\n\nBy default, any property on the package.system object is passed to [System.config]. A few properties have special behavior, however:\n\n### package.system.main\n\nThe moduleName of the initial module that shoudl be loaded when the package is imported. This overrides the `package.main` value. Useful when you need to have a `main` that is available for all bower users (like a global script) and a main available for users of the bower plugin (perhaps the CommonJS source):\n\n```json\n{\n  \"name\": \"my-module\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/global.js\",\n  \"system\": {\n    \"main\": \"my-main\"\n  }\n}\n```\n\nThis will load `my-main` as the main module instead of `dist/global.js`.\n\n### package.system.bowerIgnore\n\nUse bowerIgnore to specify dependencies to prevent package information from being loaded. The following example ignores the bower package `jquery-cookie`:\n\n```js\n{\n  \"dependencies\": {\n    \"can\": \"2.2.4\",\n    \"jquery-cookie\": \"1.0.0\"\n  },\n  \"system\": {\n    \"bowerIgnore\": [ \"jquery-cookie\" ]\n  }\n}\n```\n\nThis will load `can` but ignore `jquery-cookie`.\n\n### package.system.configDependencies\n\nDefines dependencies of your bower package. This is useful for loading modules,\nlike extensions, that need to be initialized before the rest of your application\nis imported. For example you can use both bower and [npm] dependencies by setting\nyour `package.json` as a configDependency:\n\n```js\n\n{\n  \"name\": \"my-project\",\n  \"system\": {\n    \"configDependencies\": [\n      \"package.json!npm\"\n    ]\n  }\n}\n```\n\n",
    "description": "\n",
    "type": "module",
    "title": "",
    "types": [
      {
        "type": "*"
      }
    ],
    "name": "bower",
    "parent": "StealJS.modules",
    "signatures": [
      {
        "code": "moduleName!bower",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ],
            "name": "moduleName",
            "description": "The moduleName of the bower configuration file to\nprocess, usually `bower.json`.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "moduleName"
        }
      ],
      "name": "moduleName",
      "description": "The moduleName of the bower configuration file to\nprocess, usually `bower.json`.\n"
    },
    "comment": " "
  },
  "$css": {
    "src": {
      "path": "node_modules/steal/docs/module-css.md"
    },
    "body": "\n## Use\n\nSpecify a CSS dependency like:\n\n    require(\"my.css!\");\n\n\n",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "description": "\nThe `$css` module is configured to process CSS modules.  By default, \nextensions that end with `.css!` will use the `$css` module.  The default path to `$css`\nmodule is `steal/css.js`.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "$css",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "@dev": {
    "src": {
      "path": "node_modules/steal/docs/module-dev.md"
    },
    "body": "\n\n\n## Use\n\nCall `steal.dev.log` to log development info.  For example:\n\n    steal.dev.log(\"app is initializing\");\n\nCall `steal.dev.warn` to log warning information.  For example:\n\n    steal.dev.warn(\"something went wrong\");\n\nCall `steal.dev.assert` to test for truthiness of the expression provided. For example:\n\n    steal.dev.assert(\"foo\" === \"bar\"); // throws!\n\nBy default, [steal-tools] will remove `steal.dev.log`, `steal.dev.warn` and\n`steal.dev.assert` calls from the built output.\n\n\n\n",
    "description": "\nA module loaded in [System.env development] after [@config] but \nbefore [System.main].  It typically loads development-only \ntools.  By default, it loads `steal/dev.js` which provides the following\nvalues on a global `steal.dev`:\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "logLevel",
            "types": [
              {
                "type": "Number"
              }
            ],
            "description": "Controls what types of messages will be logged. By\ndefault the logLevel is 0 so all messages will be logged.",
            "optional": true,
            "defaultValue": "0"
          },
          {
            "name": "warn",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ],
            "description": "Writes out a warning message if `logLevel` is less\nthan 2."
          },
          {
            "name": "log",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ],
            "description": "Writes out a message with `console.log` if `logLevel` is\nless than 1."
          },
          {
            "name": "assert",
            "description": "Throws an error if the expression passed to it is falsy.\n",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ]
          }
        ]
      }
    ],
    "name": "@dev",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "@less-engine": {
    "src": {
      "path": "node_modules/steal/docs/module-less-engine.md"
    },
    "body": "",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "description": "\nThe [LESS compiler](http://lesscss.org/#using-less) which is used by the\n`$less` module to compile modules with `.less!` extension.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "@less-engine",
    "parent": "StealJS.modules"
  },
  "$less": {
    "src": {
      "path": "node_modules/steal/docs/module-less.md"
    },
    "body": "\n## Use\n\nSpecify a LESS dependency like:\n\n    require(\"my.less!\");\n\n",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "description": "\nThe `$less` module is configured to process [LESS](http://lesscss.org) modules.  By default,\nextensions that end with `.less!` will use the `$less` module.  The default path to the `$less`\nmodule is `steal/less.js`.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "$less",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "steal.live-reload": {
    "src": {
      "path": "node_modules/steal/docs/module-live-reload.md"
    },
    "body": "\n## Use\n\nUse live-reload by including it as a configDependency in your `package.json`:\n\n```json\n{\n  \"system\": {\n    \"configDependencies\": [\n      \"live-reload\"\n    ]\n  }\n}\n```\n\nUse [steal-tools] to start a live-reload WebSocket server.\n\n```\nsteal-tools live-reload\n```\n\nThen launch your browser. **live-reload** will connect with the server and modules you change in your text editor will automatically be re-loaded. See the signatures above to understand how to use live-reload to observe reloads and act accordingly.\n\nMost types of applications will need to re-render after a reload cycle. The following example shows this:\n\n```js\nimport reload from \"live-reload\";\nimport template from \"./template.stache!\";\n\nfunction render() {\n\t$(\"#app\").html(template());\n}\n\n// Do the initial render.\nrender();\n\n// Assign a callback that will be called whenever a reload cycle is complete.\n// Call `render` again so that any code that changed code can take effect.\nreload(function(){\n\trender();\n});\n\n```\n\n",
    "description": " Live-reload is a module that enables a speedier development workflow. Paired with a WebSocket server such as StealTools, `live-reload` will reload modules as you change them in your browser.\n\nSee [steal.live-reload.options] for a full set of configuration options that can be provided.\n\n",
    "type": "module",
    "title": "live-reload",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "name": "steal.live-reload",
    "parent": "StealJS.modules",
    "signatures": [
      {
        "code": "reload(callback)",
        "description": "\n\nReloads your application after a full reload cycle is complete.\n\n```\nimport reload from \"live-reload\";\n\n// Re-render your application after each reload.\nreload(function(){\n\trender();\n});\n```\n",
        "params": [
          {
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ],
            "name": "callback",
            "description": "A function to be called after a reload cycle is complete.\n"
          }
        ]
      },
      {
        "code": "reload(moduleName, callback)",
        "description": "\n\nObserve reloading a specific module. Use this if the module creates side effects that need to be re-inited.\n\n```\nimport reload from \"live-reload\";\n\n// Re-initialize the router.\nreload(\"app/router\", function(router){\n\twindow.router = router;\n\trouter.start();\n});\n```\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "moduleName",
            "description": "the name of the module observing."
          },
          {
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "value"
                      }
                    ]
                  }
                ]
              }
            ],
            "name": "callback",
            "description": "A function to be called when a specific module reloads. Is called with the new value.\n"
          }
        ]
      },
      {
        "code": "reload(\"*\", callback)",
        "description": "\n\nObserve every module as they are reloaded.\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "star",
            "description": "The string `\"*\"` denotes that all module names will be observed."
          },
          {
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "moduleValue"
                      }
                    ]
                  }
                ]
              }
            ],
            "name": "callback",
            "description": "A function that will be called for each module as it is reloaded, with the `moduleName` and new `moduleValue` provided.\n"
          }
        ]
      },
      {
        "code": "reload.dispose(callback)",
        "description": "\n\nObserve the disposal of the current module. Used when the module has side-effects such as setting properties on the `window` that need to be removed before the module is reloaded.\n\n```\nimport reload from \"live-reload\";\n\nwindow.App = {};\n\nreload.dispose(function(){\n\tdelete window.App;\n});\n```\n",
        "params": [
          {
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ],
            "name": "callback",
            "description": "Function called before the module is deleted from the registry.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "name": "callback",
      "description": "Function called before the module is deleted from the registry.\n"
    },
    "comment": " "
  },
  "steal.live-reload.options": {
    "src": {
      "path": "node_modules/steal/docs/module-live-reload.options.md"
    },
    "body": "\n\n",
    "description": "\nThe following options can be specified to configure [steal.live-reload]'s behavior, using any method specified in [System.config].\n",
    "type": "typedef",
    "title": "LiveReloadOptions",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "liveReloadPort",
            "description": "\n\nSpecifies a port to use to establish the WebSocket connection. By default `8012` will be used. This can be specified in the script tag or in your config.\n",
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "defaultValue": "8012"
          },
          {
            "name": "liveReload",
            "description": "\n\nSpecifies whether to try and connect with a WebSocket server. If provided as the string `false` (such as through the script tag), this is also honored.\n\nThis is only useful to temporarily disable live-reload while you have the server off.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "liveReloadAttempts",
            "description": "\n\nIf live-reload is unable to connect to a server it can attempt to retry on a delay. This option specifies the number of times to try connecting. By default liveReloadAttempts is 1, meaning no retries will occur.\n",
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "defaultValue": "1"
          },
          {
            "name": "liveReloadRetryTimeout",
            "description": "\n\nWhen live-reload retries to connect to a server, this option configures the timeout, in milliseconds, before a retry will occur.\n",
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "defaultValue": "500"
          }
        ]
      }
    ],
    "name": "steal.live-reload.options",
    "parent": "steal.live-reload",
    "comment": " "
  },
  "@loader": {
    "src": {
      "path": "node_modules/steal/docs/module-loader.md"
    },
    "body": "\nIn most cases they are the same, but during the build there are multiple loaders; and if using [steal.steal-clone] to test injected modules.\n\n\n## Use\n\nTo use **@loader** simply import it and use it in the same way you\nwould use [System](steal#section_LoaderandSystemnamespaces).\n\n    import loader from \"@loader\";\n\n\tloader.config({\n\t\tmap: {\n\t\t\ta: \"b\"\n\t\t}\n\t});\n\n\tloader.import(\"someOtherModule\").then(function(mod){\n\n\t});\n\nThis works with any syntax supported by StealJS.\n\n",
    "description": "\n**@loader** is a module that refers to the loader that is loading the module. Any time you need to configure the loader or dynamically import modules, it's best to use `@loader` rather than the global `System`.\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "*",
        "description": "The **@loader** module is the `Loader` that is loading your code.\n"
      }
    ],
    "name": "@loader",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "npm": {
    "src": {
      "path": "node_modules/steal/docs/module-npm.md"
    },
    "body": "\n## Use\n\nThe `npm` plugin makes it easy to work with npm packages. By pointing it \nat a `package.json`, you will be able to import npm packages as modules.\n\nBy default, if [System.stealPath] points to steal.js within node_modules like:\n\n    <script src=\"../node_modules/steal/steal.js\"></script>\n    \n[System.configMain] will point to `\"package.json!npm\"`. The plugin is included with Steal and no configuration is needed on your part to use it.\n\nThe `npm` plugin reads `package.json` and sets a normalize and locate hook.\n\n**Note**: if you are using NPM 3 see the *npmAlgorithm* option below.\n\n\n## NPM Module names\n\nPackage dependency module names are converted to look like: \n\n> packageName@version#modulePath!pluginName\n\nFor example, code that import's jQuery like:\n\n    import $ from \"jquery\"\n\nmight actually import:\n\n    jquery@2.1.3#dist/jquery.js\n\n## Configuration\n\n`package.json` configures the behavior of a package and even dependency \npackages.  This section lists the configurable properties and behaviors that\nsteal uses.  \n\n### package.main\n\nSpecifies the [System.main] property unless it is overwritten by `package.browser` or\n`package.system.main`. \n\n```\n{\n  \"main\": \"myapp\"\n}\n```\n\n### package.browser\n\nSpecifies browser-specific overwrites for module file resolution.  This \nbehaves like Browserify's [browser field](https://github.com/substack/node-browserify#browser-field).\n\n```\n{\n  \"browser\": {\n    \"fs\": \"level-fs\",\n    \"./lib/ops.js\": \"./browser/opts.js\"\n  }\n}\n```\n\n### package.globalBrowser\n\nGlobal browser specific overwrites for module file resolution.  These mapping take effect\nfor all projects.  Use sparingly. Add [steal-builtins](https://www.npmjs.com/package/steal-builtins)\nas a dependency for a nearly comprehensive list. See the [example app](https://github.com/stealjs/steal-builtins-example) which uses the `events` builtin.\n\n```\n{\n  \"globalBrowser\": {\n    \"console\": \"console-browserify\",\n    \"constants\": \"constants-browserify\"\n  }\n}\n```\n\n### package.system\n\nBy default, any property on the package.system object is passed to [System.config]. However, the \nfollowing properties have special behavior:\n\n### package.system.main\n\nThe moduleName of the initial module that should be loaded when the package is imported. For example:\n\n```\n{\n  \"name\": \"my-module\",\n  \"version\": \"1.2.3\",\n  \"system\": {\n    \"main\": \"my-main\"\n  }\n}\n```\n\nWhen `my-module` is imported, `my-module@1.2.3#my-main` will be the actual module name being \nimported.  This path that `my-main` will be found depends on the `directories.lib` setting.\n\n\n### package.system.map\n\nThe map config works similar to the base [System.map] behavior.  However, both the keys and values\nare converted to NPM module names.  The keys and values must:\n\n - Start with `./` to map modules within the package like `\"./src/util\"`, or\n - Look like `packageName#./modulePath` to map direct dependencies of the package.\n \n```js\n{\n  \"system\": {\n    \"map\": {\n      \"./util/util\": \"./util/jquery/jquery\",\n      \"jquery\" : \"lodash\"\n    }\n  }\n}\n```\n\n### package.system.meta\n\nThe meta config works similar to the base [System.meta] behavior.  However, the module names must:\n\n - Start with `./` to add metadata to modules within the package like `\"./src/util\"`, or\n - Look like `packageName#./modulePath` to add metadata to direct dependencies of the package.\n\nExample:\n\n```js\n{\n  \"system\": {\n    \"meta\": {\n      \"./src/utils\": {\"format\": \"amd\"},\n      \"jquery\": {\"format\": \"global\"},\n      \"lodash#./array/grep\": {\"format\": \"es6\"}\n    }\n  }\n}\n```\n\n### package.system.npmIgnore\n\nUse npmIgnore to prevent package information from being loaded for specified dependencies\nin the `peerDependencies`, `devDependencies` or `dependencies`.  The following\nignores a package.json's `devDependencies` and `cssify`.  But all other\ndependencies will be loaded:\n\n```js\n{\n  \"dependencies\": {\n    \"can\": \"2.2.4\",\n    \"cssify\": \"^0.6.0\"\n  },\n  \"devDependencies\": {\n    \"steal-tools\": \"0.5.0\"\n  },\n  \"system\": {\n    \"npmIgnore\": [\"devDependencies\",\"cssify\"]\n  }\n}\n```\n\nThe following packages are ignored by default:\n\n - \"steal\", \"steal-tools\"\n - \"bower\"\n - \"grunt\", \"grunt-cli\"\n\n### package.system.npmDependencies\n\nLike `npmIgnore` but affirmative. If used alone will only include the dependencies listed. If used in conjunction with `npmIgnore` acts as an override. For example the following config:\n\n```js\n{\n  \"dependencies\": {\n    \"one\": \"1.0.0\",\n\t\"two\": \"1.0.0\"\n  },\n  \"system\": {\n    \"npmDependencies\": [ \"one\" ]\n  }\n}\n```\n\nWill load `one` but ignore `two`.\n\nWhen used in conjuction with `npmIgnore`:\n\n```js\n{\n  \"devDependencies\": {\n\t\"one\": \"1.0.0\",\n\t\"two\": \"1.0.0\",\n\t\"three\": \"1.0.0\"\n  },\n  \"system\": {\n\t\"npmIgnore\": [ \"devDependencies\" ],\n\t\"npmDependencies\": [ \"one\" ]\n  }\n}\n```\n\nEven though `npmIgnore` is set to ignore all `devDependencies` the use of `npmDependencies` acts as an override. The package `one` will be loaded, but not `two` or `three`.\n\n### package.system.npmAlgorithm\n\nUsed to determine which algorithm is used to look up packages. [NPM 3](http://blog.npmjs.org/post/122450408965/npm-weekly-20-npm-3-is-here-ish) introduced a new flat file structure inside node_modules. If you are using NPM 3 set this option:\n\n```js\n{\n  \"system\": {\n    \"npmAlgorithm\": \"flat\"\n  }\n}\n```\n\n### package.system.ignoreBrowser\n\nSet to true to ignore browserfy's `browser` and `browserify` configurations.\n\n```js\n{\n  \"system\": {\n    \"ignoreBrowser\": true\n  }\n}\n```\n\n### package.system.directories\n\nSet a folder to look for module's within your project.  Only the `lib` \ndirectory can be specified.\n\nIn the following setup, `my-project/my-utils` will be looked for in\n`my-project/src/my-utils.js`:\n\n```js\n{\n  \"name\": \"my-project\"\n  \"system\": {\n    \"directories\" : {\n      \"lib\" : \"src\"\n    }\n  }\n}\n```\n\n### package.system.configDependencies\n\nDefines dependencies of your npm package. This is useful for loading modules,\nlike extensions, that need to be initialized before the rest of your application\nis imported. For example you can use both npm and [bower] dependencies by setting\nyour `bower.json` as a configDependency:\n\n```js\n\n{\n  \"name\": \"my-project\",\n  \"system\": {\n    \"configDependencies\": [\n      \"bower.json!bower\"\n    ]\n  }\n}\n```\n\n",
    "description": "\n",
    "type": "module",
    "title": "",
    "types": [
      {
        "type": "*"
      }
    ],
    "name": "npm",
    "parent": "StealJS.modules",
    "signatures": [
      {
        "code": "moduleName!npm",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ],
            "name": "moduleName",
            "description": "The moduleName of the file you want \nto process. This will normally be a package.json of your base application.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "moduleName"
        }
      ],
      "name": "moduleName",
      "description": "The moduleName of the file you want \nto process. This will normally be a package.json of your base application.\n"
    },
    "comment": " "
  },
  "steal.steal-clone": {
    "src": {
      "path": "node_modules/steal/docs/module-steal-clone.md"
    },
    "body": "\n## Use\n\nIf you have `moduleA` defined as:\n\n```js\nimport moduleB from 'moduleB';\n\nexport default function() {\n  return 'moduleA ' + moduleB();\n};\n```\n\nand `moduleB` defined as:\n\n```js\nexport default function() {\n  return 'moduleB';\n};\n```\n\nYou can use `clone` to override the definition of moduleB that will be used from within moduleA:\n\n```js\nimport clone from 'steal-clone';\n\nclone({\n  'moduleB': {\n    default: function() {\n      return 'moduleBOverride';\n    }\n  }\n}).import('moduleA', function(moduleA) {\n  moduleA(); // moduleA moduleBOverride\n});\n```\n\n### Module Identifiers\n\nThe keys passed in the `moduleOverrides` object (\"moduleB\" in the example above) can be any valid module identifier. All of the module syntaxes supported by Steal are supported by steal-clone. If you're using [ES6 modules](http://stealjs.com/docs/syntax.es6.html), you can use the same value used in your import statement. Similarly, if you're using [CommonJS](http://stealjs.com/docs/syntax.CommonJS.html), you can use the same value that you pass to 'require'.\n\nYou can also use relative paths to override modules based on where you are using steal-clone:\n\n```js\nclone({\n\t'./moduleB': ...\n});\n```\n\n### Module Definitions\n\nThe values passed in the `moduleOverrides` object define the exports for that module. In the above example, `moduleB` has a single default export.\n\nIf `moduleB` is defined like:\n\n```js\nconst name = 'moduleB';\n\nexport let getName = function() {\n  return name;\n};\n\nexport let getExcitedName = function() {\n  return name + '!';\n};\n```\n\nYou can override both of the module's exports like this:\n\n```js\nclone({\n  'moduleB': {\n    getName: function() {\n      return 'moduleBOverride';\n    },\n    getExcitedName: function() {\n      return 'moduleBOverride!';\n    }\n  }\n});\n```\n\n### Dynamically imported modules\n\nIt's possible to provide overrides to modules that will be later dynamically imported. If you have a `moduleC` defined as:\n\n```js\nimport loader from '@loader';\n\nloader.import('moduleB').then(function(){\n\n});\n```\n\nYou will be able to override the value of `moduleB`. Note that for this to work you must import [@loader] to use for dynamic loading instead of using `System.import`. This is because `@loader` will refer to the cloned loader you created where as `System` always refers back to the global loader. Using [@loader] is always recommended anyways.\n\n### Use with Bower or NPM\n\nSteal-clone can be used to override dependencies from [Bower](http://stealjs.com/docs/bower.html) or [NPM](http://stealjs.com/docs/npm.html) in the same way as any other module.\n\n",
    "description": " Steal-clone is a module that allows you to clone Steal's loader and provide module definitions that will be used when doing dynamic imports.\n\n",
    "type": "module",
    "title": "steal-clone",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "name": "steal.steal-clone",
    "parent": "StealJS.modules",
    "signatures": [
      {
        "code": "clone(moduleOverrides)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "name": "moduleOverrides",
            "description": "Module identifiers and definitions used to override modules of the same name. These definitions will be used when importing parent modules using the `import` statement of the returned loader.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Object",
              "options": []
            }
          ],
          "description": "The cloned loader.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "moduleOverrides",
      "description": "Module identifiers and definitions used to override modules of the same name. These definitions will be used when importing parent modules using the `import` statement of the returned loader.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "description": "The cloned loader.\n"
    },
    "comment": " "
  },
  "@steal": {
    "src": {
      "path": "node_modules/steal/docs/module-steal.md"
    },
    "body": "\n\n## Use\n\nTo use `@steal` simply import it into your code:\n\n    import steal from \"@steal\";\n\n\t// Wait for steal to finish loading\n\tsteal.done().then(function(){\n\n\t});\n\nThis works with any syntax supported by StealJS.\n\n",
    "description": "\n`@steal` is a module that refers to the instance of **steal** that is loading your module. You might use @steal in scenarios where you need to use Steal's special methods, such as [steal.done], and don't want to rely on the global `window.steal`.\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "*",
        "description": "The `@steal` module is the `steal` that is loading your code.\n"
      }
    ],
    "name": "@steal",
    "parent": "StealJS.modules",
    "comment": " "
  },
  "@traceur": {
    "src": {
      "path": "node_modules/steal/docs/module-traceur.md"
    },
    "body": "",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "description": "\nThe [traceur compiler](https://github.com/google/traceur-compiler) which\nis used to convert ES6 to ES5.  The defaut path to `@traceur` is specified in\n[System.paths].\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "@traceur",
    "parent": "StealJS.modules"
  },
  "locate": {
    "src": {
      "path": "node_modules/steal/docs/scheme-locate.md"
    },
    "body": "\nCurrently this syntax is supported in the bundled CSS, LESS & Stache extensions.\n\nNote: In LESS & Stache this syntax is available recursively, that is, it's available in stache & LESS files that are\nsub-imports of those you include directly in your modules & pages. However this isn't available for CSS imports, as CSS\nimports are handled by the browser without the Steal CSS plugin having a chance to rewrite any 'locate://' paths.\n\nAs an example in a LESS context, we could import bootstrap into a stylesheet from the bootstrap npm module:\n\n/my-app/a/nested/stylesheet.less\n\n`@import 'locate://bootstrap/less/bootstrap.less';`\n\nit would be rewritten (assuming the default location of node_modules) to:\n\n`@import '../../node_modules/bootstrap/less/bootstrap.less'`\n\n",
    "description": "\nA path scheme that rewrites the path via the steal path resolution system. This syntax is only available in a file\nloaded by a supported extension.\n",
    "title": "locate://",
    "name": "locate",
    "parent": "StealJS.schemes",
    "type": "property",
    "signatures": [
      {
        "code": "locate://resourcePath",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "resourcePath",
            "description": "Path to a resource to resolve via Steal. May be relative to the file, the baseURL, a npm\nor bower module, or any stealable module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "String"
            }
          ],
          "description": "A path to the located resource, relative to the importing file."
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "resourcePath",
      "description": "Path to a resource to resolve via Steal. May be relative to the file, the baseURL, a npm\nor bower module, or any stealable module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "String"
        }
      ],
      "description": "A path to the located resource, relative to the importing file."
    }
  },
  "steal.done": {
    "src": {
      "path": "node_modules/steal/docs/steal-done.md"
    },
    "body": "\n\n## Use\n\nCalling **steal.done** is useful in scenarios where you need to start some process after the dependency graph of your application has been fully imported. For example (used with [@steal]):\n\n    var steal = require(\"@steal\");\n\tvar QUnit = require(\"qunit\");\n\n\tsteal.done().then(function(){\n      QUnit.load();\n\t});\n\nThis will start running QUnit tests after all modules have loaded.\n\n",
    "description": "\nA promise for when the application has loaded. Useful if you want to automatically run some code (like tests) after everything has loaded.\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "title": "",
    "name": "steal.done",
    "type": "property",
    "parent": "StealJS.functions",
    "signatures": [
      {
        "code": "steal.done()",
        "description": "\n",
        "params": [],
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "A promise that will resolve when the [System.configMain] and [System.main] have loaded.\n"
        }
      }
    ],
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise that will resolve when the [System.configMain] and [System.main] have loaded.\n"
    },
    "comment": " "
  },
  "steal.import": {
    "src": {
      "path": "node_modules/steal/docs/steal-import.md"
    },
    "body": "\n\n## Use\n\n`steal.import` is useful for dynamically importing modules. It is like [System.import] but with 2 advantages:\n\n1. It waits for the [System.configMain] to be loaded before importing `moduleName`, so if configuration is needed it will work.\n2. It allows you to pass multiple moduleNames as arguments to prevent verbose code.\n\n### Browser\n\n```js\n<script src=\"node_modules/steal/steal.js\"></script>\n<script>\n\tsteal.import(\"my/main\").then(function(mainValue){\n\t\t\n\t});\n</script>\n```\n\n### Node\n\n`steal.import` is useful in Node for the same reason, as it prevents having to call `steal.startup` prior to importing the modules you care about.\n\n```js\nvar steal = require(\"steal\").clone();\n\nsteal.import(\"server/main\");\n```\n\n",
    "description": "\nDynamically imports modules after initial configuration has loaded. Otherwise works very similar to [System.import].\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "title": "",
    "name": "steal.import",
    "type": "property",
    "parent": "StealJS.functions",
    "signatures": [
      {
        "code": "steal.import(...moduleName)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ],
            "name": "moduleName",
            "description": "Names of modules wanting to import.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "A promise that will resolve with the values of the imported modules.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "moduleName"
        }
      ],
      "name": "moduleName",
      "description": "Names of modules wanting to import.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise that will resolve with the values of the imported modules.\n"
    },
    "comment": " "
  },
  "StealJS.syntaxes": {
    "name": "StealJS.syntaxes",
    "title": "syntaxes",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.config": {
    "name": "StealJS.config",
    "title": "config",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.modules": {
    "name": "StealJS.modules",
    "title": "modules",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.types": {
    "name": "StealJS.types",
    "title": "types",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.functions": {
    "name": "StealJS.functions",
    "title": "functions",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.schemes": {
    "name": "StealJS.schemes",
    "title": "schemes",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "StealJS.hooks": {
    "name": "StealJS.hooks",
    "title": "hooks",
    "type": "group",
    "parent": "steal",
    "description": "",
    "order": 0
  },
  "steal": {
    "src": {
      "path": "node_modules/steal/docs/steal.md"
    },
    "body": "\nThere are four basic steps when using Steal:\n\n - Install steal\n - Add the steal script tag\n - Configure steal\n - Import modules and make stuff happen\n\nSteal works slightly differently depending on how it is installed.  There\nare three ways to install Steal:\n\n - [npm](#section_NPMbasics)\n - [bower](#section_Bowerbasics)\n - [download](#section_Downloadbasics)\n\n## NPM basics\n\nThe following details how to use steal installed via [npm](https://www.npmjs.com/) to make\na simple jQuery app.\n\n### Install\n\n```\n> npm install steal -S\n> npm install jquery\n```\n\nNext to your application's _node_modules_ folder, create _myapp.js_ and\n_myapp.html_:\n\n```\n/\n  node_modules/\n  package.json\n  myapp.js\n  myapp.html\n```\n\n### Add the script tag\n\nIn _myapp.html_, add a script tag that that loads _steal.js_ and points\nto the [System.main main] entrypoint of your application. If\nmain is not provided, [System.main] will be set to _package.json_'s main.\n\n```\n<!-- myapp.html -->\n<script src=\"./node_modules/steal/steal.js\" main=\"myapp\"></script>\n```\n\n### Configure\n\nSteal reads your application's _package.json_ and all of its \n`dependencies`, `peerDependencies`, and `devDependencies` recursively.\n\nMost configuration is done in the `system` property of \npackage.json. The special npm configuration options are listed [npm here].\n\n\nThe following _package.json_ only loads the `dependencies`.\n\n```\n{\n  \"name\": \"myapp\",\n  \"main\": \"myapp\",\n  \"dependencies\": {\n    \"jquery\": \"2.1.3\"\n  },\n  \"devDependencies\": {...}\n  \"system\": {\n    \"npmIgnore\": [\"devDependencies\"]\n  }\n}\n```\n\nIf there are problems loading some of your dependencies, read how to configure them on the [npm] page.\n\n### Import modules and make stuff happen\n\nIn _myapp.js_, import your dependencies and write your app:\n\n```\n// myapp.js\nimport $ from \"jquery\";\n$(\"body\").append(\"<h1>Hello World</h1>\")\n```\n\n\n## Bower basics\n\nUsing Bower is similar to using NPM but has a few options specific to how Bower works.\n\n### Install\n\n```\n> bower install steal --save\n> bower install canjs --save\n```\n\n### Use\n\nIf you are using a typical installation of Bower using it can be as simple as:\n\n```html\n<script src=\"bower_components/steal/steal.js\" main=\"myapp\"></script>\n```\n\nThis will load your `bower.json` file and use your `dependencies` to configure packages\nthat you are using (such as CanJS in this example). Unlike NPM, with Bower your\n`devDependencies` are not configured by default, although this may change in the future.\nTo enable the configuration of devDependencies add the following to your script tag:\n\n```html\nbower-dev=\"true\"\n```\n\n#### Specifying components folder\n\nUnlike NPM, Bower allows you to configure an alternate folder to install dependencies\nrather than the default `bower_components`. If you are using a different folder\nyou can specify that as an attribute in the script tag as well:\n\n```html\nbower-path=\"vendor\"\n```\n\nWill look for dependencies in `System.baseURL` + \"/vendor\".\n\n### Importing in your app\n\nFrom here using packages is the same as if you used NPM, just import them into\n_myapp.js_ and do what you need:\n\n```js\nimport can from \"canjs\";\n\nvar renderer = can.stache(\"<h1>StealJS {{what}}</h1>\");\ncan.$(\"body\").append(renderer({\n\twhat: \"rocks!\"\n}));\n```\n\n## Download basics\n\nThe following details how to use steal installed via its download to\nmake a basic jQuery app.\n\n### Install\n\n[Download Steal](https://github.com/bitovi/steal/archive/master.zip) and unzip into your application's folder. \n\nIn your application's folder, create _myapp.js_,\n_myapp.html_ and _config.js_. You should have something like:\n\n```\n/\n  steal/\n    ext/\n    steal.js\n    steal.production.js\n  myapp.js\n  myapp.html\n```\n\n### Add the script tag\n\nIn _myapp.html_, add a script tag that that loads _steal.js_ and points\nto the [System.configPath configPath] and [System.main main] entrypoint of your application.\n\n\n```\n<!-- myapp.html -->\n<script src=\"../path/to/steal/steal.js\"\n        config=\"./config.js\"\n        main=\"myapp\">\n</script>\n```\n\n### <a name=\"path-configure\"></a>Configure\n\n`config.js` is used to configure the behavior of\nyour site's modules. For example, to load jQuery from a CDN:\n\n```\n// config.js\nSystem.config({\n  paths: {\"jquery\": \"http://code.jquery.com/jquery-1.11.0.min.js\"}\n});\n```\n\n> Note: Steal makes an AJAX request for the above example. Both client and server will need \n> to accept/handle CORS requests properly when using remote resources.\n\n\n### Import modules and make stuff happen\n\nIn _myapp.js_, import your dependencies and write your app:\n\n```js\n// myapp.js\nimport $ from \"jquery\";\n$(\"body\").append(\"<h1>Hello World</h1>\")\n```\n\n## Loader and System objects\n\nLoader is a proposed constructor, allowing for the creating of custom ES6 module loaders. Documentation \ncan be found [here](http://whatwg.github.io/loader/).\n\nSystem is the proposed default Loader, allowing for APIs such \nas [System.import] and [System.config]. Documentation and polyfill information can be \nfound [here](https://github.com/ModuleLoader/es6-module-loader).\n\nLoader and System are currently \npolyfilled by [SystemJS](https://github.com/systemjs/systemjs).\n\n## Configuring the `System` loader\n\nOnce steal.js loads, its startup behavior is determined\nconfiguration values.  Configuration values can be set in three ways:\n\n - Set on a `steal` object prior to loading steal.js like:\n  \n        <script>\n          steal = {main: \"myapp\"};\n        </script>\n        <script src=\"../path/to/steal/steal.js\"></script>\n   \n - Attributes on the steal.js script tag like:\n  \n        <script src=\"../path/to/steal/steal.js\"\n                main=\"myapp\">\n        </script>\n \n - Calling [System.config] or setting `System` configuration properties\n   after `steal.js` has loaded. This technique is typically used in the [System.configMain] module.\n\n        System.config({\n          paths: {\"can/*\" : \"http://canjs.com/release/2.0.1/can/*\"}\n        })\n        System.meta[\"jquery\"] = {format: \"global\"}\n        \n   If you are using bower or npm, your app's bower.json or package.json will be loaded automatically. System\n   configuration happens in their `system` properties:\n   \n        {\n          \"name\": \"myapp\",\n          \"dependencies\": { ... },\n          \"system\": {\n            \"map\": {\"can/util/util\": \"can/util/jquery/jquery\"}\n          }\n        }\n\nTypically, developers configure the [System.main] and [System.configPath] properties \nwith attributes on the steal.js script tag like:\n\n    <script src=\"../path/to/steal/steal.js\"\n            main=\"myapp\"\n            config-path=\"../config.js\">\n    </script>\n\nSetting [System.configPath] sets [System.baseURL] to the \nconfigPath's parent directory.  This would load _config.js_ prior to\nloading _../myapp.js_.\n\nWhen _steal.js_ loads, it sets [System.stealPath stealPath].  [System.stealPath stealPath] sets default values\nfor [System.baseURL baseURL] and [System.configPath configPath]. If _steal.js_ is in _bower_components_,\n[System.configPath] defaults to _bower_components_ parent folder. So if you write:\n\n    <script src=\"../../bower_components/steal/steal.js\"\n            main=\"myapp\">\n    </script>\n\nThis will load `../../bower.json` before it loads `../../myapp.js`.\n\n## Writing Modules\n\nOnce you've loaded and configured steal's behavior, it's time to start \nwriting and loading modules.  Currently, [syntax.es6 ES6 syntax] is supported\nin IE9+.  ES6 syntax looks like:\n\n    import can from \"can\";\n    \n[@traceur Traceur Compiler] is used and all of \nof its [language features](https://github.com/google/traceur-compiler/wiki/LanguageFeatures) will work.\n\nIf you must support <IE8, use any of the other syntaxes.\n\nFinally, steal supports [$less less] and [$css css] out of the box. Import, require, or\nsteal them into your project by adding a \"!\" after the filename.\n\n    // ES6\n    import \"style.less!\";\n    \n    // AMD\n    define([\"style.less!\"],function(){ ... });\n    \n    // CommonJS\n    require(\"style.less!\");\n    \n    // steal\n    steal(\"style.less!\")\n\n\n",
    "description": "\nSteal is a  module loader that supports a wide variety of \nsyntaxes and configuration options. It makes modular development, test\nand production workflows simple.\n",
    "name": "steal",
    "type": "page",
    "parent": "StealJS.api"
  },
  "StealJS.api": {
    "name": "StealJS.api",
    "title": "apis",
    "type": "group",
    "parent": "StealJS",
    "description": "",
    "order": 0
  },
  "StealJS.guides": {
    "name": "StealJS.guides",
    "title": "guides",
    "type": "group",
    "parent": "StealJS",
    "description": "",
    "order": 0
  },
  "StealJS": {
    "src": {
      "path": "node_modules/steal/docs/stealjs.md"
    },
    "body": "\nStealJS is a module loader and builder that will help you create the next great app. It's designed to simplify dependency management while being extremely powerful and flexible.\n\nStealJS is composed of two parts.\n- [steal] - the module loader\n- [steal-tools] - the builder\n\n### The Module loader\n[steal Steal] supports the future - [ES6 Module Loader](https://github.com/ModuleLoader/es6-module-loader) syntax -\nwith everything [traceur supports](https://github.com/google/traceur-compiler/wiki/LanguageFeatures),\nwhile supporting [syntax.amd], and [syntax.CommonJS]. It can load [npm] modules without configuration.\n\nSteal makes your development workflow simple and easy. Steal automatically\nloads a [@config config] and [@dev development tools] module, supports css and less, and makes it easy to switch\nbetween development and production [System.env environments].\n\n### The Builder\n[steal-tools Steal-tools] builds your application or exports your project to AMD, CommonJS or standalone formats.\nAnd [steal-tools] can build progressively loaded apps that balance caching and script requests resulting in lightning-fast load times.\n\nFor more information, checkout [StealJS.why], or our step-by-step [StealJS.quick-start] guide to help you get up and running.\n\n",
    "description": "\n_Good artists copy; great artists steal._\n",
    "name": "StealJS",
    "type": "page"
  },
  "syntax.amd": {
    "src": {
      "path": "node_modules/steal/docs/syntax-amd.md"
    },
    "body": "\n## Use\n\nAMD is similar to [syntax.steal steal] in that you define a module using a wrapper function. \nUnlike steal, modules are defined as an array, like so:\n\n    define([\n        \"can/can\", \n        \"underscore/underscore\", \n        \"some_module/some_module\"], \n      function(can, _, myModule){\n        return can.Component.extend({\n\n        });\n    });\n\nAlso like Steal, with AMD you define the module's definition by returning a value from the function body. AMD differs in that the module ids you pass in the dependency array must point to a single file, not a folder.\n\nAMD also provides a conventient syntax that can be used rather than providing a dependency array that mimics CommonJS:\n\n    define(function(require, exports, module){\n      var can = require(\"can/can\");\n      var _ = require(\"underscore/underscore\");\n      var myModule = require(\"my_module/my_module\");\n\n      return ...\n    });\n\n",
    "description": "\n",
    "title": "AMD ",
    "name": "syntax.amd",
    "type": "function",
    "parent": "StealJS.syntaxes",
    "comment": " "
  },
  "syntax.CommonJS": {
    "src": {
      "path": "node_modules/steal/docs/syntax-commonjs.md"
    },
    "body": "\n## Use\n\nCommonJS is a popular format used in Node.js, but has also caught on in the browser. People \nlike CommonJS because it doesn't require a wrapper function. You might define a module like so:\n```\nvar can = require(\"can\");\nvar _ = require(\"underscore\");\nvar myModule = require(\"some_module/some_module\");\n\nmodule.exports = can.Component.extend({\n\n});\n```\nWith CommonJS a single file will always define a single module. In includes 3 key objects: `require`, `exports` and `module`.\n\n**require** is used to import modules as dependencies. In the above example, `can` is being imported using require.\n\n**exports** is an object that can be used to attach properties to the exported module definition.\n\n**module** is an object representing the module definition. You'll often use either `exports` or `module`. \nUsually module is used when you want to export a single value, like a function.\n",
    "description": "\n",
    "title": "CommonJS ",
    "name": "syntax.CommonJS",
    "type": "function",
    "parent": "StealJS.syntaxes",
    "signatures": [
      {
        "code": "require(moduleName)",
        "description": "\n\nThe [CommonJS](http://wiki.commonjs.org/wiki/CommonJS) syntax used commonly in \nNodeJS environments.\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "moduleName",
            "description": "The name of module to load.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "*"
            }
          ],
          "description": "The module value.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "moduleName",
      "description": "The name of module to load.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "*"
        }
      ],
      "description": "The module value.\n"
    },
    "comment": " "
  },
  "syntax.global": {
    "src": {
      "path": "node_modules/steal/docs/syntax-global.md"
    },
    "body": "\n\n## Use\n\nA global module might look like:\n\n    // app/sample-global.js\n    hello = \"world\";\n\nUse [System.meta] to configure this module as the global format like:\n\n    System.meta[\"app/sample-global\"] = {format: \"global\"}\n\nUsing [System.meta] you can also set a module's dependencies and what it exports.  These configurations\ncan also be set inline like:\n\n    // app/sample-global.js\n    \"format global\";\n    \"exports hello\";\n    hello = \"world\";\n\n## Implementation\n\nImplemented in [SystemJS](https://github.com/systemjs/systemjs#global-module-format-support)\n\n",
    "description": "\nIf a script simply exports its values on the global or window object,\nit uses the \"global\" syntax.\n",
    "title": "global",
    "name": "syntax.global",
    "type": "function",
    "parent": "StealJS.syntaxes",
    "comment": " "
  },
  "syntax.es6": {
    "src": {
      "path": "node_modules/steal/docs/syntax-es6.md"
    },
    "body": "\n## Use\n\nThe ES6 syntax is the module syntax that will be part of the EMCAScript 6 standard currently in development.\nBecause ES6 syntax is not valid in ES5 it requires compilation to use.\nSteal brings along [@traceur Traceur] to act as the ES6 compiler, which it does on the\nfly. When developing you won't even notice that it is loaded, and when\nbuilt your modules are compiled down to ES5.\n\nES6 uses the keywords `import` and `export` for importing and exporting respectively. For example:\n\n    import can from \"can\";\n\nThis will import `can` from the can module, assuming it is the default exported value. If a module exports several values you can specify which to import using curly braces. Take an example of a `Math` module that exports several functions to do operations; it might be defined like so:\n\n```\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n```\n\nTo import one or more of these exported values use curly braces in your module like so:\n\n    import { add, subtract } from \"math\";\n\nYou can export any type of value, like a normal var:\n\n    export var foo = \"bar\";\n\nIf you want to export a single value you can do so using the `default` keyword like so:\n```\nexport default function add(a, b){\n  return a + b;\n}\n```\nBecause Traceur is a full ES6 to ES5 compiler you can use many ES6 features beyond just module loading. Listing these is beyond the scope of this document, but you can check out many of the language features Traceur supports [here](https://github.com/google/traceur-compiler/wiki/LanguageFeatures).\n\n## Browser Support\n\nThe ES6 syntax is only available in IE9+. The [@traceur Tracer Runtime] requires `Object.defineProperty`. PhantomJS 1.x is also not supported due to limited support for getters and setters.\n\n",
    "description": "\n",
    "title": "ES6",
    "name": "syntax.es6",
    "type": "function",
    "parent": "StealJS.syntaxes",
    "comment": " "
  },
  "syntax.steal": {
    "src": {
      "path": "node_modules/steal/docs/syntax-steal.md"
    },
    "body": "\n## Use\n\nIf you used the old Steal you're already familiar with this syntax, \nand it works the same in the new version. List all of your dependencies as regular \narguments to `steal` and the last argument is a function to be called to define the module's \nvalue after all of the dependencies have been loaded:\n\n    steal(\"can\", \"underscore\", \"some_module\", function(can, _, myModule){\n      return can.Component.extend({\n       \n      });\n    });\n\nSteal differs from other syntaxes in one key way, when specifying dependencies, \nthe module ids point to a folder with the pattern of `folder/folder.js`. \nIn the above example `can` will look for the module at `can/can.js`.\n\n",
    "description": "\n",
    "title": "steal ",
    "name": "syntax.steal",
    "type": "function",
    "parent": "StealJS.syntaxes",
    "comment": " "
  },
  "System.babelOptions": {
    "src": {
      "path": "node_modules/steal/docs/system-babelOptions.md"
    },
    "body": "\n\n## JSX\n\nBabel comes with support for transpiling JSX but it is not enabled by default in Steal. To enable the JSX support you can simply pass an empty array for the blacklist like so:\n\n```js\nSystem.config({\n  \"babelOptions\": {\n    \"blacklist\": []\n  }\n});\n```\n\n",
    "description": "\nOptions that will be passed into Babel when compiling ES6 code. The options are the same described [here](https://babeljs.io/docs/usage/options/).\n",
    "types": [
      {
        "type": "Object",
        "options": []
      }
    ],
    "title": "",
    "name": "System.babelOptions",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.buildConfig": {
    "src": {
      "path": "node_modules/steal/docs/system-buildConfig.md"
    },
    "body": "\n\n## Use\n\nIn an application's build process, it may be necessary to overwrite existing configuration properties, such as paths or maps. For example, a jQuery based application may have a configuration such as:\n\n```\nSystem.config({\n  map: {\n    \"can/util/util\": \"can/util/jquery/jquery\"\n  }\n});\n```\nHowever, during the build, DOM access may not be available. Altering the configuration as follows will be necessary:\n\n```\nSystem.config({\n  buildConfig: {\n    map: {\n      \"can/util/util\": \"can/util/domless/domless\"\n    }\n  }\n};\n```\n\n",
    "description": "\nAn object of [System.config] overwrites to use when loading plugins while building.\n",
    "types": [
      {
        "type": "Object",
        "options": []
      }
    ],
    "title": "",
    "name": "System.buildConfig",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.bundle": {
    "src": {
      "path": "node_modules/steal/docs/system-bundle.md"
    },
    "body": "\n\n## Use\n\nIt is possible to load an app in chunks, rather than one single production file. If there is modules segmented by \"pages\", for example:\n\n- A home screen in \"js/pages/home\"\n- Search results in \"js/pages/search\"\n- Details in \"js/pages/details\"\n\nIt will be more efficient to load \"search\" and \"details\" progressively, making the \"home\" page load lighter. `System.bundle` allows you to create multiple production files by defining the starting point:\n\n    System.bundle = [\"js/pages/home\",\"js/pages/search\",\"js/pages/details\"]\n\nWithin the main application, the condition may exist such as:\n\n```\nimport $ from 'jquery';\n\nif(/*route === home*/) {\n\tSystem.import('js/pages/home', function() {});\n}\n```\n\n",
    "description": "\nSpecifies which modules will be progressively loaded.  This is \nused by the build.\n",
    "types": [
      {
        "type": "Array",
        "template": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          }
        ],
        "description": "\n\nArray of module names.\n"
      },
      {
        "type": "Glob",
        "description": "\n\nA glob pattern used to match module names. For example:\n\n    System.bundle = \"components/*/*\";\n\nWould match `components/home/home` and `components/admin/admin` but not `utils/collections/find`.\n"
      }
    ],
    "title": "",
    "name": "System.bundle",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.baseURL": {
    "src": {
      "path": "node_modules/steal/docs/system-baseURL.md"
    },
    "body": "\n\n## Use\n\nWhen a module is imported, the `baseURL` will be the prepended to the module location by \ndefault. For example:\n\n```\nSystem.baseURL = \"../libs\";\nSystem.import(\"mylib\")      // looks in ../libs/mylib\n```\n\nThis behavior can futher be modified by [System.paths]\n\n## Implementation\n\nProvided by [ES6 Module Loader](https://github.com/ModuleLoader/es6-module-loader#baseurl).\n",
    "description": "\nSpecifies the root path to use for all module lookups. \n",
    "types": [
      {
        "type": "String",
        "description": "The root path to use for all \nmodule lookups. If baseURL is not specified, the baseURL is treated\nas the page's directory in a browser and `process.cwd()` in node.\n\nSpecifying [System.config] will set `baseURL` to the config's parent directory.\n\n"
      }
    ],
    "title": "",
    "name": "System.baseURL",
    "type": "property",
    "alias": "System.baseUrl",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.bundles": {
    "src": {
      "path": "node_modules/steal/docs/system-bundles.md"
    },
    "body": "\n\n## Use\n\nSpecify `bundles` if you are using a prebuilt bundle. For example, if `\"jqueryui.autocomplete\"` \nand `\"jqueryui.datepicker\"` are in `\"jqueryui.custom\"`, you can specify that like:\n\n```\nSystem.bundles[\"jqueryui.custom\"] = [\n  \"jqueryui.autocomplete\",\n  \"jqueryui.datepicker\"\n];\n```\n\nIf `bundle` is passed to [steal-tools], it will write out where to load bundles in the production bundles. \n\n## Production Default Values\n\nIn [System.env production] a bundles is written out to \ncontain the [System.main] module.  For example:\n\n```\nSystem.config({\n  main: \"myapp\",\n  env: \"production\"\n});\nSystem.bundles[\"bundles/myapp\"] = [\"myapp\"]\n```\n\nThis way, when the `\"myapp\"` module is imported, System will load [\"bundles/myapp\"].  Use [System.bundlesPath]\nto configure where bundles are found.\n\n\n## Implementation\n\nProvided by [SystemJS](https://github.com/systemjs/systemjs#bundles).\n",
    "description": "\nBundles configuration allows a single bundle file to be loaded in place of separate module files.\n",
    "types": [
      {
        "type": "Object",
        "template": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          },
          {
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "An object where keys\nare bundle [moduleName moduleNames] and values are Arrays of [moduleName moduleNames] that\nthe bundle contains.\n\n"
      }
    ],
    "title": "",
    "name": "System.bundles",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.bundlesPath": {
    "src": {
      "path": "node_modules/steal/docs/system-bundlesPath.md"
    },
    "body": "\n\n## Use\n\nIn [System.env production], the [System.main] module will be assumed to be within a \n_\"bundles/[MAIN\\_MODULE\\_NAME]\"_ module. For example, if the main module is `myapp`,\na `bundles/myapp` module is automatically configured to contain it:\n\n```\n<script src=\"node_modules/steal/steal.production.js\"\n\t\tbundles-path=\"./out/bundles\"\n        main=\"myapp\">\n</script>\n```\n\n`System.bundlesPath` tells the client where all bundles can be found by configuring\n[System.paths]. For example, if bundlesPath is set to `packages`:\n\n```\n<script src=\"steal/steal.js\"\n        config=\"./config.js\"\n        main=\"myapp\"\n        env=\"production\"\n        bundles-path=\"packages\">\n</script>\n<script>\n  System.bundles[\"bundles/myapp\"] //-> [\"myapp\"]\n  System.paths[\"bundles/*\"] = \"packages/*.js\";\n  System.paths[\"bundles/*.css\"] = \"packages/*.css\";\n</script>\n```\n\nOften, `bundlesPath` should be the same value as what's passed in [steal-tools.build]. If `bundlesPath` is not set, it will set the default bundles paths:\n\n```\n<script src=\"node_modules/steal/steal.js\"\n        main=\"myapp\"\n        env=\"production\"\n        bundles-path=\"packages\">\n</script>\n<script>\n  System.bundles[\"bundles/myapp\"] //-> [\"myapp\"]\n  System.paths[\"bundles/*\"] = \"dist/bundles/*.js\";\n  System.paths[\"bundles/*.css\"] = \"dist/bundles/*.css\";\n</script>\n```\n\nIf a path rule for `System.paths[\"bundles/*\"]` or `System.paths[\"bundles/*.css\"]`\nexist, `bundlesPath` will not overwrite them.\n\n",
    "description": "\nA configuration property for setting the path of where the [System.env production] \nbundles folder is located.\n",
    "types": [
      {
        "type": "String",
        "description": "\n\nA folder name that specifies the path to the production bundles.  By default,\n`System.bundlesPath` is `\"dist/bundles\"`. This path is relative to the page's [System.baseURL]. So, for example, if your script tag looks like:\n"
      }
    ],
    "title": "",
    "name": "System.bundlesPath",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.configMain": {
    "src": {
      "path": "node_modules/steal/docs/system-configMain.md"
    },
    "body": "\n\n## Use\n\n\nThe `configMain` name and path is typically specified with [System.configPath] in the steal.js `<script>` tag like:\n\n    <script src=\"../path/to/steal/steal.js\"\n            config-path=\"../path/to/stealconfig.js\"\n            main=\"app\">\n    </script>\n\nThis sets `configMain = \"stealconfig.js\"`.  \n\n\n## Use with npm\n\nIf _steal.js_ is inside _node\\_modules_ like:\n\n    <script src=\"../node_modules/steal/steal.js\">\n    </script>\n\n`configMain` will be set to `\"package.json!npm\"`.\n\n\n",
    "description": "\nThe name of a module that is loaded before [@dev] and [System.main].\n",
    "types": [
      {
        "type": "moduleName",
        "description": "A configuration module that is loaded before \nthe [System.main] module(s). This is where all configuration \nshould happen. The `configMain` module and all of its dependencies\nrun during a build, so make sure they can operate without a DOM.\n"
      }
    ],
    "title": "",
    "name": "System.configMain",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.config": {
    "src": {
      "path": "node_modules/steal/docs/system-config.md"
    },
    "body": "\n\n## Use\n\n`System.config` can be called in four ways.\n\n### package.json\n\nIf using the [npm] plugin you can add config to your package.json's **config** property:\n\n```\n{\n  \"system\": {\n    \"meta\": {\n      \"jquery-plugin\": {\n        \"deps\": [\n          \"jquery\"\n        ]\n      }\n    }\n  }\n}\n```\n\n### Programatically\n\nCall `System.config` after _steal.js_ has been loaded like:\n\n    System.config({\n      paths: { ... },\n      map: { ... }\n    });\n\nThis is is most commonly done in the [@config] module.\n\n### Script Attributes\n\nAny property besides src, id, and type will be used to set on System:\n\n    <script src=\"../path/to/steal/steal.js\"\n            config-path=\"../path/to/stealconfig.js\"\n            main=\"app\">\n    </script>\n\nThe above will be translated to a call like:\n\n```\nSystem.config({\n  configPath: \"../path/to/stealconfig.js\",\n  main: \"app\"\n});\n```\n\n### steal object\n\nA `steal` object loaded before `steal.js` will be used as a System.config argument.\n\n    <script>\n      var steal = {\n        configPath: \"../path/to/stealconfig.js\",\n        main: \"app\"\n      }\n    </script>\n    <script src=\"../path/to/steal/steal.js\"></script>\n\n",
    "description": "\nSpecifies configuration values on System. This should be used to\nset properties like [System.configPath] and [System.env].\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": [
          {
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "name": "config",
            "description": "An object of configuration values.\n\n```\nSystem.config({\n  map: {\n    foo: 'bar'\n  }\n});\n```\n"
          }
        ]
      }
    ],
    "title": "",
    "name": "System.config",
    "type": "property",
    "parent": "StealJS.config",
    "alias": "steal.config",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "config",
      "description": "An object of configuration values.\n\n```\nSystem.config({\n  map: {\n    foo: 'bar'\n  }\n});\n```\n"
    },
    "comment": " "
  },
  "System.configPath": {
    "src": {
      "path": "node_modules/steal/docs/system-configPath.md"
    },
    "body": "\n\n## Use\n\nThis is commonly set as part of the steal `<script>` tag like:\n\n```\n<script src=\"../path/to/steal/steal.js\"\n        config-path=\"../path/to/stealconfig.js\"\n        main=\"app\">\n</script>\n```\n\nor\n\n```\n<script src=\"../path/to/steal/steal.js\"\n        config=\"../path/to/stealconfig.js\"\n        main=\"app\">\n</script>\n```\n\ninstead of having to specify it like:\n\n```\n<script src=\"../path/to/steal/steal.js\"\n        paths.@config=\"../path/to/stealconfig.js\"\n        main=\"app\">\n</script>\n```\n\n\n\nIt also can be specified with any of the approaches in [System.config].\n\n",
    "description": "\nA shortcut for specifying the [@config] module [System.paths path] and [System.baseURL baseURL]. \n",
    "types": [
      {
        "type": "String",
        "description": "\n\nSpecifies the path to the [@config] configuration file that will be loaded before the\n[System.main main] module. This will also set [System.baseURL baseURL] to\nthe `main` module directory.\n   \nIf a path to [@config] is not specified, is default value is specified in\n[paths](System.paths.html#section_Defaultpathsconfiguredbysteal).\n   \n   "
      }
    ],
    "title": "",
    "name": "System.configPath",
    "type": "property",
    "parent": "StealJS.config",
    "alias": "steal.config",
    "comment": " "
  },
  "System.env": {
    "src": {
      "path": "node_modules/steal/docs/system-env.md"
    },
    "body": "\n\n## Use\n\nPreviously setting `env` was used to control when bundles were loaded, by setting `env` to **production**. This functionality has been superceded by [System.loadBundles].\n\n`env` can be any string value and separated by a dash `-`. This is useful to, for example, set the environment as being both **production** and **server** if doing server-side rendering.\n\n```html\n<script src=\"node_modules/steal/steal.js\" env=\"window-production\"></script>\n```\n\n```js\nSystem.isEnv(\"production\"); // true\nSystem.isPlatform(\"window\"); // true\n```\n\nRarely do you need to set `env` any more, more likely you want to use [System.loadBundles]. env is set by plugins in most cases.\n\n",
    "description": "\nSpecifies which environment the application is loading within. \n",
    "types": [
      {
        "type": "String",
        "description": "Any string value is possible.\n"
      }
    ],
    "title": "",
    "name": "System.env",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.envs": {
    "src": {
      "path": "node_modules/steal/docs/system-envs.md"
    },
    "body": "\n\nAdd `envs` configuration if you need it to be applied only when in a certain environment. This environment is controlled by [System.env]. For example you might want to apply a different [System.baseURL] if loading from a CDN in production, to do so you could do:\n\n```js\nSystem.config({\n\tenvs: {\n\t\t\"window-production\": {\n\t\t\tbaseURL: \"https://somecdn.com/my-app/\"\n\t\t}\n\t}\n});\n```\n\n**envs** can be sepecified with any of the approaches in [System.config].\n\n",
    "description": "\nSpecifies environment-specific configuration to be applied to the loader after [@config] has loaded.\n",
    "types": [
      {
        "type": "Object",
        "options": [],
        "description": "An object of configuration values.\n"
      }
    ],
    "title": "",
    "name": "System.envs",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.ext": {
    "src": {
      "path": "node_modules/steal/docs/system-ext.md"
    },
    "body": "\n\n## Use\n\nThe following:\n\n```\nSystem.config({\n\text: {\n\t\tstache: 'can/view/stache/system'\n\t}\n})\n```\n\nallows:\n\n    System.import(\"foo.stache\")\n\nWithout having to write:\n\n    System.import(\"foo.stache!can/view/system/stache\");\n\nBy default, `steal.js` configures `css` to point to \"$css\" and `less` to point to \"$less\".\n\n",
    "description": "\nConfigures plugin loading by module extension.\n",
    "types": [
      {
        "type": "Object",
        "template": [
          {
            "types": [
              {
                "type": "String"
              }
            ]
          },
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          }
        ],
        "description": "\n\nSpecifies a plugin to add when an extension is matched in a module name. `steal.js` includes\ndefaults of:\n\n    System.ext //-> {\"css\": \"$css\", \"less\": \"$less\"}\n"
      }
    ],
    "title": "",
    "name": "System.ext",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.import": {
    "src": {
      "path": "node_modules/steal/docs/system-import.md"
    },
    "body": "\n\n## Use\n\n`System.import` is used to dynamically import a module. This is counter to the syntaxes which are statically parsed and dependencies loaded prior to running the code. In the following example we are importing the \"lodash\" module and assigning it's value to the `_` variable in the Promise callback function.\n\n    System.import(\"lodash\").then(function(_) {\n      // Use lodash\n      _.isString(\"hello world\"); // -> true\n    });\n\n### When to use\n\nTypically you won't need to use `System.import` very often in your application. There are two primary cases when you might want to use it:\n\n1. Load a module whose [moduleName] is _determined at runtime_. If you need to concat a string in order to determine which module to load, `System.import` is a good candidate:\n\n        System.import(\"browser-hacks/\" + browserId).then(function() {\n          // Browser workaround code loaded.\n        });\n\n2. For use with progressive loading. If you use [System.bundle] in your application to determine bundles that will be progressively loaded, you use `System.import` to load a particular bundle. For example, if one of your bundles is `checkout` you would load that dynamically with `System.import(\"checkout\")`.\n\n",
    "description": "\nDynamically import modules from any location into your application.\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "Promise"
            }
          ],
          "description": "A promise that will resolve with the value of the module. It will resolve once the module and all of the module's dependencies have been fully resolved and executed.\n"
        },
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "moduleName",
            "description": "The [moduleName] of the module you want to load.\n"
          }
        ]
      }
    ],
    "title": "",
    "name": "System.import",
    "type": "property",
    "parent": "StealJS.functions",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "moduleName",
      "description": "The [moduleName] of the module you want to load.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Promise"
        }
      ],
      "description": "A promise that will resolve with the value of the module. It will resolve once the module and all of the module's dependencies have been fully resolved and executed.\n"
    },
    "comment": " "
  },
  "System.instantiated": {
    "src": {
      "path": "node_modules/steal/docs/system-instantiated.md"
    },
    "body": "\n\n## Use\n\nThis config should be set before `steal.js` is loaded.  The following\nprevents the production bundle from loading:\n\n```\n<script>\n  steal = {\n    instantiated: {\n      \"bundles/myapp.css!$css\" : null\n    }\n  }\n</script>\n<script src=\"../../steal/steal.js\"\n        main=\"myapp\"\n        env=\"production\">\n</script>\n```\n\n",
    "description": "\nSpecify modules that have already been loaded prior to loading `steal.js`.\n",
    "types": [
      {
        "type": "Object",
        "template": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          },
          {
            "types": [
              {
                "type": "*"
              }
            ]
          }
        ],
        "description": "An object of moduleName keys to \nmodule values.  All values will be converted into a module.\n"
      }
    ],
    "title": "",
    "name": "System.instantiated",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.isEnv": {
    "src": {
      "path": "node_modules/steal/docs/system-isEnv.md"
    },
    "body": "\n",
    "description": "\nDetermines the environment Steal is running in, as specified by [System.env].\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "title": "",
    "name": "System.isEnv",
    "type": "property",
    "parent": "StealJS.functions",
    "signatures": [
      {
        "code": "System.isEnv(envName)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "envName",
            "description": "The name of the environment to test.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Boolean"
            }
          ],
          "description": "Whether this is the environment Steal is running in.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "envName",
      "description": "The name of the environment to test.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "Whether this is the environment Steal is running in.\n"
    }
  },
  "System.isPlatform": {
    "src": {
      "path": "node_modules/steal/docs/system-isPlatform.md"
    },
    "body": "\n\n## Use\n\n**System.isPlatform** is used to determine which environment Steal is running. Because Steal can be run in multiple platforms, such as a browser window, a web worker, on the server, in a Cordova app, System.isPlatform provides a convenient way to detect these environments.\n\n### Note\n\nThe platform has to be set with [System.env]. Steal will set it to either `window` or `worker` and other plugins can set it themselves.\n\n",
    "description": "\nDetermines the platform Steal is running in, as specified by [System.env].\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "title": "",
    "name": "System.isPlatform",
    "type": "property",
    "parent": "StealJS.functions",
    "signatures": [
      {
        "code": "System.isPlatform(platformName)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "platformName",
            "description": "The name of the platform to test.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Boolean"
            }
          ],
          "description": "Whether this is the platform Steal is running in.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "name": "platformName",
      "description": "The name of the platform to test.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "Whether this is the platform Steal is running in.\n"
    },
    "comment": " "
  },
  "System.jsonOptions": {
    "src": {
      "path": "node_modules/steal/docs/system-jsonOptions.md"
    },
    "body": "\n\n## Use\n\n**jsonOptions** is useful when your app (or one of your dependencies is importing a JSON file that isn't meant to be exposed in production. For example many packages do:\n\n```\nvar pkg = require(\"./package.json\");\n```\n\nWhich will be imported by Steal. However the package.json contains metadata include paths on your filesystem that you likely don't want exposed by a web-server.\n\nTypically code only needs their version for a few properties, such as the **version**. Using the *transform* function we can remote all others:\n\n```\nSystem.config({\n  jsonOptions: {\n    transform: function(load, data) {\n      // Delete every prop by `version`\n\t  // Only allow the version prop to be exposed\n\t  return {\n\t    version: data.version\n\t  };\n\t}\n  }\n});\n```\n\nWhen compiled every other property will be excluded from the build.\n\n",
    "description": "\nProvides options that can be applied to JSON loading. The JSON extension has the following options:\n",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "transform",
            "description": "A function that allows you to transform the JSON object that will be used as the module value.\n\n```js\nSystem.config({\n  jsonOptions: {\n    transform: function(load, data) {\n      // Delete secret data\n\t  delete data._secret;\n\t  return data;\n\t}\n  }\n});\n```\n",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "Object",
                      "options": []
                    }
                  ],
                  "description": "The object that will be used as the module's value.\n"
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "Object",
                        "options": []
                      }
                    ],
                    "name": "load",
                    "description": "The load object for this module. Use this if you need to know the module's name or other metadata to determine how to transform it.\n"
                  },
                  {
                    "types": [
                      {
                        "type": "Object",
                        "options": []
                      }
                    ],
                    "name": "data",
                    "description": "The raw JSON data parsed by `JSON.parse`.\n"
                  }
                ]
              }
            ],
            "optional": true
          }
        ]
      }
    ],
    "title": "",
    "name": "System.jsonOptions",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.lessOptions": {
    "src": {
      "path": "node_modules/steal/docs/system-lessOptions.md"
    },
    "body": "\n\n## Use\n\nYou can see the list of possible options in the less [docs page](http://lesscss.org/usage/index.html#command-line-usage-options). \n\n### strictMath\n\nOne of the available options is `strictMath`, which by default, the less compiler will process all maths in your css.\n\n```\n.foo {\n    height: calc(100% - 10px);\n}\n```\n\nIf you want to change `strictMath` processing, you'd do the following:\n\n```\nSystem.config({\n    main: \"myapp\",\n    lessOptions: {\n        strictMath: true  // default value is false.\n    }\n});\n```\n\nWith this in place, less will only proccess maths that is inside un-necessary parenthesis.\n\n```\n.foo {\n    height: calc(100% - (10px  - 5px));\n}\n```\n\nwill be compiled to:\n\n```\n.foo {\n    height: calc(100% - 5px);\n}\n```\n\n### paths\n\nYou can also provide `lessOptions.paths` (array) option which will be used to resolve imports (see less/css docs).\n\n### plugins\n\nYou can also provide an array of plugins for the less compiler to use. Each entry should be the path to the plugin in your project.\n\nIf you want to use [`less-plugin-autoprefixer`](https://www.npmjs.com/package/less-plugin-autoprefix), you create a file that exports the configured plugin:\n\n```\n// src/steal/less/autoprefixer.js\nconst autoprefixPlugin = require('less-plugin-autoprefix'); \nconst config = {\n  browsers: [\"last 2 versions\"]\n};\nmodule.exports = new autoprefixPlugin(config);\n```\n\nThen add the path of the file to the `plugins` array:\n\n```\nSystem.config({\n    main: \"myapp\",\n    lessOptions: {\n        plugins: [\"myapp/steal/less/autoprefixer\"]\n    }\n});\n```\n\nNow all LESS files will go through the autoprefixer plugin.\n\n### filename\n\n`lessOptions.filename` are used internally by StealJS and any value\nprovided will be ignored.\n\n",
    "description": "\nA hash of options to customize the behavior of the [less](http://lesscss.org/usage/index.html#command-line-usage-options) compiler.\n",
    "types": [
      {
        "type": "Object",
        "options": []
      }
    ],
    "title": "",
    "name": "System.lessOptions",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.main": {
    "src": {
      "path": "node_modules/steal/docs/system-main.md"
    },
    "body": "\n\n## Use\n\nThis is the starting point of the application. In\n[System.env development], the `main` module is loaded after the [System.configMain] and [@dev] \nmodules. In [System.env production], only the `main` module is loaded, but \nit is configured to load in a bundle.\n\nMain should be configured by one of the approaches in [System.config].\n\n\n## Use with npm\n\nIn [System.env development], your application's `package.json` will be read\nand the main module set automatically.  For instance, if \nyour package.json looks like:\n\n\n```\n{\n  \"main\": \"my/main.js\",\n  ...\n}\n```\n\nThe following will load `package.json` with the [npm] module and automatically load\n`my/main.js`:\n\n```\n<script src=\"../node_modules/steal/steal.js\">\n</script> \n```\n\nIn [System.env production], make sure your script specifies `main` so the correct bundle to load\ncan be known.\n\n",
    "description": "\nThe name of the module(s) that loads all other modules in the application.\n",
    "types": [
      {
        "type": "moduleName",
        "description": "The main module to load after [System.configMain]. \n"
      },
      {
        "type": "Array",
        "template": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          }
        ],
        "description": "An array of main modules that will be loaded after [System.configMain].\n\n\n"
      }
    ],
    "title": "",
    "name": "System.main",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.loadBundles": {
    "src": {
      "path": "node_modules/steal/docs/system-loadBundles.md"
    },
    "body": "\n\n## Use\n\nSetting `loadBundles` to **true** is a short cut to prevent steal from loading the\n[@config] and [@dev] modules and make steal load the [System.main] module\nin a bundle.\n\nFor example:\n\n```\nSystem.config({\n  main: \"myapp\",\n  loadBundles: true\n});\n```\n\nSets:\n\n```\nSystem.bundles[\"bundles/myapp\"] //-> [\"myapp\"]\nSystem.meta[\"bundles/myapp\"]    //-> {format: \"amd\"}\nSystem.paths[\"bundles/*\"]       //-> \"dist/bundles/*.js\"\nSystem.paths[\"bundles/*.css\"]   //-> \"dist/bundles/*.css\"\n```\n\nSetting `System.loadBundles` to `true` must happen prior to loading `steal.js`.  So it should\nbe [System.config configured] via the `steal.js` script tag like:\n\n```\n<script src=\"../path/to/steal/steal.js\"\n\t\tdata-load-bundles\n        data-main=\"myapp\">\n</script>\n```\n\nOr specified prior to steal loading like:\n\n```\n<script>\n  steal = { loadBundles: true };\n</script>\n<script src=\"../path/to/steal/steal.js\"\n        data-env=\"production\">\n</script>\n```\n\n",
    "description": "\nSpecifies whether bundles should be loaded, used primarily for production.\n",
    "types": [
      {
        "type": "Boolean",
        "description": "True if bundles are to be loaded.\n"
      }
    ],
    "title": "",
    "name": "System.loadBundles",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.meta": {
    "src": {
      "path": "node_modules/steal/docs/system-meta.md"
    },
    "body": "\n\n## Implementation\n\nImplemented by [SystemJS](https://github.com/systemjs/systemjs#meta-configuration)\n\n",
    "description": "\nSpecify properties on the [load.metadata metadata] object.  \n",
    "types": [
      {
        "type": "Object",
        "options": [],
        "description": "An object of module names that\npoint to metadata values.\n",
        "template": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ]
          },
          {
            "types": [
              {
                "type": "load.metadata"
              }
            ]
          }
        ]
      }
    ],
    "title": "",
    "name": "System.meta",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.map": {
    "src": {
      "path": "node_modules/steal/docs/system-map.md"
    },
    "body": "\n\n## Uses\n\nMap is useful when you want to exchange one module for another.\n\n### Alternative implementation\n\nThere are many libraries that share a common API. Consider a legacy application \nthat heavily used Underscore. You might want to migrate to Lodash for added \nfeatures or performance reasons. You can use map to do this without updating all of \nyour code that uses Underscore like so:\n\n    System.map.underscore = \"lodash\";\n\nThis would save you from updating every module that had previously imported Underscore,\nhowever in some cases you are unable to update the modules in the first place  \nbecause they are third party libraries. Consider a MVC library that has a dependency\non jQuery. If you wanted to use the smaller alternative Zepto you could simply\nmap `jquery` to `zepto` and the MVC library would use that instead.\n\n### <a name=\"ignoring-optional-dependencies\"></a>Ignoring optional dependencies\n\nSome modules might have dependencies on other modules that they only use as an option\nif you need them. Because there isn't a standard way to define conditional dependencies\nthey likely just import them explicitly. If you do not need this option you can\nelect to ignore the dependency by mapping it to `@empty`:\n\n    System.map[\"some/optional_dep\"] = \"@empty\";\n\n`@empty` is a pseudo-module defined by SystemJS to represent a module with no value.\n\n## Implementation\n\nImplemented by [SystemJS](https://github.com/systemjs/systemjs#map-configuration). \n\n",
    "description": "\nAlter [moduleName] keys.\n",
    "types": [
      {
        "type": "Object",
        "template": [
          {
            "types": [
              {
                "type": "moduleGlob"
              }
            ]
          },
          {
            "types": [
              {
                "type": "moduleName"
              },
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleGlob"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "\n\nSpecifies rules to convert an imported moduleName to another module name. The rules can\nbe specified globally or limited to a specific path.\n\nThe following will alter \"glob/*\" modules across the whole application.\n\n    System.map[\"glob/*\"] = \"moduleName/*\" \n\nThe following limits converting \"jquery\" to \"jquery@1.2\" to only within modules that match\n\"oldcode/*\":\n\n    System.map[\"oldcode/*\"] = {\n      \"jquery\": \"jquery@1.2\"\n    };\n"
      }
    ],
    "title": "",
    "name": "System.map",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.paths": {
    "src": {
      "path": "node_modules/steal/docs/system-paths.md"
    },
    "body": "\n\n## Use\n\n`System.paths` can be configured with any of the approaches in [System.config]. It\nis used to provide the path of a module. You might use this if you install a module\nwith a package manager, for example with bower. For example:\n\n    System.paths.jquery = \"bower_components/jquery/dist/jquery.js\"\n\nWill map the the `jquery` module to where the JavaScript file is located in bower_components.\n\n### Wildcard paths\n\nThe `*` is used to denote wildcard paths. These allow substitution in cases where\nyou want a common pattern for referring to module names. A common example of this\nwould be a package where you want to load only certain modules and not the `main`\nmodule.\n\nFor example:\n\n    System.paths[\"lodash/*\"] = \"/js/lodash/*.js\"\n    System.paths[\"theme/*\"] = \"jquery-ui/themes/base/jquery.ui.*css\"\n\nThis would allow you to do:\n\n```\nimport throttle from \"lodash/functions/throttle\"\n```\nto load only the throttle function.\n\nSee [this issue](https://github.com/systemjs/systemjs/issues/113) on why `css` and other extensions have\nstrange rules.\n\n## Default paths configured by steal\n\nIf the following paths are not specified, `steal.js` will use a default path according\nto the following rules:\n\n\n- [@config] - If `steal.js` is in _ROOT/bower\\_components/steal/steal.js_, `@config` defaults to\n  <i>ROOT/stealconfig.js</i>; otherwise, it defaults to \n  _[System.baseURL baseURL]/stealconfig.js_. Specifying `@config` will specify [System.baseURL baseURL].\n- [@dev] - defaults to _STEAL\\_BASE/steal/dev.js_\n- [@traceur] - defaults to _STEAL\\_BASE/traceur/traceur.js_\n- [$css] - defaults to _STEAL\\_BASE/steal/css.js_\n- [$less] - defaults to _STEAL\\_BASE/steal/less.js_\n- `\"bundles/*\"` - defaults to _\"dist/bundles/\\*.js\"_\n- `\"bundles/*.css\"` - defaults to _\"dist/bundles/\\*css\"_\n\n_Note: `STEAL_BASE` is the parent folder of the steal folder._\n\n\n## Implementation\n\nImplemented in [ES6ModuleLoader](https://github.com/ModuleLoader/es6-module-loader/#paths-implementation)\n\n",
    "description": "\nConfigure the location of a module or modules.\n",
    "types": [
      {
        "type": "Object",
        "template": [
          {
            "types": [
              {
                "type": "glob"
              }
            ]
          },
          {
            "types": [
              {
                "type": "glob"
              }
            ]
          }
        ],
        "description": "\n\nIf a [moduleName] matches one of the keys of the `paths` config, it is located \nwith at the value of the key. \n\nIf paths for [@config], [@dev], [@traceur],\n[$css], [$less], \"bundles/\\*\" and \"bundles/\\*.css\" are not set, `steal.js` \nwill provide [default paths](#section_Defaultpathsconfiguredbysteal).\n\n "
      }
    ],
    "title": "",
    "name": "System.paths",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.setContextual": {
    "src": {
      "path": "node_modules/steal/docs/system-setContextual.md"
    },
    "body": "\n\n## Use\n\nModules may want to modify their behavior based on the module that is importing them. One example would be for normalization:\n\n```js\nSystem.setContextual(\"normalize\", function(parentName){\n  return {\n    \"default\": function(name){\n      return System.normalize(name, parentName);\n    },\n    __useDefault: true\n  };\n});\n```\n\n",
    "description": "\nCreate a module that is aware of its parent module.\n",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "title": "",
    "name": "System.setContextual",
    "type": "property",
    "parent": "StealJS.functions",
    "signatures": [
      {
        "code": "System.setContextual(moduleName, definer)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "moduleName",
            "description": "The name of the contextual module.\n"
          },
          {
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              },
              {
                "type": "String"
              }
            ],
            "name": "definer",
            "description": "Either a function defining the module or a moduleName to import which defines the module.\n"
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        },
        {
          "type": "String"
        }
      ],
      "name": "definer",
      "description": "Either a function defining the module or a moduleName to import which defines the module.\n"
    },
    "comment": " "
  },
  "System.stealPath": {
    "src": {
      "path": "node_modules/steal/docs/system-stealPath.md"
    },
    "body": "\n\n## Use\n\n`steal.js` calls [System.config] with the path to `steal.js` internally. \nThis sets up the following default values in [System.paths]:\n\n - [@dev] - `PATH/dev.js`\n - [$css] - `PATH/css.js`\n - [$less] - `PATH/less.js`\n - [@traceur] - `PATH/../traceur/traceur.js` - Assumes traceur is in a folder next to steal.\n \nFinally, it will set [System.baseURL] provided nothing else is setting it to:\n\n - `PATH/../..` - if `PATH` ends with _/bower\\_components/steal_.\n - `PATH/..` - if `PATH` ends with _/steal_.\n - `PATH` - if the first two conditions are not met.\n\n\n",
    "description": "\nSpecify the path to the `steal.js` root folder and set many other configuration\nvalues as side effects. This should not typically be called directly.\n",
    "types": [
      {
        "type": "String",
        "description": "\n\nThe folder that contains `steal.js`.\n\n`steal.js` set this internally when loading to setup default paths for\n[@dev], [$css], [$less], [@traceur] and [System.baseURL].\n\n   "
      }
    ],
    "title": "",
    "name": "System.stealPath",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "System.transpiler": {
    "src": {
      "path": "node_modules/steal/docs/system-transpiler.md"
    },
    "body": "\n\n## Use\n\nIf you'd like to control which ES6 transpiler is used simply set in your config:\n\n    System.config({\n      transpiler: \"babel\"\n    });\n\n## Implementation\n\nProvided by [ES6 Module Loader](https://github.com/ModuleLoader/es6-module-loader).\n\n",
    "description": "\nSpecifies which transpiler to use for ES6 modules. Traceur has been around for a longer time, but Babel provides advantages such as a smaller overhead.\n",
    "types": [
      {
        "type": "String",
        "description": "Which ES6 compiler to user to generate ES5 code. Possible values:\n\n* `traceur`: The default, uses [traceur-compiler](https://github.com/google/traceur-compiler).\n* `babel`: Uses [Babel](https://babeljs.io/).\n"
      }
    ],
    "title": "",
    "name": "System.transpiler",
    "type": "property",
    "parent": "StealJS.config",
    "comment": " "
  },
  "instantiateResult": {
    "src": {
      "path": "node_modules/steal/docs/type-instantiateResult.md"
    },
    "body": "",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "deps",
            "description": "The dependencies\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "execute",
            "description": "A function that when executed will provide the value of the module.\n",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": []
              }
            ]
          }
        ]
      }
    ],
    "name": "instantiateResult"
  },
  "load.metadata": {
    "src": {
      "path": "node_modules/steal/docs/type-metadata.md"
    },
    "body": "\n",
    "description": "\nAn object that is passed between `Loader` hooks.  Any values can be set.  These are the ones that `steal.js` and\nSystemJS recognize.\n",
    "type": "typedef",
    "title": "metadata",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "format",
            "description": "Specifies what type of Syntax is used.  This can be specified like:\n\n    \"format amd\";\n",
            "types": [
              {
                "type": "String"
              }
            ]
          },
          {
            "name": "deps",
            "description": "Dependencies of this module. If the module is a global\nbut implicitly depends on another, like jQuery, add that dependency here.\n\n```\n\"meta\": {\n  \"jquery-cookie\": {\n    \"deps\": [\"jquery\"]\n  }\n}\n```\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "exports",
            "description": "The global property that is exported as this module's default export.\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true
          },
          {
            "name": "init",
            "description": "Allows for calling noConflict and\nfor other cleanup.  `this` will be the global object.\n",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "undefined"
                    }
                  ]
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "Module"
                      }
                    ],
                    "variable": true
                  }
                ],
                "context": {
                  "types": [
                    {
                      "type": "Global"
                    }
                  ]
                }
              }
            ],
            "optional": true
          },
          {
            "name": "sideBundle",
            "description": "Create a bundle for this module and exclude it from\nStealTool's bundle optimization algorithm. This is useful for modules that are infrequently\nused, like a page for your app that users rarely visit.\n\n```\n\"meta\": {\n  \"moduleA\": {\n    \"sideBundle\": true\n  }\n}\n```\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "bundle",
            "description": "Exclude a module from being bundled.\n```\n\"meta\": {\n  \"MODULENAME\": {\n    \"bundle\": false\n  }\n}\n```\nIf you exclude a module from the bundled file, you have to make sure, that in the [production environment configuration](http://stealjs.com/docs/System.envs.html)\nthe module is:\n\n* ... [mapped to the pseudo-module @empty](http://stealjs.com/docs/System.map.html#ignoring-optional-dependencies)\n\n    ```\n    \"envs\": {\n        \"window-production\": {\n            \"map\": {\n                \"MODULENAME': \"@empty\"\n            }\n        }\n    }\n    ```\n\n* ... [configured](http://stealjs.com/docs/steal.html#path-configure) to the [right location](http://stealjs.com/docs/System.paths.html) of the module e.g. a CDN\n\n    ```\n    \"envs\": {\n        \"production\": {\n            \"paths\": {\n                \"jquery': \"//code.jquery.com/jquery-2.2.1.min.js\"\n            }\n        }\n    }\n    ```",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          }
        ]
      }
    ],
    "name": "load.metadata",
    "parent": "StealJS.types"
  },
  "moduleIdentifier": {
    "src": {
      "path": "node_modules/steal/docs/type-moduleIdentifier.md"
    },
    "body": "\nA **moduleIdentifier** is a string written in code to import a module. It could be:\n\n* Relative to the current module like `'./foo'`.\n* The name of an NPM dependency of your project like `'lodash'`.\n* The name you are using to refer to a module that has been [System.map mapped] to another [moduleName].\n\nWhen Steal imports your code it sees the moduleIdentifiers and through [steal.hooks.normalize normalization] it converts these to [moduleName moduleNames] that it uses as keys in the module registry.\n\n",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "String",
        "description": "\n\nThe string passed into import functions such as `require()` when using CommonJS, `import` when using ES6, and [System.import] when dynamically loading a module.\n"
      }
    ],
    "name": "moduleIdentifier",
    "parent": "StealJS.types",
    "comment": " "
  },
  "moduleName": {
    "src": {
      "path": "node_modules/steal/docs/type-moduleName.md"
    },
    "body": "\nThe **moduleName** is a string that serves as the canonical name for a module. It is used as the key in the module registry.\n\nIn Steal, as with most module loaders, each module is only loaded (executed) *once* even if it is being imported by dozens of other modules. In order to provide importing modules with the correct exported values Steal has a module registry; an object where the moduleName is the key and the value is metadata about the module, as well as it's exported value.\n\nWhen a module imports another, such as `require(\"./foo\")` the string used to import is called a [moduleIdentifier]. This identifier is then [steal.hooks.normalize normalized] which produces the canonical **moduleName**.\n\n## moduleName vs moduleIdentifier\n\nIt's important to understand the difference between a moduleName and [moduleIdentifier]. A moduleIdentifier is the string that is provided to the `import`, `require()`, (or any other format) statements. For example:\n\n<table>\n<thead>\n<tr>\n\t<th>Module identifier</th><th>Module name</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>./dep</td><td>app/util/dep</td></tr>\n<tr><td>styles.css</td><td>styles.css!$css</td></tr>\n<tr><td>lodash</td><td>lodash@3.0.0#main</td></tr>\n</tbody>\n</table>\n\nThese identifiers are always relative to the current module. For example the import:\n\n```\nimport \"./foo\";\n```\n\nWhen the current module is `app/main` will normalize to `app/foo` and is located at [System.baseURL] + app/foo.js.\n\nSimilarly [npm] packages are also normalized relative to their parent. Consider this:\n\n```\nimport _ from \"lodash\";\n```\n\nIf the parent module, `app/main` has an npm dependency on the lodash package then this will normalize to `lodash@1.0.0#main` and the address will be something like `http://example.com/node_modules/lodash/main.js`.\n\nHowever, if the parent module does *not* have an npm dependency on lodash then the moduleName will be `lodash` and the address something like `http://example.com/lodash.js`.\n\n## npm module names\n\nWhen importing modules installed with npm the moduleName normalizes to something like `lodash@1.0.0#main`. While strange looking this form has a purpose. Remember that each moduleName in the registry must be *unique*. NPM packages, however, are not, and nested dependencies can use different versions of the same package. When this happens it's important that each module gets a [semver compatible](http://semver.org/) version of the package they need.\n\nHere are the parts of an npm moduleName, using `lodash@1.0.0#main`:\n\n### packageName\n\nThe first part is the **packageName**, `lodash`. It is the string that you provide when installing the package like `npm install lodash --save`.\n\n### version\n\nThe second part, between the **@** and the **#** is the package **version**, in this case it is `1.0.0`. Steal ensures that you get a semver compatible version of a package.\n\nConsider there are two dependencies in your project that both depend on the `foo` package. One of their package.jsons looks like:\n\n```\n{\n  \"dependencies\": {\n    \"foo\": \"^1.0.0\"\n  }\n}\n```\n\nAnd the other like:\n\n```\n{\n  \"dependencies\": {\n    \"foo\": \"^1.1.0\"\n  }\n}\n```\n\nBoth of these packages depend on **foo**, however the second depends on a higher version, `^1.1.0`. The **^** symbol means that it depends on *at least* that version, and can accept anything up to (but not including) `2.0.0`.  See the [semver calculator](http://semver.npmjs.com/) to better understand the versioning rules.\n\nSince both packages depend on foo and and 1.1.0 is semver compatible with `^1.0.0` then both will receive the same version of the package. `import \"foo\"` will resolve to a module name like:\n\n```\nfoo@1.1.0#main\n```\n\n### modulePath\n\nThe last part of the npm moduleName is the **modulePath**. The modulePath is the part that comes after the **#** symbol. With the lodash example the modulePath is `main`. The modulePath is used to know where the module is located within the package. Here it will be at `http://example.com/node_modules/lodash/main.js`.\n\nYou can import paths within a package, not just the package's main. To do that you might import: `import each from \"lodash/arrays/for_each\"`. This module's moduleName would be `lodash@1.0.0#arrays/for_each` and it's address `http://example.com/node_modules/lodash/arrays/for_each.js`.\n\n",
    "description": "\n",
    "type": "typedef",
    "title": "",
    "types": [
      {
        "type": "String",
        "description": "\n\nA Loader-unique string that represents a module.\n"
      }
    ],
    "name": "moduleName",
    "parent": "StealJS.types",
    "comment": " "
  },
  "steal-tools.guides.streams": {
    "src": {
      "path": "node_modules/steal-tools/doc/guides/streams.md"
    },
    "body": "\nThe streaming APIs are more powerful, but more complex, if you just want to build your app you should use [steal-tools.build] instead. If you are new to streams consult the [stream handbook](https://github.com/substack/stream-handbook) to learn what makes them useful.\n\n# Streams\n\nThe following are the streams that can be created. Each stream is explained individually and at the end of the docs we'll talking about putting them all together. Many of the examples use the [through2](https://www.npmjs.com/package/through2) module, which provide an easy way to work with Node streams.\n\n## graph\n\nThe basis for StealTool's build process is a **dependency graph**. A dependency graph is an object that contains all of your app's dependencies. The key is the name of the module and the value is a [steal-tools.node] object.\n\nThe graph stream is the first stream created and is required for use with all of the other streams.\n\n```\nvar s = require(\"steal-tools\").streams;\nvar through = require(\"through2\");\n\nvar graphStream = s.graph({\n\tconfig: __dirname + \"/package.json!npm\"\n});\n\ngraphStream.pipe(through(function(data){\n\t// data contains a 'graph' property.\n}));\n```\n\n## transpile\n\nGiven a graph stream, **transpile** will transpile each module in the graph to AMD so that it can be bundled for production.\n\n```\nvar s = require(\"steal-tools\").streams;\nvar through = require(\"through2\");\n\nvar system = {\n\tconfig: __dirname + \"/package.json!npm\"\n};\n\nvar transpileStream = s.graph(system)\n\t.pipe(s.transpile());\n\ntranspileStream.pipe(through(function(data){\n\t// data contains everything from the graphStream\n\t// With the modules in data.dependencyGraph having\n\t// been transpiled to AMD.\n}));\n```\n\n## minify\n\nA [steal-tools.streams.minify] stream will minify the source of each module in your graph individually. You'll want to do this after transpiling.\n\n## bundle\n\nThe [steal-tools.streams.bundle] stream will analyze your dependency graph and split it into optimized bundles.\n\n```\nvar s = require(\"steal-tools\").streams;\nvar through = require(\"through2\");\n\nvar system = {\n\tconfig: __dirname + \"/package.json!npm\"\n};\n\nvar bundleStream = s.graph(system)\n\t.pipe(s.transpile())\n\t.pipe(s.minify())\n\t.pipe(s.bundle());\n\nbundleStream.pipe(through(function(data){\n\t// data contains everything from the graphStream\n\t// and also contains a .bundles property\n}));\n```\n\n## concat\n\nOnce you've created the stream that contains all of your application's bundles, you can pipe it into a concat stream. The concat stream will **concatenate** the source from all of the graph's dependencies into a single source code.\n\nThe [steal-tools.BuildResult] object is what is returned from this stream, and each of the **bundles** within will now contain a `source` property.\n\n## write\n\nAfter concatentating the bundles you call **write** to write the source to the filesystem. If you where only interested in examining the bundles in-memory you could skip this step.\n\nOtherwise, pipe in the result from **concat** here.\n\n# Putting it all together\n\nGiven these APIs you can construct your own build by piping the streams into each other. Here's what a typical build looks like:\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar system = {\n\tconfig: __dirname + \"/package.json!npm\"\n};\n\nvar stream = s.graph(system)\n\t.pipe(s.transpile())\n\t.pipe(s.minify())\n\t.pipe(s.bundle())\n\t.pipe(s.concat())\n\t.pipe(s.write());\n```\n\nNow let's say we wanted to rerun [babel](https://babeljs.io/) to transpile non-es6 modules. We could do this by injecting a stream after *graph* has completed. This allows us to use our own transpile stream in place of the one StealTools provides:\n\n```\nvar s = require(\"steal-tools\").streams;\n\nvar babel = require(\"babel-core\");\nvar transform =\tfunction(source){\n\treturn babel.transform(source, {\n\t\tpresets: [\n\t\t\trequire(\"babel-preset-es2015-no-commonjs\"),\n\t\t\trequire(\"babel-preset-react\"),\n\t\t\trequire(\"babel-preset-stage-0\")\n\t\t]\n\t});\n};\n\nvar transpile = function(){\n\treturn through.obj(function(data){\n\t\tdata.bundles.forEach(function(bundle){\n\t\t\tbundle.nodes.forEach(function(node){\n\t\t\t\tnode.activeSource = transform(node.getSource());\n\t\t\t});\n\t\t});\n\t});\n};\n\nvar system = {\n\tconfig: __dirname + \"/package.json!npm\"\n};\n\nvar stream = s.graph(system)\n\t.pipe(transpile())\n\t.pipe(s.minify())\n\t.pipe(s.bundle())\n\t.pipe(s.concat())\n\t.pipe(s.write());\n```\n\n\n",
    "description": "\nIn 0.14.0 StealTools added a new streaming API based on [Node streams](https://nodejs.org/api/stream.html). This gives you a greater ability to interject your own functionality in the middle of the build process, or to exclude parts you don't want (like if you didn't want to write the results to the filesystem.\n",
    "name": "steal-tools.guides.streams",
    "title": "Streaming API",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 3
  },
  "steal-tools.guides.progressive_loading": {
    "src": {
      "path": "node_modules/steal-tools/doc/guides/progressive_loading.md"
    },
    "body": "\nThis guide is a step-by-step guide to create the app from scratch, or you can clone the source from the [GitHub Quick Start repo](https://github.com/stealjs/progressive-loading).\n\n## Setup\n\nThis basic single page app demonstrates progressive loading. It uses a common file structure, but Steal supports a wide variety of other configuration options which can be found [steal here].\n\nStart by creating a new folder somewhere on your harddrive, we're going to call this project **progressive-app**:\n\n    > mkdir progressive-app\n    > cd progressive-app\n\nOnce in the new folder, ensure [Node.js](http://nodejs.org/) is properly installed on your computer, then initialize a **package.json** and install [steal-tools], jquery and steal.\n\n\t> npm init\n\nThis will ask you questions like the name of your application, the version, etc. You can just accept the defaults for now, we will change these later in the guide.\n\nOnce you've gotten through these, install steal-tools, steal and jquery:\n\n\t> npm install steal-tools --save-dev\n\t> npm install steal jquery --save\n\nFinally install [http-server](https://www.npmjs.com/package/http-server) in your project:\n\n    > npm install http-server --save\n\nAnd add it to the **start** script in your package.json:\n\n```\n{\n  ...\n\n  \"scripts\": {\n    \"start\": \"http-server\"\n  }\n}\n```\n\nNow to start the app you can simply run `npm start` and you'll see this output:\n\n```\n> http-server\n\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.1.106:8080\nHit CTRL-C to stop the server\n```\n\nIf you open [http://127.0.0.1:8080](http://127.0.0.1:8080) you'll now see a directory listing of the application.\n\n## Create your modules\n\nNext we'll create a main module that loads only the bare minimum to determine what \"page\" you are on. A bare bones example might have a file structure like:\n\n    node_modules/\n      steal-tools/\n      steal/\n        steal.js\n      jquery/\n        dist/\n          jquery.js\n    site/\n      app.js\n      config.js\n      homepage.js\n      login.js\n      signup.js\n      site.html\n\n\nCreate **site/app.js** which imports jquery using ES6 module syntax. We'll use the `hashchange` as a simple mechanism to\ntrack the state of our app. So create an event handler which listens to the `hashchange` event. The hashes`#login`, `#signup` and `#homepage` correspond to a section or \"page\". steal-tools will load only the files needed for each page.\n\n### site/app.js\n\n\timport $ from 'jquery';\n\t$(function(){\n\t  var onhashchange = function(){\n\t\tif(window.location.hash === \"#login\") {\n\t\t  System.import(\"site/login\").then(function(){\n\t\t\t$(\"#main\").login();\n\t\t  });\n\t\t} else if(window.location.hash === \"#signup\" ) {\n\t\t  System.import(\"site/signup\").then(function(){\n\t\t\t$(\"#main\").signup();\n\t\t  });\n\t\t} else {\n\t\t  System.import(\"site/homepage\").then(function(){\n\t\t\t$(\"#main\").homepage();\n\t\t  });\n\t\t}\n\t  };\n\t  $(window).bind(\"hashchange\",onhashchange);\n\t  onhashchange();\n\t});\n\n### site/homepage.js\n\n\tdefine(['jquery'], function($){\n\t  return $.fn.homepage = function(){\n\t\tthis.html(\"<h1>Homepage</h1>\");\n\t  };\n\t});\n    \n### site/signup.js\n\n\tmodule.exports = $.fn.signup = function(){\n\t  this.html(\"<h1>Signup</h1>\");\n\t};\n\n### site/login.js\n\n\tmodule.exports = $.fn.login = function() {\n\t  this.html(\"<h1>Login</h1>\");\n\t};\n\n### package.json\n\n```\n{\n  \"name\": \"progressive-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"site/app.js\",\n  \"scripts\": {\n    \"start\": \"http-server\",\n    \"build\": \"steal-tools\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    ...\n  },\n  \"dependencies\": {\n\t...\n  },\n  \"system\": {\n    \"npmAlgorithm\": \"flat\",\n    \"bundle\": [\n      \"site/homepage\",\n      \"site/signup\",\n      \"site/login\"\n    ]\n  }\n}\n```\n\n## Create your page\n\nNow we'll create the **index.html** page which loads **steal.js**. The `main` attribute tells steal to load `site/app.js` as the application's main module.\n\n### index.html\n    \n    <html>\n    <head>\n\t  <title>Progressive App</title>\n\t</head>\n\t<body>\n\t<div id=\"main\"></div>\n\n\t<ul>\n\t\t<li><a href='#homepage'>home page</a></li>\n\t\t<li><a href='#signup'>sign up</a></li>\n\t\t<li><a href='#login'>log in</a></li>\n\t</ul>\n\n\t<script src=\"../node_modules/steal/steal.js\"\n\t\t\tmain=\"site/app\"></script>\n    </body>\n\t</html>\n\nThis is the development mode which progressively loads the scripts but doesn't use the concatenated or minified versions.\n\n## Build your site\n\nFrom your main folder, run:\n\n    > npm run build\n\nThis command generates a bundle `./dist/bundles`. The directory should have a file structure like:\n\n    dist/bundles/site/\n      app.js\n      homepage.js\n      signup.js\n      login.js\n\nOpen site.html in your browser, and open the Network panel in the Developer Tools. As you click on the \"home page\", \"sign up\" and \"log in\" links you'll notice the individual scripts loading as needed. This is progressive loading in action. Only the necessary scripts were loaded initially, the remaining scripts are loaded as needed.\n\n## See it live\n\nFor production, change the src to `steal.production.js` in the script tag. This tells Steal to use the concatenated and minified versions of the files:\n\n    <div id=\"main\"></div>\n    <script src=\"../node_modules/steal/steal.production.js\"\n            main=\"site/app\"></script>\n\nAgain, open [http://127.0.0.1:8080](http://127.0.0.1:8080) in a browser and view the Network tab in the Developer Tools. You notice `app.js` now contains a minified and concatenated version of jquery and config.js. And the `homepage.js`, `signup.js` and `login.js` are only loaded when needed.\n\n",
    "description": "\nSingle page apps and regular web pages typically load several, sometimes dozens, of javascript files which causes long initial page load times.\nConcatenating and minifying your scripts can help but the web page still loads files it doesn't need. Progressive loading solves this problem by loading only the scripts required and lazy loading the remaining files as needed. The example app below demonstrates a basic single page app with progressive loading.\n",
    "name": "steal-tools.guides.progressive_loading",
    "title": "Progressive Loading",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 1
  },
  "steal-tools.guides.watch_mode": {
    "src": {
      "path": "node_modules/steal-tools/doc/guides/watch_mode.md"
    },
    "body": "\n## Setup\n\nThe guide assumes some basic knowledge of [Node.js](http://nodejs.org). If you haven't used Node before, please go learn more about how it works on their website.\n\nTo get started we want to create a new Node.js application and install the packages we'll need.\n\n```shell\n> npm init\n> npm install steal-tools -g\n> npm install steal --save\n> npm install can --save\n```\n\nRunning `npm init` will ask you a series of questions. The answers aren't important and can be changed later by editing the produced `package.json` file.\n\nBefore we can start using the **watch** mode we'll need to create our main file. This is the entry point to your application and was specified in the `npm init` process. Assuming we called it `main.js` let's open up that file and get an initial build started.\n\n### main.js\n\n```js\nvar can = require(\"can\");\n```\n\n## Enable watch mode\n\nNow that we have our skeleton ready we can turn on watch mode.\n\n```shell\nsteal-tools --watch\n```\n\nThis will take a second or so and then you'll get an output:\n\n```shell\n[9:09:19 AM]\nWatch mode ready.\n```\n\nThis tells us that the initial build has been complete and watch mode is ready to rebuild our application as we develop.\n\n## Develop your application\n\nFrom here you can begin developing your application any way you like. Let's create a simple `hello-world` component to show how the output updates every time you modify your application. Back in `main.js` add this:\n\n```js\nvar can = require(\"can\");\nrequire(\"can/view/stache/\");\nrequire(\"./components/hello/\");\n```\n\nYou'll get a message indicating that StealTools cannot find the hello component:\n\n```shell\nFile not found: /path/to/can-proj/components/hello/hello.js\n```\n\nSo let's go create it.\n\n### components/hello/hello.js\n\n```js\nrequire(\"can/view/stache/\");\nvar template = require(\"./hello.stache\");\nvar can = require(\"can\");\n\ncan.Component.extend({\n\ttag: \"hello-world\",\n\tviewModel: {\n\t\tname: \"world\"\n\t},\n\ttemplate: template\n});\n```\n\n### components/hello/hello.stache\n\n```html\n<div>\nHellos \\{{name}}!\n</div>\n```\n\n### main.js\n\nNow back in your main add the component to your page:\n\n```js\nvar can = require(\"can\");\nrequire(\"can/view/stache/\");\nrequire(\"./components/hello/\");\n\nvar template = can.stache(\"<hello-world></hello-world>\");\ncan.$(\"body\").append(template());\n```\n\nEach time you save you will get new output; it will either be a timestamp by itself (when creating new modules) or a timestamp with the module name (when modifying an existing module). The output will be like:\n\n```shell\n[9:20:16 AM]\n[9:20:22 AM]: components/hello/hello\n[9:21:49 AM]: main\n```\n\n## Debug your application\n\nNow that we've got a basic application written let's check out the debugging experience. First let's create a simple page:\n\n### index.html\n\n```html\n<script src=\"node_modules/steal/steal.js\"\n\tenv=\"production\"\n\tmain=\"main\"></script>\n```\n\nOpen the page in a browser and open your debug tools. With the watch mode source maps are enabled by default. You can see and debug your original code from your browser's debugging tools.\n\nThat's it! As you develop and save your code StealTools will continuously rebuild your application.\n\n",
    "description": "\nIn 0.9.0 StealTools added a new **watch** mode to its multi-build. This enables you to continuously rebuild your application as you work. This is useful if you prefer a workflow where you are debugging your application as it will appear in production. In this guide we'll go through the process of setting up a CanJS project using the watch mode.\n",
    "name": "steal-tools.guides.watch_mode",
    "title": "Continuous Builds",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 2
  },
  "steal-tools.BundleAssetsOptions": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/build-assets.md"
    },
    "body": "\n",
    "description": "\nUsed to bundle your assets along with your JavaScript and CSS. Setting this option to `true` will bundle assets that are inferred from your project (such as CSS url()s) and placed into your dist folder.\n",
    "type": "typedef",
    "title": "BundleAssetsOptions",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "infer",
            "description": "Controls whether assets are inferred from the project's contents. Set to false if you want to manually select assets.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "glob",
            "description": "A [glob](https://github.com/isaacs/node-glob) pattern (or Array of glob patterns) of files that need to be copied to the dist folder.\n",
            "types": [
              {
                "type": "Glob"
              },
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "Glob"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.BundleAssetsOptions",
    "parent": "steal-tools.types"
  },
  "steal-tools.BuildOptions": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/build-options.md"
    },
    "body": "\n",
    "description": "\nOptions used to configure the build process.\n",
    "type": "typedef",
    "title": "BuildOptions",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "minify",
            "description": "Sets whether the source code is minified prior to writing.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "bundleSteal",
            "description": "Sets whether StealJS will be included in the built file. Enabling this option will allow you to limit the initial request to just one script.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "debug",
            "description": "`true` turns on debug messages. Defaults to `false`.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "quiet",
            "description": "No logging.  Defaults to `false`.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "bundleAssets",
            "description": "Set to true to have assets from your project bundled into your dist folder.\n",
            "types": [
              {
                "type": "steal-tools.BundleAssetsOptions"
              },
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "bundle",
            "description": "An array of module names that should be\nprogressively loaded.\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "ignore",
            "description": "An array of module names that should be ignored and not included in the bundled file. \nFor more information take a look at the `ignore` usage http://stealjs.com/docs/steal-tools.build.html#ignore\n\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "bundleDepth",
            "description": "The maximum number of bundles that need to be loaded\nfor any `bundle` module. Defaults to `3`.\n",
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "defaultValue": "3"
          },
          {
            "name": "mainDepth",
            "description": "The maximum number of bundles that will be loaded for any `main`\nmodule. Defaults to `3`.\n",
            "types": [
              {
                "type": "Number"
              }
            ],
            "optional": true,
            "defaultValue": "3"
          },
          {
            "name": "removeDevelopmentCode",
            "description": "Remove any development code from the bundle specified \nusing `//!steal-remove-start`, and `//!steal-remove-end` comments.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "cleanCSSOptions",
            "description": "A hash of options to customize the minification of css files. \nAll available options are listed in the [clean-css documentation](https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-programmatically).\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "optional": true
          },
          {
            "name": "uglifyOptions",
            "description": "A hash of options to customize the minification of JavaScript files. StealTools uses the \ntop-level `minify` function of uglify-js, and the available options are listed [here](https://github.com/mishoo/UglifyJS2#the-simple-way).\nThe option `fromString` is used internally and will always be `true`; any other value will be ignored.\n",
            "types": [
              {
                "type": "Object",
                "options": []
              }
            ],
            "optional": true
          },
          {
            "name": "sourceMaps",
            "description": "Generate source maps alongside your bundles.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "sourceMapsContent",
            "description": "Include the original source contents in the generated source maps. Use this option if your production environment doesn't have access to the source files. Will result in a larger source maps size but will cause fewer requests.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "transpile",
            "description": "A function that handles the transpiling of ES6 source to a format for production.\n",
            "types": [
              {
                "type": "steal-tools.BuildOptions.transpile"
              }
            ],
            "optional": true
          },
          {
            "name": "watch",
            "description": "Actives watch mode which will continuously build as you develop your application.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          }
        ]
      }
    ],
    "name": "steal-tools.BuildOptions",
    "parent": "steal-tools.types"
  },
  "steal-tools.BuildOptions.compileOptions": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/compile-options.md"
    },
    "body": "\n",
    "description": "\nAn object of options passed into your custom [steal-tools.BuildOptions.transpile] function.\n",
    "type": "typedef",
    "title": "TranspileCompileOptions",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "source",
            "description": "The source code needing to be transpiled.\n",
            "types": [
              {
                "type": "String"
              }
            ]
          },
          {
            "name": "module",
            "description": "A module format needed to be transpiled to.\n\nIt is either:\n\n* **commonjs**\n* **amd**\n* **system**\n",
            "types": [
              {
                "type": "String"
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.BuildOptions.compileOptions",
    "parent": "steal-tools.BuildOptions.transpiler"
  },
  "steal-tools.export.object": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/export-object.md"
    },
    "body": "\n\n## Use\n\nEach ExportObject task is configured by three values:\n\n - system - Describes the [System.config] values used to load modules; this is passed to [steal-tools.transformImport].\n - options - Configures special behavior of the loader such as logging.\n - outputs - Configures the modules that should be written out, how they \n             should be written out, and where they should be written. \n\n## system\n\nA [steal-tools.SystemConfig] object that is used to load modules. Typically, you will want to specify at least the `config` and `main` options, like so:\n\n    system: {\n\t  config: __dirname + \"/config.js\",\n      main: [\"math/add\", \"math/subtract\"]\n    }\n\n## options\n\nOptions configures logging. Example:\n\n```\noptions: { verbose: true }\n```\n\nor\n\n```\noptions: { quiet: true }\n```\n\n## outputs\n\n`outputs` specifies different ways the modules loaded by `system` are written out. It's\nan object of [steal-tools.export.output] objects.  Each [steal-tools.export.output]\nsupports the following options:\n\n{{#each [steal-tools.export.output].types.0.options}}\n - {{name}} <i>{{{makeTypesString types}}}</i>{{/each}}\n\nAnd the options available to [steal-tools.transform.options].\n\n{{#each [steal-tools.transform.options].types.0.options}}\n - {{name}} <i>{{{makeTypesString types}}}</i>{{/each}}\n\nOnly one of `modules`, `eachModule`, or `graphs` should be specified. \n\n\nExample:\n\n```\noutputs: {\n  \"global first and second together without jQuery\": {\n    modules: [\"first\",\"second\"],\n    ignore: [\"jquery\"],\n    format: \"global\"\n  },\n  \"first and second seperately without jQuery\": {\n    eachModule: [\"first\",\"second\"],\n    ignore: [\"jquery\"],\n    format: \"global\"\n  },\n  \"first and second and their dependencies individually converted to amd\": {\n    graphs: [\"first\",\"second\"],\n    format: \"amd\"\n  }\n}\n```\n\n### output names\n\nAn output name can mixin default output options of an __Export Helper__, like [steal-tools/lib/build/helpers/cjs],\nby including a \"+\", followed by the name of the export helper.  For example:\n\n```\noutputs: {\n  \"+amd\": {},\n  \"+cjs\": {dist: __dirname+\"cjs\"},\n  \"+global-js\": {},\n  \"+global-css\": {}\n}\n```\n\nThe given output ExportObject's value will overwrite or modify the behavior of the __Export Helper__.  For example,\n`{dist: __dirname+\"/cjs\"}` will change the output destination of \"+cjs\".\n\n\n\n\n\n\n",
    "description": "\nAn object that specifies the modules to load and their outputs. This is used by\n[steal-tools.export] and [steal-tools.grunt.export].\n",
    "type": "typedef",
    "title": "ExportObject",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "system",
            "description": "Specifies the [System.config] values used \nto load modules.  At a minimum, some set of [System.main main], [System.baseURL baseURL],\nor [System.configPath configPath] must be specified.\n\n```\nsystem: {\n  main: ['mymodule'],\n  config: __dirname+\"/config.js\"\n}\n```\n",
            "types": [
              {
                "type": "steal-tools.SystemConfig"
              }
            ]
          },
          {
            "name": "options",
            "description": "Options that configure the following:\n",
            "types": [
              {
                "type": "Object",
                "options": [
                  {
                    "name": "debug",
                    "description": "`true` turns on debug messages. Defaults to `false`.\n",
                    "types": [
                      {
                        "type": "Boolean"
                      }
                    ],
                    "optional": true,
                    "defaultValue": "false"
                  },
                  {
                    "name": "quiet",
                    "description": "No logging.  Defaults to `false`.\n\n",
                    "types": [
                      {
                        "type": "Boolean"
                      }
                    ],
                    "optional": true,
                    "defaultValue": "false"
                  }
                ]
              }
            ]
          },
          {
            "name": "outputs",
            "description": "Configures output files to be written.\n",
            "types": [
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "steal-tools.export.output"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.export.object",
    "parent": "steal-tools.types",
    "comment": " "
  },
  "steal-tools.BuildResult": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/build-result.md"
    },
    "body": "\n",
    "description": "\nThe result if a [steal-tools.build multi-build].\n",
    "type": "typedef",
    "title": "BuildResult",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "graph",
            "description": "A map of moduleNames to node.\n",
            "types": [
              {
                "type": "buildGraph"
              }
            ]
          },
          {
            "name": "steal",
            "description": "The steal function used to load the main module.\n",
            "types": [
              {
                "type": "steal"
              }
            ]
          },
          {
            "name": "loader",
            "description": "The loader used to load the main module.\n",
            "types": [
              {
                "type": "Loader"
              }
            ]
          },
          {
            "name": "bundles",
            "description": "The builds written out.\n\n",
            "types": [
              {
                "type": "Array",
                "options": []
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.BuildResult",
    "parent": "steal-tools.types"
  },
  "steal-tools.export.ignorer": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/steal-export-ignorer.md"
    },
    "body": "\n",
    "description": "\nSpecifies a function that decides of a module should be ignored (not included) in the exported artifact.\n",
    "type": "typedef",
    "title": "ignorer",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "name": "steal-tools.export.ignorer",
    "parent": "steal-tools.export.output",
    "signatures": [
      {
        "code": "ignorer(name, load)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "moduleName"
              }
            ],
            "name": "name",
            "description": "The module name."
          },
          {
            "types": [
              {
                "type": "load"
              }
            ],
            "name": "load",
            "description": "The load object for this module.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "Boolean"
            }
          ],
          "description": "True if this module should be ignored.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "load"
        }
      ],
      "name": "load",
      "description": "The load object for this module.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "Boolean"
        }
      ],
      "description": "True if this module should be ignored.\n"
    }
  },
  "steal-tools.source.object": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/source-object.md"
    },
    "body": "\n",
    "description": "\nAn object representing a source. This object is used internally and returned by [steal-tools.transform].\n",
    "type": "typedef",
    "title": "SourceObject",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "code",
            "description": "A string containing the source code.\n",
            "types": [
              {
                "type": "String"
              }
            ]
          },
          {
            "name": "map",
            "description": "A source map generated for the source code. To get the JSON representation of the source map call `.toString()` on the map.\n",
            "types": [
              {
                "type": "SourceMapConsumer"
              }
            ]
          }
        ]
      }
    ],
    "name": "steal-tools.source.object",
    "parent": "steal-tools.types"
  },
  "steal-tools.SystemConfig": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/system-config.md"
    },
    "body": "\n\n## Use\n\n[steal-tools.build], [steal-tools.export], and [steal-tools.transformImport] all\ntake a `SystemConfig`, which configures the modules to load.\n\n```\nstealTools.build(SystemConfig, ...)\nstealTools.pluginifier(SystemConfig, ...)\nstealTools[\"export\"]({system: SystemConfig, outputs: {...}});\n```\n\nIf your `config` file specifies `main`, all that is needed is the `config` location:\n\n```\nstealTools.build({config: __dirname+\"/package.json!npm\"}, ...)\nstealTools.pluginifier({config: __dirname+\"/package.json!npm\"}, ...)\nstealTools.export({\n  system: {config: __dirname+\"/package.json!npm\"}, \n  outputs: {...}\n});\n```\n\nOtherwise, `main` and `config` are probably needed:\n\n\n```\nstealTools.build({\n  config: __dirname+\"/config.js\",\n  main: \"myproject\"\n}, ...);\n\nstealTools.pluginifier({\n  config: __dirname+\"/config.js\",\n  main: \"myproject\"\n}, ...);\n\nstealTools.export({\n  system: {\n    config: __dirname+\"/config.js\",\n    main: \"myproject\"\n  }, \n  outputs: {...}\n});\n```\n\nIf there is no `config`, you should specify the baseURL, so StealJS knows where to find your modules.\n\n\n",
    "description": "\nConfiguration values needed for StealJS to load modules. Some set of the following\nvalues are required:\n",
    "type": "typedef",
    "title": "SystemConfig",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "main",
            "description": "The module, or modules, that should be \nimported.  This sets [System.main].  \n",
            "types": [
              {
                "type": "String"
              },
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "config",
            "description": "The path to a configuration file. This\nwill also specify `baseURL`, and sometimes `main`. This sets [System.configPath].\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true
          },
          {
            "name": "meta",
            "description": "A object of <moduleNames> that contain [metadata](http://stealjs.com/docs/System.meta.html)\n",
            "types": [
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "metadata"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "baseURL",
            "description": "If a configuration file is not used, \nthe [System.baseURL baseURL] value must be set.\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true
          }
        ]
      }
    ],
    "name": "steal-tools.SystemConfig",
    "parent": "steal-tools.types",
    "comment": " "
  },
  "steal-tools.export.output": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/export-output.md"
    },
    "body": "\n\n## Use\n\nOnly one of `modules`, `eachModule`, or `graphs` can be specified.  \n\n## modules\n\nAll modules specified by `modules` and their dependencies will be built together.  For example:\n\n```\n{\n  modules: [\"foo\",\"bar\"],\n  format: \"global\"\n}\n```\n\nThis will build \"foo\" and \"bar\" together in the global format.  If \"foo\", or \"bar\" depend on \"zed\", \"zed\"\nwill also be included.\n\n## eachModule\n\nEach module specified by `eachModule` will be exported, including its dependencies individually.  For example:\n\n**eachModule** is useful when you want to take a dependency graph and split it into separate builds that will be combined around certain modules within that graph.\n\nFor example:\n\n```js\nstealTools.export({\n\tsystem: {\n\t\tconfig: __dirname + \"/package.json!npm\"\n\t},\n\toptions: {},\n\toutputs: {\n\t\t\"+standalone\": {\n\t\t\teachModule: [\n\t\t\t\t\"app/a\",\n\t\t\t\t\"app/b\"\n\t\t\t]\n\t\t}\n\t}\n});\n```\n\nThis will build out `dist/global/app/a.js` and `dist/global/app/b.js`, both as standalone builds.\n\n## graphs\n\nEach module specified by `graphs` and its dependencies will be exported individually.  For example:\n\n```\n{\n  graphs: [\"foo\",\"bar\"],\n  format: \"cjs\"\n}\n```\n\nThis will export \"foo\" to a file, and each of its dependencies to their own file.  This will also export \"bar\"\nto a file, and each of its dependencies to their own file.  If \"foo\" and \"bar\" both depend on \"zed\", \"zed\"\nwill be written to its own file one time.\n\n\n## dest\n\nDest should specify a single file, typically with a string, if `modules` is provided, like:\n\n```\n{\n  modules: [\"foo\",\"bar\"],\n  format: \"global\",\n  dest: __dirname+\"/foo-bar.js\"\n}\n```\n\nOtherwise, a folder or function should be provided, if using `eachModule or `graphs`:\n\n```\n{\n  graphs: [\"foo\",\"bar\"],\n  format: \"cjs\",\n  dest: function(moduleName){\n    return __dirname+\"/\"+moduleName+\".js\";\n  }\n}\n```\n\n",
    "description": "\nSpecifies the behavior for an output in an [steal-tools.export.object] \"outputs\" property. These properties are in\naddition to [steal-tools.transform.options].\n",
    "type": "typedef",
    "title": "ExportOutput",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "modules",
            "description": "Builds all the modules in `modules` together \nwith their dependencies. \n\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      },
                      {
                        "type": "comparitor"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "eachModule",
            "description": "Builds each module in the list with its dependendencies individually. Use this if you want to create separate builds for more than one module in your graph:\n\n```js\nstealTools.export({\n\tsystem: {\n\t\tconfig: __dirname + \"/package.json!npm\"\n\t}\n\n});\n```\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      },
                      {
                        "type": "comparitor"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "graphs",
            "description": "Builds each item in the graph on its own. Each dependency is \nbuilt individually.\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      },
                      {
                        "type": "comparitor"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "dest",
            "description": "Specifies where the \noutput should be written.  Dest can be provided as a string or a function that returns the\nlocation.\n",
            "types": [
              {
                "type": "String"
              },
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "String"
                    }
                  ]
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "String"
                      },
                      {
                        "type": "Array",
                        "template": [
                          {
                            "types": [
                              {
                                "type": "String"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "name": "moduleName",
                    "description": "The module name or module names being written\nout by this output."
                  },
                  {
                    "types": [
                      {
                        "type": "Object"
                      },
                      {
                        "type": "Array",
                        "template": [
                          {
                            "types": [
                              {
                                "type": "Object",
                                "options": []
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "name": "moduleData",
                    "description": "Deprecated."
                  },
                  {
                    "types": [
                      {
                        "type": "Load"
                      },
                      {
                        "type": "Array",
                        "template": [
                          {
                            "types": [
                              {
                                "type": "Load"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "name": "load",
                    "description": "The module load record, or module load records, being written by this output. "
                  },
                  {
                    "types": [
                      {
                        "type": "Loader"
                      }
                    ],
                    "name": "System",
                    "description": "The System loader used by Steal to load all of these modules.  All configuration\nshould be available on it.\n "
                  }
                ]
              }
            ]
          },
          {
            "name": "ignore",
            "description": "Modules that should be ignored and not included in the output.\n\nYou can use it like:\n\n```js\nstealTools.export({\n\tsystem: {\n\t\tconfig: __dirname + \"/package.json!npm\"\n\t},\n\toptions: {},\n\toutputs: {\n\t\t\"+global-js\": {\n\t\t\tignore: [\n\t\t\t\t\"jquery\"\n\t\t\t]\n\t\t}\n\t}\n})\n```\n\nOr alternatively you can provide an [steal-tools.export.ignorer] **function** that will be called with each [moduleName], giving you the opportunity to programmatically determine if a module should be ignored.\n\n```js\nstealTools.export({\n\tsystem: {\n\t\tconfig: __dirname + \"/package.json!npm\"\n\t},\n\toptions: {},\n\toutputs: {\n\t\t\"+global-js\": {\n\t\t\tignore: [function(name){\n\t\t\t\tif(name.indexOf(\"foobar\") >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}\n})\n```\n\nFor the [steal-tools/lib/build/helpers/global] helper providing `false` (instead of an Array) for this option will not ignore modules defined in `node_modules` as is done by default.\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      },
                      {
                        "type": "steal-tools.export.ignorer"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          }
        ]
      }
    ],
    "name": "steal-tools.export.output",
    "inherits": "steal",
    "parent": "steal-tools.types",
    "comment": " "
  },
  "steal-tools.BuildOptions.transpile": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/transpiler.md"
    },
    "body": "\n\nThe **transpile** option gives you complete control over transpiling. After StealTools has created a graph of your project's dependencies it then goes through each and transpiles them into a common format, usually AMD for the multi-build.\n\nIf you're using a specific version of Traceur, Babel, or a different transpiler altogether, you might want to use this so that you can do your own transpiling.\n\nHere's an example of usage:\n\n```js\nvar Babel = require(\"babel-core\");\nvar stealTools = require(\"steal-tools\");\n\nvar mapFormat = {\n\t'commonjs': 'common',\n\t'amd': 'amd'\n};\n\nvar transpile = function(source, compileOptions){\n\tvar babelOptions = {\n\t\tmodules: mapFormat[compileOptions.module],\n\t\tsourceMap: compileOptions.sourceMaps || false\n\t};\n\n\treturn babel.transform(source, opts);\n};\n\n\nstealTools.build({\n\tconfig: __dirname + \"/package.json!npm\"\n}, {\n\ttranspile: transpile\n});\n```\n\n",
    "description": "\nAllows the ability to completely control the transpiling of ES2015 source down to another format for production bundling (usually to AMD).\n",
    "title": "Transpile",
    "name": "steal-tools.BuildOptions.transpile",
    "type": "function",
    "parent": "steal-tools.types",
    "signatures": [
      {
        "code": "transpile(source, compileOptions)",
        "description": "\n",
        "params": [
          {
            "types": [
              {
                "type": "String"
              }
            ],
            "name": "source",
            "description": "The ES2015 source code to be transpiled.\n"
          },
          {
            "types": [
              {
                "type": "steal-tools.BuildOptions.compileOptions"
              }
            ],
            "name": "compileOptions",
            "description": "The options needed to be used to do the transpile, such as the format being transpiled to, and whether source maps are needed.\n"
          }
        ],
        "returns": {
          "types": [
            {
              "type": "steal-tools.source.object"
            }
          ],
          "description": "An object containing `code` and (optionally) `map` properties.\n"
        }
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "steal-tools.BuildOptions.compileOptions"
        }
      ],
      "name": "compileOptions",
      "description": "The options needed to be used to do the transpile, such as the format being transpiled to, and whether source maps are needed.\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "steal-tools.source.object"
        }
      ],
      "description": "An object containing `code` and (optionally) `map` properties.\n"
    },
    "comment": " "
  },
  "steal-tools.transform.options": {
    "src": {
      "path": "node_modules/steal-tools/doc/types/transform-options.md"
    },
    "body": "\n",
    "description": "\nSpecify the behavior of a transform.\n",
    "type": "typedef",
    "title": "TransformOptions",
    "types": [
      {
        "type": "Object",
        "options": [
          {
            "name": "ignore",
            "description": "An Array of regular expressions, or strings that \nspecify [moduleName]s that should not be included in the output. \n\nModule names that match the regular expressions are not included. The following\nignores everything in _can/util/_.\n\n    transform(\"can/construct\",{ignore: [/^can\\/util\\/]});\n\n\nModule names and their dependencies that match the \nstrings in the array are not included. The following will not include\n\"can/construct\", and all of its dependencies:\n\n    transform(\"can/component\",{ignore: [\"can/construct\"]});\n",
            "types": [
              {
                "type": "Array",
                "template": [
                  {
                    "types": [
                      {
                        "type": "RegExp"
                      },
                      {
                        "type": "String"
                      },
                      {
                        "type": "function",
                        "returns": {
                          "types": [
                            {
                              "type": "undefined"
                            }
                          ]
                        },
                        "params": [
                          {
                            "types": [
                              {
                                "type": "String"
                              }
                            ]
                          },
                          {
                            "types": [
                              {
                                "type": "Load"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "removeDevelopmentCode",
            "description": "By default, removes code in between comments, like:\n\n    //!steal-remove-start\n    REMOVE.THIS;\n    //!steal-remove-end\n\nIf removeDevelopmentCode is `false`, this code is not removed.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "format",
            "description": "What format the output will be transpiled to.  By default\nthe format is `\"global\"`.  `\"global\"` means the code will be transpiled to work\nstandalone.  Module dependencies that are not included should be mapped to their\nname on the global object in exports.\n\nThe other possible format values are \"steal\",\"amd\", and \"cjs\".\n",
            "types": [
              {
                "type": "String"
              }
            ],
            "optional": true,
            "defaultValue": "'global'"
          },
          {
            "name": "noGlobalShim",
            "description": "By default, if _options.format_ is `\"global\"` then a global shim will be applied.\nThis is so that the script can be run standalone. Setting _noGlobalShim_ to `true` prevents adding the shim.\nExcluding the shim means it will have to be run with an AMD loader like _requirejs_.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "exports",
            "description": "A mapping of module names to their name on the global object (such as the `window`).  For example, if an output depends on jQuery, but does not include it, you should include:\n\n    transform(\"mywidget\",{exports: {\"jquery\": \"jQuery\"}})\n\nConversely you can also use exports to set values that should be exported from your module. For example, if you have a module **foo** that exports a value like:\n\n    module.exports = \"foo bar\";\n\nYou can specify where this module should be set on the window:\n\n    transform(\"mywidget\", {\n      exports: {\n        \"foo\": \"foo.bar\"\n\t  }\n\t});\n\nWhich, when the script runs will result in:\n\n    window.foo.bar === \"foo bar\";\n\n",
            "types": [
              {
                "type": "Object",
                "template": [
                  {
                    "types": [
                      {
                        "type": "moduleName"
                      }
                    ]
                  },
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ]
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "useNormalizedDependencies",
            "description": "Use normalized dependency names instead of\nrelative module names.  For example \"foo/bar\" will be used instead of \"./bar\".\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "normalize",
            "description": "An\noptional function that will normalize all module names written out. Use this for custom normalization\nbehavior.\n",
            "types": [
              {
                "type": "function",
                "returns": {
                  "types": [
                    {
                      "type": "String"
                    }
                  ],
                  "description": "The dependency name to write in. By default, `depName` is used.\n"
                },
                "params": [
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ],
                    "name": "depName",
                    "description": "The dependency name to normalize."
                  },
                  {
                    "types": [
                      {
                        "type": "Load"
                      }
                    ],
                    "name": "depLoad",
                    "description": "The load object for the dependency to normalize."
                  },
                  {
                    "types": [
                      {
                        "type": "String"
                      }
                    ],
                    "name": "curName",
                    "description": "The moduleName of the module whose dependencies are being normalized."
                  },
                  {
                    "types": [
                      {
                        "type": "Load"
                      }
                    ],
                    "name": "curLoad",
                    "description": "The load object of the module whose dependencies are being normalized."
                  }
                ]
              }
            ],
            "optional": true
          },
          {
            "name": "minify",
            "description": "By default, the output is not minified.\nSet to `true` to minify the result.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "ignoreAllDependencies",
            "description": "By default, the dependencies of\nthe module specified are included, unless they are explicitly ignored.  Setting\n_ignoreAllDependencies_ to `true` only results in returning that individual module\nas the output.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "includeTraceurRuntime",
            "description": "By default, if an ES6 module\nis found and the `transpiler` config is set to `traceur` (the default), the [@traceur] runtime is packaged with the output.  Setting this to `false`\nprevents that behavior.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "true"
          },
          {
            "name": "sourceMaps",
            "description": "To generate source maps alongside your transformed source, set this option to true.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          },
          {
            "name": "sourceMapsContent",
            "description": "Include the original source contents in the generated source maps.\n",
            "types": [
              {
                "type": "Boolean"
              }
            ],
            "optional": true,
            "defaultValue": "false"
          }
        ]
      }
    ],
    "name": "steal-tools.transform.options",
    "parent": "steal-tools.types"
  },
  "flatten": {
    "type": "function",
    "name": "flatten",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "shares",
        "description": ""
      },
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "depth",
        "description": "\n\t "
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/flatten.js",
    "src": {
      "line": 5,
      "codeLine": 10,
      "path": "node_modules/steal-tools/lib/bundle/flatten.js"
    },
    "body": "",
    "description": "Flattens the list of shares until each script has a minimal depth\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "depth",
      "description": "\n\t "
    }
  },
  "maxDepth": {
    "type": "function",
    "name": "maxDepth",
    "params": [
      {
        "name": "shares",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/flatten.js",
    "src": {
      "line": 59,
      "codeLine": 62,
      "path": "node_modules/steal-tools/lib/bundle/flatten.js"
    },
    "body": "\t \n",
    "description": "Goes through and figures out which package has the greatest depth\n"
  },
  "min": {
    "type": "function",
    "name": "min",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "name": "shares",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/flatten.js",
    "src": {
      "line": 73,
      "codeLine": 85,
      "path": "node_modules/steal-tools/lib/bundle/flatten.js"
    },
    "body": "",
    "description": "Goes through every combination of shares and returns the one with the smallest difference.\nShares can have a waste property that has how much waste the share currently has \naccumulated.\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "name": "shares",
      "description": ""
    },
    "returns": {
      "types": [
        {
          "type": "min"
        }
      ],
      "description": "\n    {\n      waste : 123213, // the amount of waste in the composite share\n      lower : share, // the more base share, whos conents should be run first\n      higher: share // the less base share, whos contents should run later\n    }\n\t "
    },
    "_curReturn": {
      "types": [
        {
          "type": "min"
        }
      ],
      "description": "\n    {\n      waste : 123213, // the amount of waste in the composite share\n      lower : share, // the more base share, whos conents should be run first\n      higher: share // the less base share, whos contents should run later\n    }\n\t "
    }
  },
  "appsHash": {
    "type": "function",
    "name": "appsHash",
    "params": [
      {
        "name": "shared",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/flatten.js",
    "src": {
      "line": 115,
      "codeLine": 118,
      "path": "node_modules/steal-tools/lib/bundle/flatten.js"
    },
    "body": "\t \n",
    "description": "returns a hash of the app names for quick checking\n"
  },
  "makeSharedGraph": {
    "type": "function",
    "name": "makeSharedGraph",
    "params": [],
    "parent": "node_modules/steal-tools/lib/bundle/make_bundle.js",
    "src": {
      "line": 61,
      "codeLine": 83,
      "path": "node_modules/steal-tools/lib/bundle/make_bundle.js"
    },
    "body": "\n    {\n\t     BUNDLE_SHARED_BY_COUNT: {\n\t       JOINED_BUNDLE_NAMES: BUNDLE\n      }\n    }\n\n    {\n      2 : {\n\t        \"app_a,app_b\" : {\n\t          size: 123,\n           nodes: [node1, node2],\n           bundles: [\"app_a\",\"app_b\"]\n         }  \n      },\n      3: {\n\t        ...\n      }\n    }\n \n",
    "description": "A sharedGraph looks like:\n"
  },
  "crypto": {
    "name": "crypto",
    "type": "property",
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 0,
      "codeLine": 6,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\nfor naming rules see .md file\n\n",
    "description": "Naming bundles\n"
  },
  "isNpm": {
    "type": "function",
    "name": "isNpm",
    "params": [
      {
        "name": "name",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 9,
      "codeLine": 16,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "is a npm module name?\ndo not support npm scoping!\n",
    "_curParam": {
      "name": "name",
      "description": ""
    },
    "returns": "{boolean}"
  },
  "deNpm": {
    "type": "function",
    "name": "deNpm",
    "params": [
      {
        "name": "name",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 20,
      "codeLine": 27,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "get the path of a npm module\n{packagename}@{version}#{path}\n",
    "_curParam": {
      "name": "name",
      "description": ""
    },
    "returns": [
      "{{package: string",
      "version: string",
      "path: string}}"
    ]
  },
  "removeFiletype": {
    "type": "function",
    "name": "removeFiletype",
    "params": [
      {
        "name": "modulePath",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 39,
      "codeLine": 45,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "remove the filetype from a\n",
    "_curParam": {
      "name": "modulePath",
      "description": ""
    },
    "returns": "{*}"
  },
  "pluginPart": {
    "type": "function",
    "name": "pluginPart",
    "params": [
      {
        "name": "name",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 74,
      "codeLine": 80,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "return the plugin part\n",
    "_curParam": {
      "name": "name",
      "description": ""
    },
    "returns": "{string}"
  },
  "pluginResource": {
    "type": "function",
    "name": "pluginResource",
    "params": [
      {
        "name": "name",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 87,
      "codeLine": 93,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n\n",
    "description": "return the plugin resource\n",
    "_curParam": {
      "name": "name",
      "description": ""
    },
    "returns": "{string}"
  },
  "makeGetName": {
    "type": "function",
    "name": "makeGetName",
    "params": [
      {
        "name": "bundle",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 100,
      "codeLine": 105,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "",
    "description": "\n",
    "_curParam": {
      "name": "bundle",
      "description": ""
    },
    "returns": "{string}"
  },
  "getUniqueName": {
    "type": "function",
    "name": "getUniqueName",
    "params": [
      {
        "name": "dirName",
        "description": ""
      },
      {
        "name": "shortened",
        "description": ""
      },
      {
        "name": "buildTypeSuffix",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 117,
      "codeLine": 125,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n \n",
    "description": "get a unique name, based on bundleCounter\n",
    "_curParam": {
      "name": "buildTypeSuffix",
      "description": ""
    },
    "returns": "{string}"
  },
  "getName": {
    "type": "function",
    "name": "getName",
    "params": [
      {
        "name": "bundle",
        "description": ""
      }
    ],
    "parent": "node_modules/steal-tools/lib/bundle/name.js",
    "src": {
      "line": 133,
      "codeLine": 139,
      "path": "node_modules/steal-tools/lib/bundle/name.js"
    },
    "body": "\n \n",
    "description": "get the name of a bundle\n",
    "_curParam": {
      "name": "bundle",
      "description": ""
    },
    "returns": "{string}"
  },
  "makeUpdater": {
    "type": "function",
    "name": "makeUpdater",
    "params": [
      {
        "name": "source",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/graph/clean.js",
    "src": {
      "line": 45,
      "codeLine": 52,
      "path": "node_modules/steal-tools/lib/graph/clean.js"
    },
    "body": "",
    "description": "Creates function that acts as a callback to String.prototype.replace. Calculates the offset caused by the removal of a match and applies new mappings to\nthe source map.\n",
    "title": "",
    "returns": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "description": "\n"
    },
    "_curReturn": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        }
      ],
      "description": "\n"
    }
  },
  "regraph": {
    "type": "module",
    "name": "regraph",
    "params": [
      {
        "name": "config",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "name": "options",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/graph/recycle.js",
    "src": {
      "line": 7,
      "codeLine": 12,
      "path": "node_modules/steal-tools/lib/graph/recycle.js"
    },
    "body": "",
    "description": "Consumes a Dependency Graph and can regenerate another when modules change.\n\n",
    "title": ""
  },
  "regraph.diff": {
    "type": "function",
    "name": "regraph.diff",
    "params": [
      {
        "name": "node",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "regraph",
    "src": {
      "line": 87,
      "codeLine": 92,
      "path": "node_modules/steal-tools/lib/graph/recycle.js"
    },
    "body": " \n",
    "description": "Check to see if the node has changed. Do this by looking at the source\nand running it through System.instantiate to see if new deps were added.\nRecursively do the same for any System.defined modules.\n"
  },
  "findBundles": {
    "type": "module",
    "name": "findBundles",
    "params": [
      {
        "name": "loader",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "node_modules/steal-tools/lib/loader/find_bundle.js",
    "src": {
      "line": 4,
      "codeLine": 10,
      "path": "node_modules/steal-tools/lib/loader/find_bundle.js"
    },
    "body": "",
    "description": "Find all of the bundles belonging to a loader. ",
    "title": "",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "Array",
              "template": [
                {
                  "types": [
                    {
                      "type": "moduleName"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "\n"
        },
        "params": [
          {
            "types": [
              {
                "type": "Loader"
              }
            ],
            "name": "loader",
            "description": ""
          }
        ]
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "Loader"
        }
      ],
      "name": "loader",
      "description": ""
    },
    "_curReturn": {
      "types": [
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "moduleName"
                }
              ]
            }
          ]
        }
      ],
      "description": "\n"
    }
  },
  "StealJS.changelog": {
    "src": {
      "path": "node_modules/steal/docs/pages/changelog.md"
    },
    "body": "\n## 0.15.0\n\n### steal\n\n- [steal-clone](http://stealjs.com/docs/steal.steal-clone.html) is a new module that can be used for dependency injection, making it easy to replace modules for testing purposes.\n- A [new scheme](http://stealjs.com/docs/locate.html) was added for Less and CSS, allowing you to import styles with Steal's internal locating resolution.\n\n### steal-tools\n\n- Builds can be customized using the granular [streams](http://stealjs.com/docs/steal-tools.guides.streams.html) API.\n- Modules can now be ignored with the [ignore](http://stealjs.com/docs/steal-tools.build.html#ignore) option, preventing them from being included in the build.\n\n## 0.14.0\n\n### steal\n\n- package.jsons are now [progressively fetched](https://github.com/stealjs/system-npm/issues/41) as needed to configure.\n- Using npm you can [now load](https://github.com/stealjs/system-npm/issues/3) modules that use the `folder/index.js` convention.\n- When importing json files you can now make transformations with the new [jsonOptions](http://stealjs.com/docs/System.jsonOptions.html).\n- The [contextual module](https://github.com/stealjs/steal/issues/518) extension makes it easy to create modules that are aware of their parent.\n- Better [CommonJS detection](https://github.com/stealjs/steal/pull/583).\n- Configuration added to the script tag now [beats out](https://github.com/stealjs/steal/pull/579) global configuration.\n\n### steal-tools\n\n- It is now possible to perform custom [ES6 transpiling](https://github.com/stealjs/steal-tools/pull/355), for use if using a transpiler different that what Steal provides.\n- Bug [fixes](https://github.com/stealjs/steal-tools/pull/376) for multi-main builds.\n\n## 0.13.0\n\n### steal\n\n- Support added for [NPM 3](https://github.com/stealjs/steal/pull/522).\n- Support added for [scoped packages](https://github.com/stealjs/system-npm/pull/78).\n\n## 0.12.0\n\n### steal\n\n- New [system-trace](https://github.com/stealjs/system-trace) extension comes with Steal. Provides useful APIs for module metadata.\n- The ext extension no longer requires [the bang](https://github.com/stealjs/steal/issues/503).\n- Upgrades to the npm and live-reload plugins.\n\n### steal-tools\n\n- [babelOptions](https://github.com/stealjs/steal-tools/pull/320) are now passed into transpile.\n- `inferGlobals: false` will speed up production when you have a lot of globals and don't need the default behavior of inferring a global's export value.\n- Various live-reload bug fixes.\n\n### steal-tools\n\n## 0.11.0\n\n### steal\n\n- css and less extensions moved to their own projects [steal-css](https://github.com/stealjs/steal-css) and [steal-less](https://github.com/stealjs/steal-less).\n- Babel and Traceur updated to the latest versions.\n- [envs configuration](https://github.com/stealjs/steal/issues/454).\n- The [@loader](https://github.com/stealjs/steal/pull/460) module not works with the Steal syntax.\n- Whether bundles are loaded is not configured by [System.loadBundles], not the `env` flag, but env=production still works for backworks compatibility.\n- The [@steal] module was created to serve a similar purpose as [@loader].\n\n### steal-tools\n\n- `sideBundle: true` metadata property can be set to make a bundle be set as a \"sideBundle\". A sideBundle is not considered in the progressive loading algorithm so it is perfect for bundles that are rarely used.\n- Globals are no longer transpiled to a `System.define` form, but instead to an AMD module.\n- Virtual modules (modules created dynamically with `System.define` can now be [bundles](https://github.com/stealjs/steal-tools/pull/276) themselves.\n- [steal-tools.BundleAssetsOptions bundleAssets] is a new option that allows you to bundle all of your assets along with your JavaScript and CSS bundles, to put everything into a common `dist` folder.\n- StealTools is now tested in CI on Node 0.10, 0.12, and IO.js, on both Linux and Windows.\n\n## 0.10.0\n\n### steal\n\n- New [live-reload](http://stealjs.com/docs/steal.live-reload.html) extension.\n- Added a [steal.import](http://stealjs.com/docs/steal.import.html) to make it easier to work in Node. [#407](https://github.com/stealjs/steal/issues/407).\n\n### steal-tools\n\n- Added a [new command](http://stealjs.com/docs/steal-tools.cmd.live-reload.html) for the cli, `steal-tools live-reload` which starts a server for use with the live-reload workflow. [#223](https://github.com/stealjs/steal-tools/pull/233).\n\n## 0.9.0\n\n### steal\n\n- The npm plugin added a `configDependencies` option. [#55](https://github.com/stealjs/system-npm/pull/55).\n- Steal can be launched within a web worker. [#386](https://github.com/stealjs/steal/issues/386).\n- The bower plugin can take a `system.main` that mirrors npm's behavior. [#16](https://github.com/stealjs/system-bower/pull/16).\n- The bower plugin supports `system.bowerIgnore` for ignoring modules. [#17](https://github.com/stealjs/system-bower/pull/17).\n- You can now pass your own paths to `lessOptions`. [#378](https://github.com/stealjs/steal/pull/378).\n\n### steal-tools\n\n- Added a Watch Mode [#226](https://github.com/stealjs/steal-tools/pull/226) for multi-builds. See the [guide](http://stealjs.com/docs/steal-tools.guides.watch_mode.html) for usage.\n\n## 0.8.0\n\n- StealTools now produces source maps for both multi-build and export. [#210](https://github.com/stealjs/steal-tools/pull/210). Check out the [build docs](http://stealjs.com/docs/steal-tools.build.html) for example usage.\n- The cli is now easier to use. The `package.json` is now the default config, so no `--config` or `--main` option is needed if using the npm plugin. [#212](https://github.com/stealjs/steal-tools/pull/212)\n- Upgraded SystemJS to `0.16.6`, ES6 Module Loader to `0.16.3` and Traceur to `0.0.87`.\n\n## 0.7.0\n\n### steal\n\n- [npm] and [bower] plugins can be used with each other using [configDependencies](http://stealjs.com/docs/npm.html)\n(and [here](http://stealjs.com/docs/bower.html)).\n- Updated SystemJS and ESML.\n- Choice of ES6 compiler can be controlled through the [System.transpiler transpiler] config.\n- [System.bundle] can now take a glob.\n- Loading in Node on Windows no longer requires setting paths with `file:` prefix.\n- Less plugin upgraded to use Less 2.4.0.\n\n### steal-tools\n\n- Bundles now get written to subdirectories of [System.bundlesPath bundlesPath] to ensure unique. [#52](https://github.com/bitovi/steal-tools/pull/54)\n- All tests passing on Windows.\n- `main` and `bundle` names can be the unnormalized. [#89](https://github.com/bitovi/steal-tools/issues/89).\n\n      stealTools.build({\n        main: \"foo/bar/\"\n      });\n\n## 0.6.0\n\n### steal\n\n- Added the [npm] extension.\n- Add the [bower] extension.\n- Updated SystemJS and ESML\n- If _steal.js_ is found in node_modules, \n  load `package.json!npm` as [System.configMain].\n- If _steal.js_ is found in bower_components, load\n  `bower.json!bower` as [System.configMain].\n- Replaced `@config` with [System.configMain]. If you were doing:\n      \n      System.import(\"@config\")\n      \n  You should do:\n  \n      System.import(System.configMain)\n\n### steal-tools\n\n\n- Added [steal-tools/lib/build/helpers/amd],\n  [steal-tools/lib/build/helpers/cjs] and\n  [steal-tools/lib/build/helpers/global] export helpers.\n- Grunt task `stealPluginify` is now `steal-export`\n- Grunt task `stealBuild` is now `steal-build`.\n- `stealTools.pluginifier` is now `steal.transform`.\n- Command line `steal-tools pluginify` is now `steal tools transform`.\n- [steal-tools.export], formerly the _lib/build/pluginifier_builder_ module\n  now returns a deferred and the defaults and modules arguments have been switched.\n\n",
    "description": "\n",
    "name": "StealJS.changelog",
    "title": "Changelog",
    "type": "page",
    "parent": "StealJS.guides",
    "comment": " "
  },
  "StealJS.configuration": {
    "src": {
      "path": "node_modules/steal/docs/pages/configuration.md"
    },
    "body": "\nSteal allows you to configure module loading through a **system** property in your package.json. If you're not using Steal through NPM (you should be) you can also configure using any of the options provided by [System.config].\n\nA basic configuration might look like this:\n\n```\n{\n  ...\n  \"system\": {\n    \"meta\": {\n\t  \"jquery-plugin\": {\n        \"deps\": [\"jquery\"]\n      }\n\t},\n\t\"paths\": {\n      \"some-dep\": \"lib/some/dep.js\"\n\t}\n  }\n}\n```\n\nHere are some common uses of configuration:\n\n## Configuring globals\n\nMany modules you find on the web only have a single global build and don't work with module loaders that support AMD or CommonJS. jQuery plugins often are built this way.\n\nTo use these modules you need to configure them as globals. This is similar to **shim** config in RequireJS. Here's an example with each option explained:\n\n```\n{\n  \"dependencies\": {\n    \"jquery\": \"2.2.2\",\n    \"jquery-plugin\": \"0.2.0\"\n  },\n\n  ...\n\n  \"system\": {\n    \"meta\": {\n      \"jquery-plugin\": {\n        \"deps\": [\"jquery\"],\n        \"exports\": \"jQuery\"\n      }\n    }\n  }\n}\n```\n\n### deps\n\nThe [load.metadata meta] **deps** property is an Array that specifies the module's dependencies. In this example we are saying that this module `jquery-plugin` depends on `jquery`.\n\n### exports\n\nThe [load.metadata meta] **exports** property specifies a global value that is the module's value. For example if we had a module that did:\n\n```\nwindow.FOO = { ... };\n```\n\nWe would specify this config with: `\"exports\": \"FOO\"`.  Then any other module that exports it like:\n\n```\nimport foo from \"foo\";\n```\n\nWill get the `FOO` global.\n\n## Progressively loaded bundles\n\nIn the [steal-tools.guides.progressive_loading progressive loading guide] we show how to progressively load different pages within your app. You import these modules using the [System.import] function like so:\n\n```\nSystem.import(\"app/cart\").then(function(cart){\n\n});\n```\n\nWhen using [steal-tools] to do a production build it needs to know about these progressively loaded bundles in order to perform its code splitting algorithm.\n\nYou can specify your bundles with the **bundle** property in config:\n\n```\n{\n  ...\n  \"system\": {\n    \"bundle\": [\n      \"app/cart\"\n\t]\n  }\n}\n```\n\nThen when you perform a build it will create a bundle in `dist/bundles/app/cart.js` by default (you can specify the path using [System.bundlesPath bundlesPath] configuration).\n\n## Specify your project's root folder\n\nOften projects will store their code in a subfolder like `src/` or `public/` and do not want to include that when importing modules. Using **directories.lib** configuration you can specify your project's root folder:\n\n```\n{\n  \"name\": \"app\",\n\n  ...\n\n  \"system\": {\n    \"directories\": {\n      \"lib\": \"src\"\n    }\n  }\n}\n```\n\nThen you can import modules from this folder by preceding imports with your package name like:\n\n```\nimport util from \"app/util\";\n```\n\n*Note* that you cannot omit the package name when importing a module unless you use relative paths like `\"./util\"`.\n\n",
    "description": "\n",
    "name": "StealJS.configuration",
    "title": "Configuration",
    "type": "page",
    "parent": "StealJS.guides",
    "comment": " "
  },
  "guides.ContributingWindows": {
    "src": {
      "path": "node_modules/steal/docs/pages/contributing-windows.md"
    },
    "body": "\n## Package Management\n\nIn this guide we'll use [chocolatey](https://chocolatey.org/) to install packages needed to develop Steal Tools. You don't have to use chocolatey if you don't want, and can instead search for the dependencies and install them with a Windows installer, but we'll use chocolately because it makes things a bit easier.\n\nAfter you've installed chocolatey by following the instructions [on the homepage](https://chocolatey.org/) **open an administrative console** and proceed to the next step.\n\n## Python 2.x\n\nNative dependencies in Node.js are installed with [node-gyp](https://github.com/nodejs/node-gyp) which uses Python as a build tool. It expects Python 2.x:\n\n```shell\nchoco install python2 -y\n```\n\n## Windows SDK\n\nNext we need the Windows SDK. We're going to assume Windows 7, but adjust this command to the version of Windows you use:\n\n```shell\nchoco install windows-sdk-7.1 -y\n```\n\n## Visual Studio Express\n\nInstalling Visual Studio Express gives us the C++ compiler we need:\n\n```shell\nchoco install visualstudioexpress2013windowsdesktop -y\n```\n\n",
    "description": "\nThis guide will help you get set up with Steal Tools on Windows. To develop Steal Tools you need a C++ compiler (for native dependencies).\n",
    "name": "guides.ContributingWindows",
    "title": "Contributing on Windows",
    "type": "page",
    "parent": "guides.Contributing"
  },
  "StealJS.loading-from-cdn": {
    "src": {
      "path": "node_modules/steal/docs/pages/loading-from-cdn.md"
    },
    "body": "\nSteal can be used to load script files from a URL, such as a Content Delivery Network (CDN).\n\n\n## Loading from a CDN in production\n\nA common use case is to load a script from a CDN in production-mode only.\nThis example will show you how to load jQuery from NPM in development mode, but use jQuery's CDN in production.\n\nThere are two changes that need to be made for this to work:\n\n* Set the System config to use the CDN path for production\n* Modify the build script to ignore jQuery when creating production bundles\n\n### System configuration\n\nHere is an example showing how to set the System config to load jQuery from production.\n\n```\n  \"system\": {\n    \"envs\": {\n      \"window-production\": {\n        \"paths\": {\n          \"jquery\": \"https://code.jquery.com/jquery-2.2.4.min.js\"\n        }\n      }\n    }\n  }\n```\n\n### Build script\n\nUpdate the build script to ignore jQuery.\nThis example shows how to do this with a simple build.js file.\n\n```\nvar stealTools = require('steal-tools');\n\nstealTools.build({\n    config: __dirname + \"/package.json!npm\"\n}, {\n    ignore: [ 'jquery' ]\n});\n```\n\n\n## Always Loading from a CDN\n\nIf you want to load a script from a CDN in all environments:\n\n* Load the file using a script tag\n* Configure Steal to use the previously loaded file\n\n### Load Using a &lt;script&gt; Tag and Configure Steal to use Loaded Version\n\n```\n    <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n    <script>\n      steal = {\n        instantiated: {\n          jquery: { 'default': window.jQuery, __useDefault: true }\n        }\n      };\n    </script>\n    <script src=\"./node_modules/steal/steal.js\"></script>\n```\n\n### Prevent Steal from Looking for jQuery During Build\n\nIn order for the production build to work, map jQuery to the `@empty` module so Steal knows it doesn't need to try and find it:\n\n```\n  \"system\": {\n    \"envs\": {\n      \"build-development\": {\n        \"map\": {\n          \"jquery\": \"@empty\"\n        }\n      }\n    }\n  }\n```\n\n",
    "description": "\n",
    "name": "StealJS.loading-from-cdn",
    "title": "Loading Scripts from a CDN",
    "type": "page",
    "parent": "StealJS.guides",
    "comment": " "
  },
  "guides.Contributing": {
    "src": {
      "path": "node_modules/steal/docs/pages/contributing.md"
    },
    "body": "\n## Bugs and Feature Requests\n\nBugs and feature requests should be submitted to \n[steal](http://github.com/bitovi/steal/issues/new) for issues\nwith module loading and [steal-tools](http://github.com/bitovi/steal-tools/issues/new)\nfor issues building.  \n\nThe best issues are those submitted with tests.  Learn about how \nto setup a test in the \"Developing\" sections below.\n\n## Developing steal\n\nTo develop steal, fork and clone [steal](http://github.com/bitovi/steal). Make\nsure you have NodeJS installed. Then:\n\n1.  Install npm modules\n  \n        > npm install\n \n2. Install bower modules\n  \n        > bower install\n    \n3. Setup grunt watch\n  \n        > grunt watch\n    \nThis will automatically build `steal.js` and `steal.production.js`\nwhen anything in `src` changes.  \n  \nTo __test__, open `test/test.html`, and make sure everything passes.\n\n## Understanding steal's code\n\n`steal.js` packages two other projects:\n\n - [ES6ModuleLoader](https://github.com/ModuleLoader/es6-module-loader) - Provides the [Loader](steal#section_LoaderandSystemnamespaces) and [System](steal#section_LoaderandSystemnamespaces) Polyfill.\n - [SystemJS](https://github.com/systemjs/systemjs) - Provides most System extensions \n   like [System.paths], [System.map] and the [syntax.amd AMD] and [syntax.CommonJS CommonJS] syntaxes.\n\nAnd `steal.js` includes everything in the `src` folder.  On a high level, steal.js is\norganized like:\n\n    /* ES6ModuleLoader */\n        /* - Promise polyfill */\n    !function(e){\"object\"==typeof ...}\n        /* - Loader Polyfill */\n        /* - System Polyfill */\n    \n    /* SystemJS */\n    (function(__$global) {\n      /* meta, register, core, global, cjs, amd, map, \n         plugins, bundles, versions, depCache extensions */\n    });\n    \n    /* start.js\n     * - wraps everything in a closure\n     * - helpers that are useful everywhere\n     */\n    (function(global){\n        // helpers\n        var camelize, each, map, isString, extend, parseURI;\n    /* normalize.js\n     * - standalone normalize function\n     */\n        var normalize = function(){}\n    /* core.js\n     * - starts `makeSteal` that makes `steal`.\n     */\n        var makeSteal = function( System ){\n            var steal = function(){ ... }\n    /* system-extension-ext.js\n     * - the System.ext extension\n     */\n            var addExt = function(loader) { .. };\n            addExt(System);\n    /* system-extension-forward-slash.js\n     * - module names that end in /\n     */\n            var addForwardSlash = function(loader) { ... };\n            addForwardSlash(System);\n    /* config.js\n     * - overwrites System.config\n     * - sets up System.env, System.stealPath, System.bundlesPath\n     */\n            var setterConfig = function(...){...}\n            setterConfig(System,{ ... });\n    /* startup.js\n     * - defines startup code\n     */\n            var getScriptOptions = function () { ... }\n            steal.startup = function(config){ ... }\n    /* make-steal-end.js\n     * - closes `makeSteal`\n     */\n        };\n    /* system-format-steal.js\n     * - a System extension that adds the `steal` syntax\n     */\n        function addSteal(loader) { ... }\n        addSteal(System);\n    /* end.js\n     * - \n     */\n        if (typeof window != 'undefined') {\n            window.steal = makeSteal(System);\n            window.steal.startup( oldSteal );\n            ...\n        } else {\n            require('systemjs');\n            global.steal = makeSteal(System);\n            ...\n        }\n    })(typeof window == \"undefined\" ? global : window);\n\n## Writing a steal test\n\nAll tests are in `test/test.js`.  Most tests\ncreate an iframe that opens another page like:\n\n    asyncTest(\"test description\", function(){\n        makeIframe(\"path/to/page.html\");\n    });\n\nThat page typically uses steal to import some \nmodules and when complete calls to the parent window's\nQUnit assertion methods.  For example:\n\n    <!-- page.html -->\n    <html>\n       <script src='../../steal/steal.js'\n               main='test-module'\n    </html>\n\n    //test-module.js\n    window.parent.QUnit.ok(true, \"test-module-loaded\");\n    window.parent.QUnit.start();\n\n## Developing steal-tools\n\nTo develop steal, fork and clone [steal-tools](http://github.com/bitovi/steal-tools). Make\nsure you have NodeJS installed. Then:\n\n1.  Install npm modules\n  \n        > npm install\n \n2. Install bower modules\n  \n        > bower install\n  \n3. Install mocha\n\n        > npm install -g mocha\n\n\nTo __test__, run:\n\n        > mocha test/test.js\n\n### Windows\n\nNote that if you are using Windows you first need to install a couple of things before\nyou `npm install`.\n\n1. Install [Python 2.7](https://www.python.org/download/releases/2.7/). You'll want\nto add the directory to your PATHS (likely `C:\\Python27`).\n\n2. Install [Microsoft Build Tools](http://www.microsoft.com/en-us/download/details.aspx?id=40760)\nor [Visual Studio Express 2013](http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-desktop)\ndepending on which version of Windows you are using. Try the Build Tools but\nVSE might be needed.\n\nSee the [guides.ContributingWindows] guide for full instructions.\n\n## Understanding steal-tools code\n\nOn a high level, [steal-tools steal-tools] uses `lib/trace.js` to \nfigure out all of the \ndependencies for a module and arange them into a graph. It\nthen transforms that graph into bundles and finally writes\nout the bundles so they can be loaded by the client in production.\n\nA dependency graph that `trace.js` produces looks like:\n\n    {\n      moduleName: Node({\n        load: Load({\n          name: moduleName,\n          source: SOURCE\n        }),\n        dependencies: [moduleName,...],\n        // which [System.bundle] moduleNames this module is a dependency of.\n        bundles: [bundleName,...],\n      })\n    }\n\nHere's an example:\n\n    {\n      \"jquery\": {\n        load: {\n          name: \"jquery\",\n          source: \"jQuery = function(){ ... }\"\n        },\n        dependencies: [],\n        bundles: [\"profile\",\"settings\",\"login\", ...]\n      },\n      \"can/util\": {\n        load: {\n          name: \"can/util\",\n          source: \"define(['jquery'], function($){ ... })\" \n        },\n        dependencies: [\"jquery\"],\n        bundles: [\"profile\",\"login\"]\n      }\n    }\n\nA `Load` is a ES6 load record.\n\nA `Node` is an object that contains the load and other \nuseful information like the modules:\n\n - dependencies\n - bundles\n - transformed and/or minified source\n\nThe build tools only write to `Node` to keep `Load` from being changed.\nThey manipulate this graph and eventually creates \"bundle\" \ngraphs.  Bundle graphs look like:\n\n     {\n       // How many bytes this bundle is minified\n       size: 231231,\n       // The Nodes (and therefore modules) this bundle contains\n       nodes: [node1, node2, ...],\n       // The [System.bundle] moduleNames this bundle is a dependency of\n       bundles: [bundleName1, bundleName2]\t\n     }\n\n[steal-tools steal-tools] code is organized in folders around certain concepts:\n\n - build - high level build modules like the multi build and pluginify.\n - buildTypes - utitlies for specific buildTypes (like CSS or JS).\n - bundle - transformations around bundle objects.\n - configuration - utility for getting derived configuration values.\n - graph - graph creation and transformation utilities.\n - node - utilities around a node in a graph\n\n## Website and Documentation\n\n[steal's gh-pages branch](https://github.com/bitovi/steal/tree/gh-pages)\ncontains [stealjs.com](http://stealjs.com)'s code. It \nuses [DocumentJS](http://github.com/bitovi/documentjs) to produce the \nwebsite.  To edit the docs:\n\n1. Fork/Clone https://github.com/bitovi/steal/tree/gh-pages:\n  \n        > git clone git@github.com:bitovi/steal -b gh-pages\n\n2. Install NPM dependencies:\n\n        > npm install\n        \n3. Install steal and steal-tools submodules:\n  \n        > git submodule init\n        > git submodule update\n        \n4. Generate site\n\n        > node build.js\n        \n5. Edit markdown files in `steal/docs` or `steal-tools/doc`\n  \n6. Regenerate site and check changes\n\n        > ./node_modules/.bin/documentjs\n\n7. Checkin and push markdown changes to steal or steal-tools.\n8. Checkin and push gh-pages branch changes.  \n\n\n\n\n\n\n\n",
    "description": "\nThank you for contributing! \n",
    "name": "guides.Contributing",
    "title": "Contributing",
    "type": "page",
    "parent": "StealJS.guides"
  },
  "StealJS.migrating": {
    "src": {
      "path": "node_modules/steal/docs/pages/migrating.md"
    },
    "body": "\n## Migrating from Legacy Steal\n\nIf you were a user of [legacy Steal](https://github.com/bitovi/legacy-steal) this guide is meant to help you upgrade to the modern version of Steal. If you've never heard of the legacy Steal, this page isn't for you.\n\n### Config changes\n\n#### Map\n\nThere is no longer a `\"*\"` mapping like before:\n\n    steal.config({\n      map: {\n        \"*\": {\n          \"can/util\": \"can/util/jquery\"\n        }\n      }\n    });\n\nInstead flatten these out:\n\n    steal.config({\n      map: {\n        \"can/util\": \"can/util/jquery\"\n      }\n    });\n\n#### Paths\n\nWhen specifying that a folder's children should also be pathed, include an asterisks to denote:\n\n    steal.config({\n      paths: {\n        \"can/\": \"lib/can/\"\n      }\n    });\n\nAdd the asterisks and specify the file type:\n\n    steal.config({\n      paths: {\n        \"can/*\": \"lib/can/*.js\"\n      }\n    });\n\n#### Ext\n\nCSS and Less plugins come by default, you no longer need to specify these in `steal.config`'s ext option. But do add mustache and stache if using those with CanJS.\n\n#### Then\n\nThe old Steal was chainable using `.then`, but this produced numerous problems that are better fixed inside the config. If you need a module to load before loading another, specify this with `deps` inside of the `meta` configuration for that module.\n\n### Build\n\nThe old Steal always produced a `production.js` file, but this is no longer the case. Though configurable, by default the new Steal will place the production file in `dist/bundles` and it will be named after your main module.\n\nYou will also need to add the following to your `stealconfig.js` file to be able to build the CanJS projects (note if you are using NPM this isn't necessary):\n\n    System.buildConfig = {\n      map: {\n        \"can/util/util\" : \"can/util/domless/domless\"\n      }\n    };\n\n## Paths in the less files\n\nSteal compiles the `less` files in a slightly different way than the legacy version which affects `@import`-ing and image urls\n\nIn the legacy Steal, you `@import`-ed stuff relative from the location of the `.less` file:\n\n\nIn the new Steal `@import` path are relative to the steal root folder - folder that contains the `stealconfig.js` file:\n\n\nThe opposite is the case for the image urls in your `.less` files:\n\nLegacy steal (relative to the steal root folder):\n\n    background-image: url(url/to/image.png);\n\nNew steal (relative to the .less file):\n\n    background-image: url(../url/to/image.png);\n\n",
    "description": "\n",
    "name": "StealJS.migrating",
    "title": "Migrating",
    "type": "page",
    "parent": "StealJS.guides",
    "import": [
      "\"../../../styles/variables.less\";",
      "\"styles/variables.less\";"
    ]
  },
  "StealJS.moving-to-prod": {
    "src": {
      "path": "node_modules/steal/docs/pages/production.md"
    },
    "body": "\nOnce your application is in a place to deploy to production you'll need to take just a few steps to get that ready.\n\n## Create a build\n\nUsing [steal-tools] we can create a build that concats and minifies our source code together. If you haven't already, install steal-tools now:\n\n```\nnpm install steal-tools --save-dev\n```\n\nThen create a script in your project folder called `build.js`:\n\n```\nvar stealTools = require(\"steal-tools\");\n\nstealTools.build();\n```\n\nRun it with:\n\n```\nnode build.js\n```\n\nThis will create a bundles folder in `dist/bundles` that contain all of your JavaScript and CSS bundles.\n\nIf you'd also like it to copy your fonts and images (from CSS) you can specify that in the build options:\n\n```\nvar stealTools = require(\"steal-tools\");\n\nstealTools.build({}, {\n  bundleAssets: true\n});\n```\n\nWith everything packaged together you can move the `dist/` folder to where it is exposed on your webserver.\n\nThis will also pack a `steal.production.js` file that can be used to load the app in production.\n\n## Create a production html file\n\nIn a lot of Steal apps you might have separate html files for development and production. Your development.html might look like:\n\n```\n<html>\n<head>\n  <title>My App</title>\n</head>\n<body>\n  <script src=\"./node_modules/steal/steal.js\"></script>\n</body>\n</html>\n```\n\nTo use this in production you only need to change the script tag to:\n\n```\n<script src=\"./dist/node_modules/steal/steal.production.js\" main=\"app/app\"></script>\n```\n\n*Note* that the `main` attribute must be provided for production to work. This is how Steal knows where to find your app's bundles.\n\nIn this example we are using `bundleAssets`, which includes a copy of steal.production.js that is configured to work with your bundles. This allows you to simple serve the `dist/` folder in production and not expose the development files.\n\n[This example app](https://gist.github.com/matthewp/ee36a94997f0eb62bb348de35bbbab2a) shows off this workflow.\n\n### bundleSteal\n\nAlternatively you could use the [steal-tools.BuildOptions bundleSteal] option with steal-tools which will include Steal in your main bundle. To use this option update your build script to:\n\n```\nvar stealTools = require(\"steal-tools\");\n\nstealTools.build({}, {\n  bundleAssets: true,\n  bundleSteal: true\n});\n```\n\nThen to use change your script tag to:\n\n```\n<script src=\"./dist/bundles/app/app.js\"></script>\n```\n\n## Load Scripts from a CDN\n\nYou may have very common scripts like jQuery that you want to load from a CDN in production. To do this, see [Loading Scripts from a CDN](http://stealjs.com/docs/StealJS.loading-from-cdn.html).\n\n",
    "description": "\n",
    "name": "StealJS.moving-to-prod",
    "title": "Moving to Production",
    "type": "page",
    "parent": "StealJS.guides",
    "comment": " "
  },
  "StealJS.project-exporting": {
    "src": {
      "path": "node_modules/steal/docs/pages/project-exporting.md"
    },
    "body": "\n - [syntax.amd] and Bower\n - [syntax.CommonJS] and NPM for [Browserify](http://browserify.org/)\n - [syntax.es6 ES Syntax] and StealJS, SystemJS, or JSPM\n - [syntax.global global format] and `<script>` tags\n\nThis guide uses the [steal-tools.grunt.export] task to call [steal-tools.export] which loads the module source and transpiles it to _AMD_, _CommonJS_ and _global_ compatible distributables. This guide uses the [bit-tabs](https://github.com/bitovi-components/bit-tabs) component built with CanJS, but the same techniques can be used to create and export projects that use any other framework or library.\n\n## Project Structure \n\nThe Steal export process reads the contents of the project's source directory to generate the distributables. Our `bit-tabs` example component uses the _src/_ directory.\n\n> Create `src/` and create the main entry-point in `src/bit-tabs.js`. The `dist/` and the subdirectories will be created by export process\n```\nbit-tabs/\n  /dist\n  \t/amd      - AMD build\n  \t/cjs\t  - CJS/Browserify builds\n  \t/global   - Global / <script> build\n  /src        - Source files\n  /test       - Test source files\n```\n\n## package.json\n\nThe project's `package.json` is used to configure how Browserify or Steal loads your\nproject. The following walks through the important parts:\n\n### \"system\"\n\nThe `system` property specifies SystemJS and StealJS overwrites. Set the [System.main] property as follows to tell SystemJS to use `src/bit-tabs.js` as the starting point of the application. The \"npmIgnore\" property tells StealJS to ignore processing the package.json files of certain dependencies.\n\n> In the system property, create a \"main\" property that points to the main entry-point. And,\n> set \"npmIgnore\" to ignore dependencies that aren't needed by the browser.\n\n```\n  \"system\": {\n    \"main\": \"src/bit-tabs\",\n    \"npmIgnore\": [\"devDependencies\"]\n  },\n```\n\n\n### \"main\"\n\nCJS/Browserify and StealJS will read the `main` property when requiring your package. Set the `main` property to the CommonJS output of the export process.\n\n```\n  \"main\": \"dist/cjs/lib/bit-tabs\",\n```\n\n### \"dependencies\"\n\nUse npm to install your project's dependencies.  If your project includes css or LESS files,\ninclude `cssify`.  Browserify will use it to bundle css files.\n\n```\n  \"dependencies\": {\n    \"can\": \"2.2.0-alpha.10\",\n    \"cssify\": \"^0.6.0\"\n  },\n```\n\nAdd `steal`, `steal-tools`, `grunt`, and `grunt-cli` to your project's devDependencies:\n\n> Add your project's dependencies to _package.json_.\n\n```\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-cli\": \"^0.1.13\",\n    \"steal\": \"0.6.0-pre.0\",\n    \"steal-tools\": \"0.6.0-pre.2\"\n  },\n```\n\n### \"browser\" and \"browserify\"\n\nBecause our project will export CSS, we need to tell Browserify to \nrun \"cssify\" on css files with a `transform`.  To make this work\nwith new and old versions of Browserify you must specify both the \n\"browser\" and \"browserify\" properties.\n\n> Specify Browserify transforms.\n\n```\n  \"browser\": {\n    \"transform\": [\"cssify\"]\n  },\n  \"browserify\": {\n    \"transform\": [\"cssify\"]\n  },\n```\n\n### \"scripts\"\n\nPrior to publishing to `npm`, we need to build the distributables. We will create\na grunt build job that builds our project. For now, we will create a npm script command that points to a `grunt build` task which we will create in the next step:\n\n> Create \"prepublish\" script command which points to `grunt build`.\n\n```\n  \"scripts\": {\n    \"test\": \"grunt test --stack\",\n    \"prepublish\": \"./node_modules/.bin/grunt build\"\n  },\n```\n\n\n\n## Gruntfile.js\n\nFinally, we use [Grunt](http://gruntjs.com/) for task automation. If Grunt isn't your thing, you can use [steal-tools.export steal-tool's export] method.\n\n> Create a _Gruntfile.js_ that looks like the following code block.\n\n```\nmodule.exports = function (grunt) {\n\n\tgrunt.loadNpmTasks('steal-tools');\n\n\tgrunt.initConfig({\n\t\t\"steal-export\": {\n\t\t\tdist: {\n\t\t\t\tsystem: {\n\t\t\t\t\tconfig: \"package.json!npm\"\n\t\t\t\t},\n\t\t\t\toutputs: {\n\t\t\t\t\t\"+cjs\": {},\n\t\t\t\t\t\"+amd\": {},\n\t\t\t\t\t\"+global-js\": {},\n\t\t\t\t\t\"+global-css\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tgrunt.registerTask('build',['steal-export']);\n};\n```\n\nThe [steal-tools.grunt.export] grunt task above loads modules and transpiles them to CommonJS, AMD, and a global distributables. The [steal-tools.grunt.export] task requires a [steal-tools.SystemConfig]. In this example, `system.config` points to the `package.json` file which will hold the export configuration.\n\n\n## Publishing\n\nTo generate your project, run:\n\n```\n> npm run pre-publish\n```\n\nIf you have `grunt-cli` installed you can alternatively call grunt directly.\n\n\n```\n> grunt build\n```\n\nThis should create the `dist/amd`, `dist/cjs` and `dist/global` directories\nwith the files needed to use your project AMD, CommonJS and  `<script>` tags respectively.\n\nFor now, you should inspect these files and make sure they work. Eventually,\nwe may release helpers that make it easy to test your distributables.\n\n### To NPM\n\nRun:\n\n```\n> npm publish\n```\n\n### To Bower\n\nThe first time you publish, you must regisiter your project and create a bower.json.\n\nRegister your project's name:\n\n```\n> bower register bit-tabs git://github.com/bitovi-components/bit-tabs\n```\n\nCreate a [bower.json](https://github.com/bower/bower.json-spec#name). The\neasiest thing to do is copy your `package.json` and remove any node\nspecific values. \n\n```\n{\n  \"name\": \"bit-tabs\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"dist/cjs/lib/bit-tabs\",\n  \"dependencies\": {\n      \"can\": \"2.2.0-alpha.10\",\n      \"cssify\": \"^0.6.0\"\n  },\n  \"system\": {\n      \"main\": \"src/bit-tabs\",\n      \"npmIgnore\": [\"testee\",\"cssify\"]\n  },\n}\n```\n\nOnce bower is setup, publishing to bower just means pushing a \n[semver](http://semver.org/) tag to github that matches your project's version.\n\n```\n> git tag v0.0.1\n> git push origin tag v0.0.1\n```\n\n## Importing the Export\n\nDevelopers need to know how to use your project. The following demonstrates what you need to tell them\ndepending on how they are using your project.\n\n### NPM and StealJS\n\nSimply import, require, or use define to load your project.\n\n```\nimport \"bit-tabs\";\nrequire(\"bit-tabs\");\ndefine([\"bit-tabs\"], function(){});\n```\n\n\n### NPM and CJS\n\nSimply require your project.\n\n```\nrequire(\"bit-tabs\")\n```\n\n### AMD\n\nThey must configure your project as a package:\n\n```\nrequire.config({\n\t    packages: [{\n\t\t    \tname: 'bit-tabs',\n\t\t    \tlocation: 'path/to/bit-tabs/dist/amd',\n\t\t    \tmain: 'dist/amd/src/bit-tabs'\n\t    }]\n});\n```\n\nAnd then they can use it as a dependency:\n\n```\ndefine([\"bit-tabs\"], function(){\n\n});\n```\n\n### Global / Standalone\n\nThey should add script tags for the dependencies and your project and a link\ntag for your project's css:\n\n```\n\t<head lang=\"en\">\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"dist/global/bit-tabs.css\">\n\n\t\t<script src='./node_modules/jquery/dist/jquery.js'></script>\n\t\t<script src='./node_modules/can/dist/can.jquery.js'></script>\n\t\t<script src='./node_modules/can/dist/can.stache.js'></script>\n\t\t<script src='dist/global/bit-tabs.js'></script>\n\t\t<script>\n\t\t\t$(function(){\n\t\t\t\tvar frag = can.view(\"app-template\", {});\n\t\t\t\t$(\"#my-app\").html(frag);\n\t\t\t})\n\t\t</script>\n\t</head>\n\t<body>\n\n\t<script type='text/stache' id=\"app-template\">\n\t  <can-import from=\"bit-tabs\"/>\n\t  <bit-tabs>\n\t\t<can-panel title=\"CanJS\">\n\t\t  CanJS provides the MV*\n\t\t</can-panel>\n\t\t<can-panel title=\"StealJS\">\n\t\t  StealJS provides the infrastructure.\n\t\t</can-panel>\n\t  </bit-tabs>\n\t</script>\n\n\t<div id=\"my-app\"></div>\n```\n",
    "description": "\nStealJS can export your project into commonly used formats and platforms\nwhich can be used to create distributables that can be used in almost any situation:\n",
    "name": "StealJS.project-exporting",
    "title": "Project Exporting",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 2
  },
  "StealJS.roadmap": {
    "src": {
      "path": "node_modules/steal/docs/pages/roadmap.md"
    },
    "body": "\n## New Plugins API\n\nCurrently plugins can only be loaded either with a bang syntax like:\n\n```\nrequire(\"foo.css!css-plugin\");\n```\n\nOr with ext config like:\n\n```\n{\n  \"system\": {\n    \"ext\": {\n      \"css\": \"css-plugin\"\n    }\n  }\n}\n```\n\nThis is sufficient for plugins that are based around a filetype, but we would like to make more advanced plugins that do thinks like provide compatibility to the webpackage module.hot API, or run Babel over all JavaScript files (not just ES6 ones).\n\nhttps://github.com/stealjs/steal/issues/671\n\n## Conditional loading\n\nThis is currently available as [steal-conditional](https://github.com/stealjs/conditional), but will be part of core in 1.0.\n\n## Development Packages\n\nBuild a package that will be loaded in development. For example, instead of\nloading each CanJS module individually, you could easily build them\ninto a package that would be loaded in development as a single file.\n\n## Enhanced caching\n\nWe would like to utilize Service Workers to provide enhanced caching for faster development page load times. We might even be able to offload transpiling to Web Workers to speed things up.\n\n",
    "description": "\nHere's what we've got planned:\n",
    "name": "StealJS.roadmap",
    "title": "Roadmap",
    "type": "page",
    "parent": "StealJS.guides"
  },
  "StealJS.quick-start": {
    "src": {
      "path": "node_modules/steal/docs/pages/quick-start.md"
    },
    "body": "\nThe Quick Start is a simple demo that uses [npm](https://www.npmjs.org/) to install steal, steal-tools,\nand [jquery](http://jquery.com/) to build a *Hello World* app. This guide is a step-by-step guide to create the app from scratch. If you just want a starter project, you can clone the source from the [GitHub Quick Start repo](https://github.com/stealjs/quick-start).\n\n### Install\n\nInstall [Node.js](http://nodejs.org/) on your computer.\n\nCreate a directory for all your static content, scripts, and styles called `quick-start` and navigate into the folder. This is your [System.baseURL baseURL] folder. Within that folder run `npm init` to, create a **package.json**:\n\nNote: when it asks for the *entry point*, write **index.js**.\n\n    > npm init\n\nWithin the BASE folder, use [npm](https://www.npmjs.org/) to install steal, steal-tools, and jquery. Use `--save-dev` to save the configuration to **package.json**.\n\n\t> npm install steal steal-tools jquery --save-dev\n\nIf you already have a webserver running locally, you can skip this step. If you don't have a web server, install this simple zero-configuration command-line [http-server](https://www.npmjs.com/package/http-server) to help you get started.\n\n    > npm install http-server -g\n\nYour `BASE` should now look like this:\n\n      BASE/\n        node_modules/\n          steal/\n          steal-tools/\n          jquery/\n        package.json\n\n### Setup\n\nCreate **index.html** and **index.js**, files in your BASE folder so it looks like:\n\n      BASE/\n        node_modules/\n        package.json\n        index.html\n        index.js\n\nThe **index.html** page loads your app. All that is needed is the script tag that loads steal, which will in turn load your **index.js** as well.\n\n    <!DOCTYPE html>\n    <html>\n      <body>\n        <script src=\"./node_modules/steal/steal.js\"></script>\n      </body>\n    </html>\n\nSteal uses **package.json** to configure its behavior. Find the full details on\nthe [npm npm extension page]. Most of the configuration happens within\na special \"system\" property. Its worth creating it now in case you'll\nneed it later. If you are using NPM 3 (you probably are) also set the npmAlgorithm option within the system property, otherwise leave it out.\n\n```\n{\n  \"name\": \"stealjs\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"system\": {\n    \"npmAlgorithm\": \"flat\"\n  },\n  \"devDependencies\": {\n    ...\n  }\n}\n```\n\n\n**index.js** is the entrypoint of the application. It should load import your\napp's other modules and kickoff the application. Write the following in **index.js**:\n\n    import $ from \"jquery\";\n    $(document.body).append(\"<h1>Hello World!</h1>\");\n\nThe line `import $ from \"jquery\";` is an ES2015 module import that loads jQuery.\n\n### Run in the browser\n\nIf you installed `http-server` earlier, navigate to the `quick-start` directory and run the following command to start the server.\n\n```\n> cd quick-start\n> http-server\nStarting up http-server, serving ./ on: http://0.0.0.0:8080\nHit CTRL-C to stop the server\n```\n\nOpen `http://localhost:8080/index.html` in the browser. You should see a big \"Hello World\". Open the Network tab in developer tools and you'll see several files including index.js were loaded.\n\n### Production Build\n\nOpen up your **package.json** and add the following `build` script to your **scripts** section:\n\n```\n{\n  \"name\": \"stealjs\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"steal-tools\"\n  },\n  \"system\": {\n    \"npmAlgorithm\": \"flat\"\n  },\n  \"devDependencies\": {\n    ...\n  }\n```\n\nAfter saving **package.json** run:\n\n    > npm run build\n\n### Switch to production\n\nChange `index.html` to look like:\n\n    <!DOCTYPE html>\n    <html>\n      <body>\n        <script src=\"./node_modules/steal/steal.production.js\"\n                main=\"index\">\n        </script>\n      </body>\n    </html>\n\n### Run in production\n\nReload `http://localhost:8080/index.html` and check the network tab again, you will see only two scripts load. \nThe steal-tools grunt task builds a graph of the required files, minifies and concatenates all the scripts into **index.js**. \n\n",
    "description": "\n## Quick Start\n",
    "name": "StealJS.quick-start",
    "title": "Quick Start",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 1
  },
  "StealJS.why": {
    "src": {
      "path": "node_modules/steal/docs/pages/why.md"
    },
    "body": "\n*   A [production bundler and optimizer][2] that speeds up application load times by balancing caching and resource requests.\n*   [Easy workflows][3] for use with NPM and/or Bower. Less and CSS are supported out of the box.\n*   A powerful [exporting tool][4] for library authors so your module can reach users regardless of whether they are using StealJS, Browserify, RequireJS, SystemJS or WebPack.\n*   A module loader based on ES6, but providing compatibility with CommonJS and AMD.\n\n## Why StealJS?\n\nThe landscape of module loaders today is vast; there are more choices today than there have ever been. At Bitovi we work with a large variety of different types of teams with their own unique workflows. We needed a modular loader that was flexible to accommodate all of these different teams. So we focused on a few key areas:\n\n## Build Optimization\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/C-kM0v9L9UY\" frameborder=\"0\" allowfullscreen></iframe> \n\nWith some other module loaders you have to start thinking about production right from the beginning. If you don't you might set yourself up to have inefficient production builds. For example if your app is large enough you might worry about a large number of dependencies causing your site's initial load time to be slow. Research has shown that users respond to page load times. The faster your page loads the higher your retention is going to be. Having unused dependencies included in your production build will have an effect on your bottom line.\n\nLikewise if you have a traditional, non single page, application you have to worry about redundancies between your different pages. StealJS provides build optimizations for both types of web sites.\n\n### Progressive Loading\n\nFor a large single page application Steal-Tool's multi-build can break apart your application code into optimized bundles. Only the dependencies needed to render the page being viewed are loaded. As your user navigates to other areas of the site (from say a login screen to the home page) more dependencies are progressively loaded for each section they visit. This means you can more effectively cache your application as well.\n\nTo make the speedup happen, StealJS uses a unique, two pass algorithm that works great for progressively loaded pages and pages with static dependencies. The first pass aggressively splits your dependencies into bundles based on how often modules are used with other modules. This could lead to too many separate bundles and a high number of requests needed when loading a page, so the second pass of the algorithm groups bundles together for greater efficiency.\n\n### Multi-App Build\n\nFor more traditional sites (not single page applications) you might have your apps separated into different pages. Nevertheless you don't want to build a common dependency, like Lodash, into each of these apps' production code. The multi-app build as part of Steal-Tools accounts for this as well. Like with progressive loading common resources are bundled together. So when the user navigates to /cms the CMS app will load a bundle containing jQuery and CanJS that will be reused when they later navigate to the /accounting application.\n\n## Workflows\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eIfUsPdKF4A\" frameborder=\"0\" allowfullscreen></iframe> \n\n### Package Managers\n\nThe rise of package managers like NPM and Bower has changed the way developers write applications today. Unfortunately this alone didn't make it easier to use your dependencies in your projects. In traditional module loaders like RequireJS you would have to configure these dependencies one-by-one.\n\n    require.config({\n      paths: {\n        jquery: \"node_modules/jquery/dist/jquery\",\n        can: \"node_modules/can/dist/amd/can\"\n     }\n    });\n    \n\nThis is tedious and error-prone. Once apps scale your config becomes more complex and harder to read. If any of the packages have their own dependencies you'll have to configure those as well. The result is that most client-side libraries have between 0 and 1 dependency.\n\nSome newer loaders like Webpack and Browserify side-step this problem by requiring you use NPM with a build script. This solves the dependency problem but creates new ones. In large applications where you might have many demo and test pages you now have to create separate bundles for each of these.\n\nWe think it can be better than this. The user shouldn't have to configure their loader but they also shouldn't be forced to start off a project by writing a build script. So we built Bower and NPM plugins that allow you to use these package managers but still have the convenience that browser-based module loaders provide.\n\nConsider you are starting a new three.js project. With npm you would install Three like so:\n\n    npm install three --save\n    \n\nWhat this does in the background is save an entry in \"dependencies\" inside of your package.json file. When you add StealJS to your page through the script tag:\n\n    <script src=\"node_modules/steal/steal.js\"></script>\n    \n\nStealJS will know that you're using NPM and look up your package.json for metadata. For you it's as simple as saving and then using:\n\n    import THREE from \"three\";\n    \n\nAdditionally StealJS supports loading code in all popular module formats, and they can be mixed and matched. You don't ever have to care about whether your dependencies are written in CommonJS, AMD, ES6, or even browser globals, and you can choose to use whichever format works for you.\n\n### Exporting\n\nIf you're a library author you've probably experienced the pain of building your library so that it can be consumed by all of the popular module loaders and in Node. Most projects have given up to the point where they only allow their library to be consumed in the format they themselves use and then in one other format; most likely global. Inevitably someone will request a build in a format you don't support.\n\nIt shouldn't be this difficult. As library authors you really don't care about what module loader your users choose; you want them to be able to use your code everywhere. Steal-Tools is a set of build tools that includes a way to export your project to a variety of formats and gives you complete control over what gets built and how. You can, for example, have a large project and export \"foo\" and \"bar\" as their own individual modules if needed. For most common tasks there are helpers that make it easy to export into the common format. For example you could do:\n\n    stealTools.export({\n      system: {\n        config: \"package.json!npm\",\n        main: \"my/project\"\n      },\n      outputs: {\n        \"+cjs\": {},\n        \"+amd\": {},\n        \"+global-js\": {}\n      }\n    });\n    \n\nWhich would export your code to a dist/ folder, dist/cjs, dist/amd, and dist/global for the various formats. In this example we are accepting the defaults, which is what you probably want most of the time. A full export guide is available [on stealjs.com][5]. The built CommonJS code can be used with Browserify, Webpack or StealJS. The AMD code can be used by RequireJS (or any other AMD loader including StealJS) and the global folder contains an output that doesn't require a loader at all.\n\n## Choosing StealJS\n\nThe documentation on [stealjs.com][6] contains everything you need to explore the various features that Steal and Steal-Tools give you. The quick start guide is the best way to get started on a new project using StealJS.\n\nSome of the things on our roadmap including full Source Map support (both for production builds and exported projects), a watch mode that will make continuous-building easier and faster, streams for use with Gulp, and hot reloading of modules.\n\nUp until this point we have been concentrating on nailing the basics but now have room to start implementing features that will make working on your projects incrementally \"nicer\".\n\nLastly, StealJS has a long-standing commitment to backwards compatibility. Even though StealJS is now built on a completely different codebase than it was just a year ago it is mostly compatible with applications that use Legacy Steal with just a few minor config changes. We won't abandon our users when a breaking change comes; there will always be a bridge that makes upgrading your application something that can be done in a day or so.\n\n [1]: https://plus.google.com/events/cfrtqkdrgabil1tojif1dnlq770\n [2]: #section_BuildOptimization\n [3]: #section_Workflows\n [4]: #section_Exporting\n [5]: http://stealjs.com/docs/StealJS.project-exporting.html\n [6]: http://stealjs.com\n\n",
    "description": "\nStealJS is a dependency loader and build tool that solves the most difficult parts of building large JavaScript applications. With it's focus on simplified workflows and highly efficient production builds, we hope that StealJS is the last module loader you'll ever need. If you haven't checked out StealJS yet, we provide:\n",
    "name": "StealJS.why",
    "title": "Why StealJS",
    "type": "page",
    "parent": "StealJS.guides",
    "order": 0
  },
  "StealJS.writing-plugins": {
    "src": {
      "path": "node_modules/steal/docs/pages/writing-plugins.md"
    },
    "body": "\nSteal's plugin API makes it easy to write plugins for module loading that does things like:\n\n* Caches source in localStorage/IndexedDB so it doesn't need to be fetched from the server.\n* Transpiling TypeScript to JavaScript.\n* Preloading images so they are cached before use.\n\n## How to write a plugin\n\nWriting a plugin is just a matter of creating a module that exports one or more of the Steal loader hooks. the loader hooks are:\n\n* [steal.hooks.locate] - Determine the URL for a module.\n* [steal.hooks.fetch] - Fetch a module (like using XHR).\n* [steal.hooks.translate] - Run a transpiler like TypeScript against module source, converting it into JavaScript.\n* [steal.hooks.instantiate] - Override the loader's mechanisms for determining a module's dependencies and ultimate value.\n\nTo override any of these hooks you only need to export the hook name in your module. For example to override the **locate** hook you do:\n\n```\nexports.locate = function(load){\n  // custom logic goes here\n};\n```\n\n### Simple example: image preloading\n\nLet's build a simple example of a plugin, one preloads images so that they are ready before being inserted into the DOM.\n\nLet's start off by creating our plugin, create a file **preload.js** in your project:\n\n```\nexports.fetch = function(load) {\n\n};\n```\n\nTo implement this plugin we are overriding the `fetch` hook. The fetch hook receives the [load] object which identifies the module we are attempting to load.\n\nWhat we want to do in this plugin is to load this image without displaying it to the user. This way when, later, our JavaScript inserts the image into the page it has already been loaded from the server and is in the browser cache.\n\nWe can use the [Image constructor](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image) to load the image.  Each loader hook can return a Promise, which we can use to block module loading, but in this case we want the page to load as fast as possible, so we'll load the image in the background but allow module loading to continue.\n\nHere's how we can implement this plugin:\n\n```\nexports.fetch = function(load){\n  var img = new Image();\n  img.src = load.address;\n\n  return \"\";\n};\n```\n\nSteal assumes that the modules it is loading are all JavaScript, and will try to execute their source as JavaScript. Since this is an image, we can return an empty string `\"\"` which becomes this module's \"source\", acting as a noop of sorts.\n\nTo now use this plugin, in another file use the bang syntax to load an image. I'll create a **main.js** for this purpose:\n\n```\nrequire(\"./cat.png!preload\");\n```\n\nAnd now cat.png is preload it. If we were to insert it into the page later, such as after a user had clicked on a link, it would be fresh in the browser cache and would display nearly instantly.\n\nIf you wanted to associate *all* .png files with this preload plugin, you could special it as the handler using [System.ext] configuration:\n\n```\n\"system\": {\n  \"ext\": {\n    \"png\": \"preload\"\n  }\n}\n```\n\nNow with this config all you need to do is:\n\n```\nrequire(\"./cat.png\");\n```\n\n",
    "description": "\n",
    "name": "StealJS.writing-plugins",
    "title": "Writing Plugins",
    "type": "page",
    "parent": "StealJS.guides",
    "comment": " "
  },
  "steal-tools/lib/build/helpers/cjs": {
    "name": "steal-tools/lib/build/helpers/cjs",
    "type": "module",
    "parent": "steal-tools.helpers",
    "src": {
      "line": 7,
      "codeLine": 59,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": "\n\n## Use\n\nAdding \"+cjs\" to a [steal-tools.export.output] name will mixin\ndefault [steal-tools.export.output] and [steal-tools.transform.options]\nvalues that export modules to a CommonJS format.\n\n```\noutputs: {\n  \"+cjs\": {},\n  \"minified+cjs\": {\n    minify: true\n  }\n}\n```\n\nThis mixes in the following default values:\n\n- [steal-tools/lib/build/helpers/cjs.graphs graphs] - Writes out System.main and all of its dependencies.\n- [steal-tools/lib/build/helpers/cjs.format format] - Writes out all modules as CJS.\n- [steal-tools/lib/build/helpers/cjs.normalize normalize] - Leaves moduleName references that reference modules in node_modules alone; makes\n  all other moduleName references relative.\n- [steal-tools/lib/build/helpers/cjs.dest dest] - Writes out each module in `[baseURL]/dist/cjs`.\n- [steal-tools/lib/build/helpers/cjs.ignore ignore] - Ignores everything in node_modules.\n\nYou can overwrite or alter the behavior of these default values by adding a value in\nthe [steal-tools.export.output].\nThe following writes out dest in a different location:\n\n```\noutputs: {\n  \"+cjs\": {\n\t   dest: __dirname+\"/cjs\"\n  }\n}\n```\n\nThe behavior for overwriting [steal-tools.export.output] values is\ndocumented in the default value API pages.\n\n\n",
    "description": "\nHelpers that make exporting to CJS projects easier.\n",
    "title": "cjs",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "signatures": [
      {
        "code": "\"+cjs\": { ... OVERWRITES ... }",
        "description": "\n\nAdds helpers that export modules to a CJS format.\n",
        "params": []
      }
    ],
    "comment": " "
  },
  "steal-tools/lib/build/helpers/cjs.graphs": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/cjs.graphs",
    "params": [
      {
        "types": [
          {
            "type": "function",
            "returns": {
              "types": [
                {
                  "type": "undefined"
                }
              ]
            },
            "params": []
          },
          {
            "type": "Array",
            "template": [
              {
                "types": [
                  {
                    "type": "moduleName"
                  }
                ]
              }
            ]
          }
        ],
        "optional": true,
        "name": "modules",
        "description": "An array of modules to overide the main file.\n "
      }
    ],
    "parent": "steal-tools/lib/build/helpers/cjs",
    "src": {
      "line": 60,
      "codeLine": 68,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": "\n",
    "description": "\nBy default, writes out System.main and all of its dependencies. Defaults to \"graphs\"\ndefault behavior if anything else is provided.\n",
    "_curParam": {
      "types": [
        {
          "type": "function",
          "returns": {
            "types": [
              {
                "type": "undefined"
              }
            ]
          },
          "params": []
        },
        {
          "type": "Array",
          "template": [
            {
              "types": [
                {
                  "type": "moduleName"
                }
              ]
            }
          ]
        }
      ],
      "optional": true,
      "name": "modules",
      "description": "An array of modules to overide the main file.\n "
    }
  },
  "steal-tools/lib/build/helpers/cjs.format": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/cjs.format",
    "params": [],
    "parent": "steal-tools/lib/build/helpers/cjs",
    "src": {
      "line": 79,
      "codeLine": 84,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": " \n",
    "description": "\nReturns \"cjs\".\n"
  },
  "steal-tools/lib/build/helpers/cjs.normalize": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/cjs.normalize",
    "params": [
      {
        "name": "aliases",
        "types": [
          {
            "type": "*"
          }
        ]
      }
    ],
    "parent": "steal-tools/lib/build/helpers/cjs",
    "src": {
      "line": 90,
      "codeLine": 98,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": "\n \n",
    "description": "\nBy default, makes everything not in node_modules relative. It also\nadds a \".js\" or \".css\" to files not ending with \".js\" or \".css\". If a function is provided,\nit will overwrite this behavior.\n"
  },
  "steal-tools/lib/build/helpers/cjs.dest": {
    "name": "steal-tools/lib/build/helpers/cjs.dest",
    "type": "function",
    "parent": "steal-tools/lib/build/helpers/cjs",
    "src": {
      "line": 148,
      "codeLine": 156,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": "\n",
    "description": "\nBy default, writes  out every module in `[baseURL]/dist/cjs`.  And adds a \".js\" or \".css\" to\nfiles not ending with \".js\" or \".css\".\n",
    "title": "",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "optional": true,
        "name": "path",
        "description": "If provided, changes the location where files are written out.\n "
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "optional": true,
      "name": "path",
      "description": "If provided, changes the location where files are written out.\n "
    }
  },
  "steal-tools/lib/build/helpers/cjs.ignore": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/cjs.ignore",
    "params": [
      {
        "types": [
          {
            "type": "*"
          }
        ],
        "name": "additional",
        "description": "\"ignores\" that should be added.\n "
      }
    ],
    "parent": "steal-tools/lib/build/helpers/cjs",
    "src": {
      "line": 157,
      "codeLine": 164,
      "path": "node_modules/steal-tools/lib/build/helpers/cjs.js"
    },
    "body": "\n",
    "description": "\nIgnores everything in _node_modules_.\n",
    "_curParam": {
      "types": [
        {
          "type": "*"
        }
      ],
      "name": "additional",
      "description": "\"ignores\" that should be added.\n "
    }
  },
  "steal-tools/lib/build/helpers/global": {
    "type": "module",
    "name": "steal-tools/lib/build/helpers/global",
    "parent": "steal-tools.helpers",
    "src": {
      "line": 7,
      "codeLine": 42,
      "path": "node_modules/steal-tools/lib/build/helpers/global.js"
    },
    "body": "\n\n## Use\n\nAdd in `+global-js` and `+global-css` in an output name to build\na single file with all of the module and its dependencies JS and CSS\nthat is not in _node_modules_.\n\n```\nstealTools.export({\n  system: {\n    main: \"my-module\",\n    config: __dirname+\"/package.json!npm\"\n  },\n  outputs: {\n    \"+global-js\": {},\n    \"+global-css\": {}\n  }\n});\n```\n\n",
    "description": "\nHelpers that make exporting to [syntax.global] formats easier.\n",
    "title": "global",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "signatures": [
      {
        "code": "\"+global-js\": { ... OVERWRITES ... }",
        "description": "\n\nExports all JS into a single file.\n",
        "params": []
      },
      {
        "code": "\"+global-css\": { ... OVERWRITES ... }",
        "description": "\n\nExports all CSS into a single file.\n",
        "params": []
      }
    ],
    "comment": " "
  },
  "steal-tools/lib/build/helpers/global.dest": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/global.dest",
    "params": [
      {
        "name": "loc",
        "types": [
          {
            "type": "*"
          }
        ]
      },
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "optional": true,
        "name": "path",
        "description": "If provided, changes the location where files are written out.\n\t "
      }
    ],
    "parent": "steal-tools/lib/build/helpers/global",
    "src": {
      "line": 48,
      "codeLine": 56,
      "path": "node_modules/steal-tools/lib/build/helpers/global.js"
    },
    "body": "\n",
    "description": "\nBy default, writes  out every module in `[baseURL]/dist/global`.  And adds a \".js\" or \".css\" to\nfiles not ending with \".js\" or \".css\".\n",
    "title": "",
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "optional": true,
      "name": "path",
      "description": "If provided, changes the location where files are written out.\n\t "
    }
  },
  "steal-tools/lib/build/helpers/amd": {
    "name": "steal-tools/lib/build/helpers/amd",
    "type": "module",
    "parent": "steal-tools.helpers",
    "src": {
      "line": 12,
      "codeLine": 56,
      "path": "node_modules/steal-tools/lib/build/helpers/amd.js"
    },
    "body": " Helpers that make exporting to AMD projects easier.\n \n \n ## Use\n \n Add `+amd` in an output name.\n \n ```\n stealTools.export({\n   system: {\n     main: \"my-module\",\n     config: __dirname+\"/package.json!npm\"\n   },\n   outputs: {\n     \"+amd\": {\n       normalize: { \"lodash\": \"underscore\" }  \n     }\n   }\n });\n ```\n \n`+amd` mixes in the following default values:\n \n - [steal-tools/lib/build/helpers/cjs.graphs graphs] - Writes out System.main and all of its dependencies.\n - [steal-tools/lib/build/helpers/amd.format format] - Writes out all modules as CJS.\n - [steal-tools/lib/build/helpers/amd.normalize normalize] - Leaves moduleName references that reference modules in node_modules alone; makes\n   all other moduleName references relative.\n - [steal-tools/lib/build/helpers/amd.dest dest] - Writes out each module in `[baseURL]/dist/amd`.\n - [steal-tools/lib/build/helpers/cjs.ignore ignore] - Ignores everything in node_modules.\n \n Some of the behavior is inherit from the [steal-tools/lib/build/helpers/cjs] export helper.\n \n \n",
    "description": " \n",
    "title": "amd",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "signatures": [
      {
        "code": "\"+amd\": { ... OVERWRITES ... }",
        "description": "\n\nAdds [steal-tools.export.output] values that write a project out to an AMD format.\n",
        "params": []
      }
    ],
    "comment": " "
  },
  "steal-tools/lib/build/helpers/amd.format": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/amd.format",
    "params": [],
    "parent": "steal-tools/lib/build/helpers/amd",
    "src": {
      "line": 59,
      "codeLine": 64,
      "path": "node_modules/steal-tools/lib/build/helpers/amd.js"
    },
    "body": " \n",
    "description": "\nReturns \"amd\".\n"
  },
  "steal-tools/lib/build/helpers/amd.normalize": {
    "type": "function",
    "name": "steal-tools/lib/build/helpers/amd.normalize",
    "params": [
      {
        "types": [
          {
            "type": "Object",
            "options": []
          }
        ],
        "optional": true,
        "name": "aliases",
        "description": "An object of aliases that will be used\nto normalize module names.\n"
      }
    ],
    "parent": "steal-tools/lib/build/helpers/amd",
    "src": {
      "line": 73,
      "codeLine": 91,
      "path": "node_modules/steal-tools/lib/build/helpers/amd.js"
    },
    "body": "\n\n## Use\n\nBy default, removes `.js` for js resources and prepends `css!` \nfor css resources. It also removes the last part of \"repeat\" modules. \nFor example `\"mods/module1/module1\"` becomes `\"mods/module1\"`.\n \n\n \n",
    "description": "\nNormalizes to the AMD format.\n",
    "_curParam": {
      "types": [
        {
          "type": "Object",
          "options": []
        }
      ],
      "optional": true,
      "name": "aliases",
      "description": "An object of aliases that will be used\nto normalize module names.\n"
    },
    "comment": " "
  },
  "steal-tools/lib/build/helpers/amd.dest": {
    "name": "steal-tools/lib/build/helpers/amd.dest",
    "type": "function",
    "parent": "steal-tools/lib/build/helpers/amd",
    "src": {
      "line": 141,
      "codeLine": 149,
      "path": "node_modules/steal-tools/lib/build/helpers/amd.js"
    },
    "body": "\n",
    "description": "\nBy default, writes  out every module in `[baseURL]/dist/amd`.  And adds a \".js\" or \".css\" to\nfiles not ending with \".js\" or \".css\".\n",
    "title": "",
    "params": [
      {
        "types": [
          {
            "type": "String"
          }
        ],
        "optional": true,
        "name": "path",
        "description": "If provided, changes the location where files are written out. \n "
      }
    ],
    "_curParam": {
      "types": [
        {
          "type": "String"
        }
      ],
      "optional": true,
      "name": "path",
      "description": "If provided, changes the location where files are written out. \n "
    }
  },
  "steal-tools/lib/build/helpers/standalone": {
    "name": "steal-tools/lib/build/helpers/standalone",
    "type": "module",
    "parent": "steal-tools.helpers",
    "src": {
      "line": 4,
      "codeLine": 35,
      "path": "node_modules/steal-tools/lib/build/helpers/standalone.js"
    },
    "body": "\n\n## Use\n\nAdd in `+standalone` in an output name to export your project to a single\nfile which will include NPM dependencies. This is the option you most often\nwant when creating a build meant to be used in a script tag or jsbin, etc.\n\n```\nstealTools.export({\n  system: {\n    config: __dirname+\"/package.json!npm\"\n  },\n  outputs: {\n   \"+standalone\": {\n      dest: __dirname + \"/mylib.js\"\n   }\n  }\n});\n```\n\n",
    "description": "\nHelper that make exporting to [syntax.global] formats easier.\n",
    "title": "standalone",
    "types": [
      {
        "type": "function",
        "returns": {
          "types": [
            {
              "type": "undefined"
            }
          ]
        },
        "params": []
      }
    ],
    "signatures": [
      {
        "code": "\"+standalone\": { ... OVERRIDES ... }",
        "description": "\n\nExports all Javascript into a single file, including all dependencies.\n",
        "params": []
      }
    ],
    "comment": " "
  }
}
